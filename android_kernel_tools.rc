#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === Build paths ===
export android_development_shell_tools_bbootimg=${android_development_shell_tools_dir}/android_tools/bbootimg;
export android_development_shell_tools_bbootimg_host=${android_development_shell_tools_dir}/android_tools/bbootimg_host;

# === Fast Bootimage Builder ===
function fboota()
{
  # Usage
  if [ ! "$(type -t croot 2> /dev/null)" = 'function' ] || [ -z "${TARGET_PRODUCT}" ]; then
    echo '';
    echo ' Usage: fboota [fastupl,flash,full,init,inject,recovery,sep,unsecure,zip]';
    echo '  Details: fboota needs the envbuild and lunch variables';
    echo '';
    return;
  fi;

  # Variables
  local cwd=$(pwd);
  local device=$(repogetdevice);
  local device_common='';
  local params=${1};
  local tmpfile=$(mktemp);
  local imagename='boot';
  local jobs=$(grep -c ^processor /proc/cpuinfo);

  # Build environment
  croot;
  export USE_NINJA=false;
  export USE_SOONG_UI=false;

  # Header
  echo '';
  echo -e ' \e[1;37m[ Fast Kernel Builder by Adrian DC - 2016-2017 ]\e[0m';
  echo '';

  # Root holder for fastboot flash
  if [[ "${params}" =~ 'flash' ]]; then
    sudo printf '';
  fi;

  # Output cleaner
  rm -fv ./out/target/product/${device}/boot.*;
  rm -fv ./out/target/product/${device}/*.cpio;
  rm -fv ./out/target/product/${device}/*.fs;
  rm -fv ./out/target/product/${device}/*.img;
  rm -fv ./out/target/product/${device}/system/lib/modules/*;
  echo '';

  # Unsecure adb changes
  if [[ "${params}" =~ 'unsecure' ]]; then
    bootimagedebuggable "${device}" true;
    echo '';
  fi;

  # Force init rebuild
  if [[ "${params}" =~ 'init' ]]; then
    rm -rf ./out/target/product/${device}/obj/EXECUTABLES/init_intermediates;
    rm -f ./out/target/product/${device}/root/init.real;
    rm -f ./out/target/product/${device}/root/init;
  fi;

  # Sepolicies builder
  if [[ "${params}" =~ 'sep' ]]; then
    if [ -d ./system/sepolicy ]; then
      mmm -B -j${jobs} ./system/sepolicy/;
    else
      mmm -B -j${jobs} ./external/sepolicy/;
    fi;
  fi;

  # Ramdisk files builder
  export USE_NINJA=false;
  export USE_SOONG_UI=false;
  if ls ./device/*/${device}/rootdir/Android.mk 1> /dev/null 2>&1; then
    mmm ./device/*/${device}/rootdir/;
  fi;

  # Ramdisk common files builder
  device_common=$(cat ./device/*/${device}/device.mk \
                | grep 'inherit-product' \
                | grep 'device' \
                | sed 's/.*\(device.*\)\/[^\/]*)/\1/');
  if [ ! -z "${device_common}" ]; then
    mmm ./${device_common}/rootdir/;
  fi;

  # Bootimage builder
  if [[ ! "${params}" =~ 'recovery' ]]; then

    if [[ ! "${params}" =~ 'full' ]] && $(mms -v >/dev/null 2>&1); then
      mms bootimage | tee ${tmpfile};
    else
      make -j{jobs} bootimage | tee ${tmpfile};
    fi;

  # Recoveryimage builder
  else

    imagename='recovery';
    if [[ ! "${params}" =~ 'full' ]] && $(mms -v >/dev/null 2>&1); then
      mms recoveryimage | tee ${tmpfile};
    else
      make -j{jobs} recoveryimage | tee ${tmpfile};
    fi;

  fi;
  export USE_NINJA=;
  export USE_SOONG_UI=;

  # Unsecure adb changes
  if [[ "${params}" =~ 'unsecure' ]]; then
    bootimagedebuggable "${device}" false;
  fi;

  # Bootimage file path
  local bootimg=$(grep -a ".*image.*${imagename}\.img" ${tmpfile} \
                | head -1 \
                | sed "s/.*: \(.*${imagename}\.img\).*/\1/g");

  # Inject kernel inside bootimage
  if [[ "${params}" =~ 'inject' ]]; then

    # Use the fbootk function
    fbootk $(dirname ${bootimg})/kernel;

  # Zip the bootimage
  elif [[ "${params}" =~ 'zip' ]] && [ ! -z "${bootimg}" ] && [ -f "${bootimg}" ]; then
    bootzip ${device} "${bootimg}";

  # Upload the bootimage
  elif [[ "${params}" =~ 'fastupl' ]] && [ ! -z "${bootimg}" ] && [ -f "${bootimg}" ]; then
    fastupl "${bootimg}" 'bootimage';

  # Flash the bootimage to the device
  elif [[ "${params}" =~ 'flash' ]] && [ ! -z "${bootimg}" ] && [ -f "${bootimg}" ]; then

    # Detect modules
    local modules=$(find "./out/target/product/${device}/system/lib/modules/" -type f);
    local module_file;

    # Waiting to get adb
    echo '';
    echo '';
    echo -e ' \e[1;37m[ Waiting for adb root... ]\e[0m';
    echo '';
    timeout 10 adb 'wait-for-device';

    # Handle kernel modules
    if [ ! -z "${modules}" ]; then
      echo '';
      echo -e ' \e[1;37m[ Kernel modules... ]\e[0m';
      echo '';
      adb remount;
      timeout 10 adb 'wait-for-device';
      adb shell rm -rf '/system/lib/modules/';
      for module in ${modules[*]}; do
        module_file=$(basename "${module}");
        adb push "${module}" "/system/lib/modules/${module_file}";
      done;
    fi;

    # Flash new bootimage
    echo '';
    echo -e " \e[1;37m[ Bootloader ${bootimg}... ]\e[0m";
    export PackageResult="${bootimg}";
    echo '';
    sudo adb reboot bootloader;
    timeout 20 sudo fastboot flash boot "${bootimg}";
    timeout 5 sudo fastboot reboot;
    echo '';

  fi;

  # End of process
  export USE_NINJA=;
  export USE_SOONG_UI=;
  rm -f ${tmpfile};
  cd ${cwd};
  echo '';
}

# === Kernel Flasher ===
function fboot()
{
  # Usage: fboot <bootimage>

  # Bootloader, flash bootimage and reboot
  sudo adb reboot bootloader;
  if [ ! -z "${1}" ]; then
    local file=$(echo "${1}" | sed 's/file:\/\/\(.*\)/\1/');
    sudo fastboot flash boot "${file}";
  else
    sudo fastboot flash boot boot.img;
  fi;
  sudo fastboot reboot;
}

# === System Flasher ===
function fboots()
{
  # Usage: fboots <system_img>

  # Bootloader and flash system
  sudo adb reboot bootloader;
  if [ ! -z "${1}" ]; then
    local file=$(echo "${1}" | sed 's/file:\/\/\(.*\)/\1/');
    sudo fastboot flash system "${file}";
  else
    sudo fastboot flash system system.img;
  fi;
}

# === Fastboot Reboot ===
function fbootr()
{
  # Usage: fbootr (Fastboot reboot)

  # Fastboot reboot
  sudo fastboot reboot;
}

# === Kernel Informations ===
function fbooti()
{
  # Usage: fbooti (Kernel bbootimg analyzer)

  # Variables
  local partitiontarget=$(androiddevicestarget boot);

  # Kernel informations
  adbro;
  adb push "${android_development_shell_tools_bbootimg}" /bbootimg;
  adb shell 'chmod +x /bbootimg; chmod 755 /bbootimg';
  adb shell 'chmod +x /bbootimg; chmod 755 /bbootimg';
  adb shell /bbootimg -i ${partitiontarget};
}

# === Host Kernel Informations ===
function bootinfo()
{
  # Usage
  if [ ! -f "${1}" ]; then
    echo '';
    echo ' Usage: bootinfo <boot_img_file>';
    echo '';
    return;
  fi;

  # Run bbootimg on the kernel input
  "${android_development_shell_tools_bbootimg_host}" -i "${1}";
}

# === FOTA Informations ===
function adbfotainfos()
{
  # Usage: adbfotainfos (FOTA bbootimg analyzer)

  # Variables
  local partitiontarget=$(androiddevicestarget fota);

  # FOTA informations
  adbro;
  adb push "${android_development_shell_tools_bbootimg}" /bbootimg;
  adb shell 'chmod +x /bbootimg; chmod 755 /bbootimg';
  adb shell 'chmod +x /bbootimg; chmod 755 /bbootimg';
  adb shell /bbootimg -i ${partitiontarget};
}

# === Kernel Injector ===
function fbootk()
{
  # Variables
  local filepath=${1};

  # Adapt path if needed for makekernel
  if [ ! -f "${filepath}" ] && [ -f ".build/${filepath}" ]; then
    filepath=".build/${filepath}";
  fi;

  # Usage
  if [ -z "${filepath}" ] || [ ! -f "${filepath}" ]; then
    echo '';
    echo '  Usage: fbootk <kernelpath> [bool_fota]';
    echo '';
    return;
  fi;

  # Variables
  local partitiontarget=;
  if [ ! -z "${2}" ]; then
    partitiontarget=$(androiddevicestarget fota);
  else
    partitiontarget=$(androiddevicestarget boot);
  fi;

  # Kernel injection
  adbro;
  adb push "${filepath}" /tmpkernel;
  adb push "${android_development_shell_tools_bbootimg}" /bbootimg;
  adb shell 'chmod +x /bbootimg; chmod 755 /bbootimg';
  adb shell 'chmod +x /bbootimg; chmod 755 /bbootimg';
  adb shell /bbootimg -i ${partitiontarget};
  adb shell /bbootimg -u ${partitiontarget} -k /tmpkernel;
  if [ ! -z "${2}" ]; then
    adb reboot recovery;
  fi;
}

# === Recovery Flasher ===
function frecovery()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: frecovery <image> (Flash recovery with fastboot)';
    echo '';
    return;
  fi;

  # Flash recovery with fastboot
  sudo adb reboot bootloader;
  if [ ! -z "${1}" ]; then
    sudo fastboot flash recovery "${1}";
  else
    sudo fastboot flash recovery boot.img;
  fi;
  sudo fastboot reboot;
}

# === ADB Bootimage Pusher ===
function adbbootpush()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbbootpush <image> (Inject bootimage to partition)';
    echo '';
    return;
  fi;

  # Variables
  local boot=$(androiddevicestarget boot);

  # Installer
  adb push ${1} /sdcard/boot.img;
  adbsu "dd if=/dev/zero of=${boot}";
  adbsu "dd if=/sdcard/boot.img of=${boot}";
  adbsu 'rm -f /sdcard/boot.img';
}

# === ADB FOTA Pusher ===
function adbfotapush()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbfotapush <image> (Inject FOTA to partition)';
    echo '';
    return;
  fi;

  # Variables
  local fota=$(androiddevicestarget fota);

  # Installer
  adb push ${1} /sdcard/fota.img;
  adbsu "dd if=/dev/zero of=${fota}";
  adbsu "dd if=/sdcard/fota.img of=${fota}";
  adbsu 'rm -f /sdcard/fota.img';
  #adb reboot recovery;
}

# === ADB Recovery Pusher ===
function adbrecoverypush()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbrecoverypush <image> (Inject recovery to partition)';
    echo '';
    return;
  fi;

  # Variables
  local recovery=$(androiddevicestarget recovery);

  # Installer
  adb push ${1} /sdcard/recovery.img;
  adbsu "dd if=/dev/zero of=${recovery}";
  adbsu "dd if=/sdcard/recovery.img of=${recovery}";
  adbsu 'rm -f /sdcard/recovery.img';
  #adb reboot recovery;
}

# === Kernel Injector Zip ===
function kernelinjectorzip()
{
  # Usage
  if [ -z "${2}" ] || [ ! -f "${2}" ]; then
    echo '';
    echo ' Usage: kernelinjectorzip <device> <kernel_file_path> [kernel_sources_for_modules]';
    echo '';
    return;
  fi;

  # Variables
  local CurDir=$(pwd);
  local PhoneName="${1}";
  local KernelFile=$(readlink -f "${2}");
  local KernelSources=$(readlink -f "${3}");
  local OutFile="kernel-injector-"$(date +'%Y%m%d')"-${PhoneName}.zip";
  local TargetFile="$(xdg-user-dir DESKTOP)/${OutFile}";
  local TmpDir=$(mktemp -d);

  # Partitions
  export ANDROID_DEVICE_TARGET="${PhoneName}";
  local BootPartition=$(androiddevicestarget boot);
  local SystemPartition=$(androiddevicestarget system);

  # Generate zip and updater-script files
  cd "${TmpDir}/";
  mkdir -p ./META-INF/com/google/android/;
  mkdir -p ./scripts/;
  cp "${android_development_shell_tools_flashable_android_base}" "${TargetFile}.unsigned.zip";
  cp "${android_development_shell_tools_updater_kernel_injector}" ./META-INF/com/google/android/updater-script;
  cp -rfv "${android_development_shell_tools_scripts_kernel_injector}/"* ./scripts/;
  sed -i "s/ANDROID_SYSTEM_PARTITION/${SystemPartition//\//\\\/}/" ./META-INF/com/google/android/updater-script;
  sed -i "s/ANDROID_BOOT_PARTITION/${BootPartition//\//\\\/}/" ./scripts/kernel_inject.sh;
  zip -g "${TargetFile}.unsigned.zip" ./META-INF/com/google/android/updater-script;
  zip -g "${TargetFile}.unsigned.zip" ./scripts/*;

  # Pack kernel file
  cp "${KernelFile}" ./scripts/kernel;
  zip -g "${TargetFile}.unsigned.zip" ./scripts/kernel;

  # Modules
  if [ ! -z "${KernelSources}" ]; then
    mkdir -p ./system/lib/modules/;
    for module_file in $(find ${KernelSources} -name *.ko); do
      cp ${module_file} ./system/lib/modules/;
    done;
    zip -g "${TargetFile}.unsigned.zip" './system/lib/modules/'*;
  fi;

  # Zip signature
  signzip "${TargetFile}.unsigned.zip" "${TargetFile}";

  # End of work
  rm -rf "${TmpDir}";
  cd "${CurDir}";

  # Result
  echo '';
  echo -e " \e[1;37mPackage File:\e[0m ${TargetFile}";
  echo '';
}

# === Boot Zip Packer ===
function bootzip()
{
  # Usage
  if [ -z "${2}" ] || [ ! -f "${2}" ]; then
    echo '';
    echo ' Usage: bootzip <device> <boot_img_path>';
    echo '';
    return;
  fi;

  # Variables
  local CurDir=$(pwd);
  local PhoneName="${1}";
  local BootFile=$(readlink -f "${2}");
  local OutFile="boot-"$(date +'%Y%m%d')"-${PhoneName}.zip";
  local TargetFile="$(xdg-user-dir DESKTOP)/${OutFile}";
  local TmpDir=$(mktemp -d);

  # Partitions
  local BootPartition=$(androiddevicestarget boot);

  # Generate zip and updater-script files
  cd "${TmpDir}/";
  mkdir -p ./META-INF/com/google/android/;
  cp "${android_development_shell_tools_flashable_android_base}" "${OutFile}.unsigned.zip";
  cp "${android_development_shell_tools_updater_flash_boot}" ./META-INF/com/google/android/updater-script;
  sed -i "s/ANDROID_BOOT_PARTITION/${BootPartition//\//\\\/}/" ./META-INF/com/google/android/updater-script;
  zip -g "${OutFile}.unsigned.zip" ./META-INF/com/google/android/updater-script;

  # Pack bootimage file
  cp "${BootFile}" "${TmpDir}/boot.img";
  zip -g "${OutFile}.unsigned.zip" 'boot.img';

  # Zip signature
  signzip "${TmpDir}/${OutFile}.unsigned.zip" "${TmpDir}/${OutFile}";
  cp "${TmpDir}/${OutFile}" "${TargetFile}";

  # End of work
  echo '';
  echo -e " \e[1;36mPackage File:\e[0m ${TargetFile}";
  export PackageResult="${TargetFile}";
  echo '';

  # End of process
  rm -rf "${TmpDir}";
  cd "${CurDir}";
}

# === Make Sepolicy ===
function makesep()
{
  # Usage: makesep (Compile sepolicies clean)

  # Access repo root
  local cwd=$(pwd);
  croot;

  # Disable build environment
  export USE_NINJA=false;
  export USE_SOONG_UI=false;

  # Start sepolicies full compilations
  if [ -d ./system/sepolicy ]; then
    mmm -B -j$(grep -c ^processor /proc/cpuinfo) ./system/sepolicy/;
  else
    mmm -B -j$(grep -c ^processor /proc/cpuinfo) ./external/sepolicy/;
  fi;

  # Restore build environment and path
  export USE_NINJA=;
  export USE_SOONG_UI=;
  cd ${cwd}/;
}

# === Bootimage Debuggable ===
function bootimagedebuggable()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: bootimagedebuggable <device_product> <true/false>';
    echo '';
    return;
  fi;

  # Variables and access repo root
  local cwd=$(pwd);
  local file_path;
  croot;

  # Apply unsecure changes
  if [ "${2}" = 'true' ]; then

    # Apply changes build/core/main.mk
    file_path=./build/core/main.mk;
    echo "Bootimage: Apply debug unsecure in ${file_path}";
    sed -i 's/ADDITIONAL_DEFAULT_PROPERTIES += ro.secure=1/ADDITIONAL_DEFAULT_PROPERTIES +=  ro.secure=0/' ${file_path};
    sed -i 's/ro.adb.secure=1/ro.adb.secure=0/' ${file_path};

    # Apply changes build/tools/post_process_props.py
    file_path=./build/tools/post_process_props.py;
    echo "Bootimage: Apply debug unsecure in ${file_path}";
    sed -i 's/val = "adb"/val = "mtp,adb"/' ${file_path};
    sed -i 's/val = val + ",adb"/val = val + ",mtp,adb"/' ${file_path};
    sed -i 's/"persist.sys.usb.config", "none"/"persist.sys.usb.config", "mtp,adb"/' ${file_path};

    # Apply changes vendor/cm/config/common.mk
    file_path=./vendor/cm/config/common.mk;
    echo "Bootimage: Apply debug unsecure in ${file_path}";
    sed -i 's/ro.adb.secure=1/ro.adb.secure=0/' ${file_path};

    # Apply changes out/target/product/${1}/*/default.prop
    for file_path in \
        ./out/target/product/${1}/root/default.prop \
        ./out/target/product/${1}/recovery/root/default.prop \
        ./out/target/product/${1}/ota_temp/\*/RAMDISK/default.prop \
        ./out/target/product/${1}/obj/PACKAGING/target_files_intermediates/\*/\*/RAMDISK/default.prop; do
      if [ -f "${file_path}" ]; then
        echo "Bootimage: Apply debug unsecure in ${file_path}";
        sed -i 's/ro.adb.secure=1/ro.adb.secure=0/' ${file_path};
        sed -i 's/ro.secure=1/ro.secure=0/' ${file_path};
        sed -i 's/persist.sys.usb.config=none/persist.sys.usb.config=mtp,adb/g' ${file_path};
      fi;
    done;

  # Restore secure changes
  else

    # Restore changes build/core/main.mk
    file_path=./build/core/main.mk;
    echo "Bootimage: Restoring debug secure in ${file_path}";
    sed -i 's/ADDITIONAL_DEFAULT_PROPERTIES +=  ro.secure=0/ADDITIONAL_DEFAULT_PROPERTIES += ro.secure=1/' ${file_path};
    sed -i 's/ro.adb.secure=0/ro.adb.secure=1/' ${file_path};

    # Restore changes build/tools/post_process_props.py
    file_path=./build/tools/post_process_props.py;
    echo "Bootimage: Restoring debug secure in ${file_path}";
    sed -i 's/val = "mtp,adb"/val = "adb"/' ${file_path};
    sed -i 's/val = val + ",mtp,adb"/val = val + ",adb"/' ${file_path};
    sed -i 's/"persist.sys.usb.config", "mtp,adb"/"persist.sys.usb.config", "none"/' ${file_path};

    # Restore changes vendor/cm/config/common.mk
    file_path=./vendor/cm/config/common.mk;
    echo "Bootimage: Restoring debug secure in ${file_path}";
    sed -i 's/ro.adb.secure=0/ro.adb.secure=1/' ${file_path};

    # Restore changes out/target/product/${1}/*/default.prop
    for file_path in \
        ./out/target/product/${1}/root/default.prop \
        ./out/target/product/${1}/recovery/root/default.prop \
        ./out/target/product/${1}/ota_temp/\*/RAMDISK/default.prop \
        ./out/target/product/${1}/obj/PACKAGING/target_files_intermediates/\*/\*/RAMDISK/default.prop; do
      if [ -f "${file_path}" ]; then
        echo "Bootimage: Restoring debug secure in ${file_path}";
        sed -i 's/ro.adb.secure=0/ro.adb.secure=1/' ${file_path};
        sed -i 's/ro.secure=0/ro.secure=1/' ${file_path};
        sed -i 's/persist.sys.usb.config=mtp,adb/persist.sys.usb.config=none/' ${file_path};
      fi;
    done;

  fi;

  # Restore path
  cd ${cwd}/;
}
