#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === Android gettop ===
function gettop()
{
  # Usage: gettop (Get repo root path)

  # Variables
  local TOPFILE=build/core/envsetup.mk;
  local CURDIR=${PWD};
  local TOP=${CURDIR};

  # Access parent until found or root
  while [ ! -f "${TOPFILE}" ] && [ ! "${PWD}" = '/' ]; do
    cd ../;
    TOP=$(PWD= /bin/pwd -P);
  done;

  # Echo if path is valid
  cd "${CURDIR}";
  if [ -f "${TOP}/${TOPFILE}" ]; then
    echo "${TOP}";
  fi;
}

# === Android croot ===
function croot()
{
  # Usage: croot (Access repo root path)

  # Variables
  local TOP=$(gettop);

  # Access if valid
  if [ "${TOP}" ]; then
    cd $(gettop);
  else
    echo "Couldn't locate the top of the tree.  Try setting TOP.";
  fi;
}

# === Repo Environment Starter for LineageOS ===
function repos()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repos <device_name> (Prepare LineageOS device environment)';
    echo '';
    return;
  fi;

  # Variables
  local currentdir=${PWD};
  local device=${1};

  # Repo root, sources and breakfast
  croot;
  if [ -f ./build/envsetup.sh ]; then
    source ./build/envsetup.sh;
    croot;
    breakfast ${device};
  else
    echo "Android Repo not found...";
  fi;

  # Return to current folder
  cd "${currentdir}";
}

# === Repo Environment Starter for AOSP ===
function reposaosp()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: reposaosp <device_name> (Prepare AOSP device environment)';
    echo '';
    return;
  fi;

  # Prepare AOSP device environment
  local currentdir=${PWD};
  croot;
  if [ -f ./build/envsetup.sh ]; then
    local device=${1};
    local target=$(codenametotarget "${device}");
    source ./build/envsetup.sh; croot;
    lunch aosp_${target}-userdebug;
  else
    echo "Android Repo not found...";
  fi;
  cd "${currentdir}";
}

# === Roomservice Manifest ===
function reporoomserv()
{
  # Usage: reporoomserv (Manifest and local_manifests editor)

  # Manifest and local_manifests editor
  local cwd=$(pwd);
  croot;
  mkdir -p .repo/local_manifests/;
  gedit .repo/local_manifests/roomservice.xml .repo/manifest.xml;
  cd "${cwd}";
}

# === Repo Sync Efficiently ===
function reposy()
{
  # Usage: reposy (Optimized relevant repo sync)

  # Optimized relevant repo sync
  repo sync -j$(grep -c ^processor /proc/cpuinfo) \
            --current-branch \
            --detach \
            -f \
            --force-broken \
            --force-sync \
            -c \
            --no-clone-bundle\
            --no-tags \
            ${@};
}

# === Repo Branch Sync with Safeguard ===
function reposysafe()
{
  # Usage: reposysafe (Safeguarded repo projects sync)

  # Safeguarded repo projects sync
  echo '';
  repo forall -j$(grep -c ^processor /proc/cpuinfo) -c '
        false;
        while [ $? -ne 0 ]; do
          timeout 20 git fetch --progress ${REPO_REMOTE} ${REPO_RREV##*/};
        done;
        echo '';
        echo " Project ${REPO_PROJECT} : ${REPO_REMOTE}/${REPO_RREV##*/}";
        git checkout ${REPO_RREV##*/};
        ';
  echo '';
}

# === Repo Branch Sync ===
function reposybranch()
{
  # Usage: reposybranch (Individual repo projects sync)

  # Individual repo projects sync
  echo '';
  repo forall -c 'echo '';
                  echo " Project ${REPO_PROJECT} : ${REPO_REMOTE}/${REPO_RREV##*/}";
                  git fetch ${REPO_REMOTE} ${REPO_RREV##*/};
                  git checkout ${REPO_RREV##*/};';
  echo '';
}

# === Repo Prune ===
function repoprune()
{
  # Usage: repoprune (Apply repo-wide prune cleanup)

  # Apply repo-wide prune cleanup
  echo '';
  local tmpfile=$(mktemp);
  repo forall -c "echo '';
                  echo \" Project \${REPO_PROJECT} : \${REPO_REMOTE}/\${REPO_RREV##*/}\";
                  git prune HEAD 2> ${tmpfile};
                  while read line; do
                    line=refs\${line#*refs};
                    echo \"  Removing \${line}\";
                    rm -rf .git/\${line};
                  done < ${tmpfile}; return;";
  rm -f ${tmpfile};
  echo '';
}

# === Repo Sync Clean ===
function reposycl()
{
  # Usage: reposycl (Cleaned optimized relevant repo sync)

  # Cleaned optimized relevant repo sync
  repo forall -c 'echo "Cleaning project ${REPO_PROJECT}"; \
                  git rebase --abort >/dev/null 2>&1; \
                  git stash -u >/dev/null 2>&1; \
                  git reset --hard HEAD >/dev/null 2>&1;';
  repo sync -j$(grep -c ^processor /proc/cpuinfo) --current-branch --detach -f --force-broken --force-sync -c --no-clone-bundle --no-tags;
}

# === Repo CCache Status/Setter ===
function repocache()
{
  # Usage: repocache [cache_maximum_size] (CCache watcher and configuration)

  # Variables & repo root
  local currentdir=$(pwd);
  croot;

  # Update the maximum on input (example 20G)
  if [ ! -z "${1}" ]; then
    ./prebuilts/misc/linux-x86/ccache/ccache -M ${1};
  fi;

  # Study the CCache
  watch -n 1 -d "./prebuilts/misc/linux-x86/ccache/ccache" -s;

  # Restore path
  cd ${currentdir}/;
}

# === Repo Branch ===
function repogetbranch()
{
  # Usage: repogetbranch (Get repo main branch)

  # Variables
  local branch='';
  local infos=$(repo info . 2>&1);

  # Repo detection
  if [[ ! "${infos}" =~ 'repo to be installed' ]] && [[ ! "${infos}" =~ 'sudo apt' ]]; then
    branch=$(echo "${infos}" \
          | grep -i 'Manifest branch' \
          | head -n 1 \
          | sed 's/.*\/heads\/\(.*\)/\1/');
  fi;

  # Recent remotes
  if [ -z "${branch}" ] || [[ "${branch}" =~ 'Manifest' ]]; then
    branch=$(git 'for-each-ref' --sort=committerdate refs/remotes/ \
           | grep "$(githubusername)\|origin\|xperia" \
           | head -n 1 \
           | sed 's/.*remotes\/[^\/]*\/\(.*\)/\1/');
  fi;

  # Default failsafe
  if [ -z "${branch}" ] || [[ "${branch}" =~ 'Manifest' ]] || [[ "${branch}" =~ 'HEAD' ]]; then
    branch='cm-14.1';
  fi;

  # Output result
  echo "${branch}";
}
