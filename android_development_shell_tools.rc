#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === Android Shell Tools Folder ===
android_development_shell_tools_branch=${android_development_shell_tools_branch:-master};
android_development_shell_tools_entrypoint=${BASH_SOURCE[0]};
android_development_shell_tools_dir=$(dirname ${android_development_shell_tools_entrypoint});
android_development_shell_tools_extensions=${android_development_shell_tools_dir}/extensions;

# === Android Shell Tools Update ===
function shtoolsup()
{
  # Usage: shtoolsup (Reloads android_development_shell_tools scripts)

  # Reload sources
  source "${android_development_shell_tools_entrypoint}";
  echo '';
  echo -e ' \e[1;33mandroid_development_shell_tools by AdrianDC: \e[0;33mFunctions loaded properly\e[0m';
  echo '';
}

# === Android Shell Tools Sources ===
android_development_shell_tools_sources=(
  $(find ${android_development_shell_tools_dir} -maxdepth 1 -type f -name '*.rc' -not -path "${android_development_shell_tools_entrypoint}" | sort)
  $(find ${android_development_shell_tools_extensions} -maxdepth 2 -type f -name '*.rc' | sort)
);

# === Android Shell Tools Importations ===
for file_source in ${android_development_shell_tools_sources[@]}; do

  # Import all android_development_shell_tools scripts except entrypoint
  if [ ! "${file_source}" = "${android_development_shell_tools_entrypoint}" ]; then
    source ${file_source};
  fi;

done;

# === Android Shell Tools Prebuilt Files ===
export android_development_shell_tools_files_strace_32=${android_development_shell_tools_dir}/android_files/strace_arm32;
export android_development_shell_tools_files_strace_64=${android_development_shell_tools_dir}/android_files/strace_arm64;
export android_development_shell_tools_flashable_android_base=${android_development_shell_tools_dir}/android_files/flashable_android_base.zip;
export android_development_shell_tools_scripts_kernel_injector=${android_development_shell_tools_dir}/android_files/scripts_kernel_injector;
export android_development_shell_tools_signapk_dir=${android_development_shell_tools_dir}/android_signapk;
export android_development_shell_tools_updater_flash_boot=${android_development_shell_tools_dir}/android_files/updater_script_flash_boot;
export android_development_shell_tools_updater_flash_fota=${android_development_shell_tools_dir}/android_files/updater_script_flash_fota;
export android_development_shell_tools_updater_install_system=${android_development_shell_tools_dir}/android_files/updater_script_install_system;
export android_development_shell_tools_updater_kernel_injector=${android_development_shell_tools_dir}/android_files/updater_script_kernel_injector;
export android_development_shell_tools_updater_multirom_secondary=${android_development_shell_tools_dir}/android_files/updater_script_multirom_secondary;

# === Android Shell Tools Functions Editor ===
function shtoolse()
{
  # Usage: shtoolse <words> <to> <search> (Direct access to related sources)

  # Variables
  local files='';

  # Study all script files
  for file_source in ${android_development_shell_tools_entrypoint} ${android_development_shell_tools_sources[@]}; do
    for word in ${@}; do
      grep -aiq "${word}" "${file_source}";

      # List found files
      if [ ${?} -eq 0 ]; then
        files="${files} ${file_source}";
        continue;
      fi;
    done;
  done;

  # Open listed files
  if [ ! -z "${files}" ]; then
    gedit ${files};
  fi;
}

# === Android Shell Tools Syncer ===
function shtoolssync()
{
  # Usage: shtoolssync (Download new android_development_shell_tools changes)

  # Download upstream changes
  local currentdir=${PWD};
  cd "${android_development_shell_tools_dir}/";
  git fetch origin;
  git reset origin/${android_development_shell_tools_branch};
  git stash -u;
  git submodule init;
  git submodule update;
  cd "${currentdir}/";
  shtoolsup;
}

# === Android Shell Tools Pusher ===
function shtoolspush()
{
  # Usage: shtoolspush (Commit new changes to android_development_shell_tools)

  # Update README.md
  shtoolsreadme;

  # Commit changes to upstream
  local currentdir=${PWD};
  cd "${android_development_shell_tools_dir}/";
  git add . -Ap;
  git commit -s;
  git push -f origin HEAD:${android_development_shell_tools_branch};
  cd "${currentdir}/";
  shtoolsup;
}

# === Android Shell Tools Amend ===
function shtoolsamend()
{
  # Usage: shtoolsamend (Amend new changes to android_development_shell_tools)

  # Update README.md
  shtoolsreadme;

  # Amend changes to upstream
  local currentdir=${PWD};
  cd "${android_development_shell_tools_dir}/";
  git add . -Ap;
  git commit -s --amend;
  git push -f origin HEAD:${android_development_shell_tools_branch};
  cd "${currentdir}/";
  shtoolsup;
}

# === Android Shell Tools Differ ===
function shtoolsdiff()
{
  # Usage: shtoolsdiff (Compare with upstream android_development_shell_tools)

  # Compare with upstream
  local currentdir=${PWD};
  cd "${android_development_shell_tools_dir}/";
  git fetch origin;
  git diff HEAD origin/${android_development_shell_tools_branch};
  git diff HEAD;
  cd "${currentdir}/";
}

# === Android Shell Tools Log ===
function shtoolslog()
{
  # Usage: shtoolslog (Display android_development_shell_tools history)

  # Display project history
  local currentdir=${PWD};
  cd "${android_development_shell_tools_dir}/";
  git log --pretty=oneline -n 10;
  cd "${currentdir}/";
}

# === Android Shell Tools Reset ===
function shtoolsreset()
{
  # Usage: shtoolsreset (Reset project to remote HEAD)

  # Reset project to remote HEAD
  cd "${android_development_shell_tools_dir}/";
  git fetch origin;
  git reset origin/${android_development_shell_tools_branch};
  git diff --stat HEAD;
}

# === Android Shell Tools Master ===
function shtoolsmaster()
{
  # Usage: shtoolsmaster (Switch android_development_shell_tools to master branch)

  # Switch android_development_shell_tools to master branch
  local branch=${android_development_shell_tools_branch};
  android_development_shell_tools_branch=master;
  echo '';
  echo -e " \e[1;33mandroid_development_shell_tools: \e[0;33mSwitched from '${branch}' to '${android_development_shell_tools_branch}' branch\e[0m";
  echo '';
}

# === Android Shell Tools Staging ===
function shtoolsstaging()
{
  # Usage: shtoolsstaging (Switch android_development_shell_tools to staging branch)

  # Switch android_development_shell_tools to staging branch
  local branch=${android_development_shell_tools_branch};
  android_development_shell_tools_branch=staging;
  echo '';
  echo -e " \e[1;33mandroid_development_shell_tools: \e[0;33mSwitched from '${branch}' to '${android_development_shell_tools_branch}' branch\e[0m";
  echo '';
}

# === Android Shell Tools README.md Updater ===
function shtoolsreadme()
{
  # Usage: shtoolsreadme (Refresh README.md functions usages)

  # Variables
  local delimiter_start='<!-- Functions Start -->';
  local delimiter_end='<!-- Functions End -->';
  local github_project_url='http:\/\/github.com\/AdrianDC\/android_development_shell_tools';
  local github_file_path='blob\/master';
  local line;
  local line_function;
  local line_standalone;
  local line_summary;
  local line_type;
  local line_usage;
  local path;
  local readme_functions='';

  # Refresh files list
  shtoolsup;

  # Read all sources
  for file in ${android_development_shell_tools_entrypoint} ${android_development_shell_tools_sources[@]}; do

    # Handle file path
    path=${file##${android_development_shell_tools_dir}/};
    path=${path//\//\\\/};

    # Detect standalone ready scripts
    line_standalone=$(grep -a '^# source <(curl -Ls' "${file}");

    # Create source section
    readme_functions+="### \[ Documentation from [${path}](${github_project_url}\/${github_file_path}\/${path})${line_standalone:+  - Standalone Import Ready} \]\n";

    # Inject standalone import script
    if [ ! -z "${line_standalone}" ]; then
      line_standalone=${line_standalone//# source <\(curl -Ls/};
      line_standalone=${line_standalone//)/};
      readme_functions+="  \`\`\`Shell\n";
      for url in ${line_standalone}; do
        readme_functions+="source \<\(curl -Ls ${url//\//\\\/}\)\n";
      done;
      readme_functions+="  \`\`\`\n";
    fi;

    # Handle source contents
    while read line; do

      # Parse source functions
      line_function=${line};
      line_function=${line_function#function };
      line_function=${line_function#alias };
      line_function=${line_function%%()*};
      line_function=${line_function%%=*};
      line_type=${line};
      line_type=${line_type//*alias*/Alias};
      line_type=${line_type//*function*/Function};
      line_summary="\(${line_type}\)";
      line_usage='';

      # Parse function content
      if [ "${line_type}" = 'Function' ]; then

        # Parse single line function
        if [[ "${line}" == *"${line_function}()"*"{"*"}" ]]; then
          line_usage=${line#*{ };
          line_usage=${line_usage% \}*};
          line_usage=${line_usage%;};

        # Parse function usage
        else
          line_usage=$(grep -a "Usage: ${line_function}\( \|'\|\"\)" "${file}");
          line_usage=${line_usage#*Usage: };
          line_usage=${line_usage%;};
          line_usage=${line_usage%$"'"};
          line_usage=${line_usage%$'"'};

          # Mark function summary field
          if [[ "${line_usage}" == *"("*")"* ]]; then
            line_usage=${line_usage/ \(/-SUMMARY-};
            line_usage=${line_usage/\)*/-SUMMARY-};

          # Warning about missing description
          else
            echo " ${path}: ${line_type} '${line_function}' has no description";
          fi;
        fi;

      # Parse alias content
      elif [ "${line_type}" = 'Alias' ]; then
        line_usage=${line};
        line_usage=${line_usage#*=};
        line_usage=${line_usage%;};
        line_usage=${line_usage#$"'"};
        line_usage=${line_usage#$'"'};
        line_usage=${line_usage%$"'"};
        line_usage=${line_usage%$'"'};
      fi;

      # Apply usage formattings
      if [ ! -z "${line_usage}" ]; then
        line_usage=${line_usage//\</&lt;};
        line_usage=${line_usage//\>/&gt;};
        line_usage=${line_usage//\//\\\/};
        line_usage=${line_usage//\|/\\\\\|};
        line_usage=${line_usage//\&/\\\&};
        line_usage=${line_usage//$"'"/\\$"'"};
        line_usage=${line_usage//$'"'/\\$'"'};
        line_usage=${line_usage//\$/\\\$};
        line_usage=${line_usage% };

        # Parse summary out
        if [[ "${line_usage}" == *"-SUMMARY-"*"-SUMMARY-"* ]]; then
          line_summary=${line_usage#*-SUMMARY-};
          line_summary=${line_summary%-SUMMARY-*};
          line_usage=${line_usage/-SUMMARY-*-SUMMARY-/};

          # Apply summary styling
          line_summary="<b>\[${line_summary}\]<\/b>";
        fi;

        # Apply usage styling
        line_usage=" : *${line_usage}*";

      # Warning about missing usages
      else
        echo '';
        echo " ${path}: ERROR: ${line_type} '${line_function}' has no usage";
        echo '';
        return;
      fi;

      # Append function details
      readme_functions+="  * [**${line_function}** *${line_summary}*](${github_project_url}\/${github_file_path}\/${path})${line_usage}\n";

    done < <(grep -a "^alias.*=\|^function .*()" "${file}");

    # Sections separation
    readme_functions+="\n---\n";

  done;

  # Generation information
  readme_functions+="* #### Automatically generated by [shtoolsreadme](${github_project_url}\/${github_file_path}\/android_development_shell_tools.rc) for [android_development_shell_tools](${github_project_url})\n";

  # Inject README.md changes
  sed -i "/${delimiter_start}/{p; :a; N; /${delimiter_end}/!ba; s/.*\n/${readme_functions}/; };" "${android_development_shell_tools_dir}/docs/README.md";
}
