# === Clear Screen ===
alias cls='echo -e \\033c; clear';

# === Repo shortcuts ===
alias repor='function f() { currentdir=${PWD}; while [[ "${PWD}" != '/' && ! -d './device' && ! -d './frameworks' ]]; do cd ..; done; }; f';
alias repos='function f() { currentdir=${PWD}; repor; if [ -f ./build/envsetup.sh ]; then source ./build/envsetup.sh; croot; breakfast huashan; else echo "Android Repo not found..."; fi; cd "$currentdir"; }; f';
alias reposi='repo sync .';

# === ADB shortcuts ===
alias adbr='adb wait-for-devices; adb root; sleep 2; adb wait-for-devices; adb remount; sleep 1; adb wait-for-devices';
alias adbps='function f() { if [ ! -z "$1" ]; then file=$(printf "$1" | sed "s/.*\(\/system.*\)/\1/g"); printf "$file: "; adb push "$1" "$file"; fi; }; f';
alias adbp='adbr; adbps';

# === Build installs ===
function adbi()
{
  logfile=/media/adriandc/AndroidDev/Scripts/script_logs.txt;
  $@ | tee $logfile;
  InstallLog=$(grep "Install:.*target/product" $logfile | sort | uniq);
  adbr;
  echo "";
  for FilePath in ${InstallLog[*]}
  do
    if [[ "$FilePath" =~ "/system" ]]; then
      FilePath=$(printf "$FilePath" | tail -1\
               | sed "s/\x1B\[[0-9;]*[JKmsu]//g"\
               | sed "s/.*$PhoneName\/\([^\[]*.zip\).*/\1/g");
      adbps "$FilePath";
    fi;
  done;
  echo "";
};

# === Git language ===
#alias git='LANG=en_GB git';

# === Git vars ===
gitbranchdefault='cm-13.0';
gitremotedefault='AdrianDC';
gitreviewdefault='github';
gitrebasedefault=25;

# === Git commits ===
alias gitc='git commit';
alias gitcs='git commit -s';
alias gitca='git commit --amend';
alias gitcae='git commit --amend --no-edit';

# === Git assets ===
alias getine='function f() { if [ ! -z "$1" ]; then printf $1; else printf $2; fi; }; f';
alias gitfetchreset='function f() { git fetch $(getine $1 $gitremotedefault) $(getine $2 $gitbranchdefault); git reset FETCH_HEAD --hard; }; f';

# === Git fetching ===
alias gitf='git fetch';
alias gitfmr='git fetch origin; git reset origin/master';
alias gitfgr='function f() { gitfetchreset github $1; }; f';
alias gitfar='function f() { gitfetchreset $gitremotedefault $1; }; f';
alias gitfsr='function f() { gitfetchreset source $1; }; f';

# === Git pushing ===
alias gitpa='function f() { git push -f $gitremotedefault HEAD:$(getine $1 $gitbranchdefault); }; f';
alias gitpf='git push -f';

# === Git resetting ===
alias gitrh='git reset FETCH_HEAD --hard';
alias githd='git reset HEAD --hard';
alias gitro='git reset HEAD^ --hard';
alias gitri='git reset HEAD^';

# === Git rebasing ===
alias gitr='function f() { git rebase HEAD~$(getine $1 $gitrebasedefault) -i; }; f';
alias gitra='git rebase --abort';
alias gitrc='git rebase --continue';
alias gitre='git rebase --edit-todo';
alias gitrs='git rebase --skip';
alias gitrb='function f() { branch=$(getine $1 $gitbranchdefault); git fetch github $branch; git rebase github/$branch; }; f';
alias gitrbo='function f() { branch=$(getine $1 $gitbranchdefault); git fetch origin $branch; git rebase origin/$branch; }; f';

# === Git branch ===
alias gitbc='function f() { branch=$(getine $1 $gitbranchdefault); review=$(getine $2 $gitreviewdefault); \
                            git fetch $review $branch; git branch $branch --track $review/$branch; git checkout $branch; }; f';
alias gitbt='function f() { branch=$(getine $1 $gitbranchdefault); git branch $branch; git checkout $branch; }; f';
alias gitbd='git branch -D';
alias gitbv='git branch -v';
alias gitch='git checkout';

# === Git cherry-picks ===
alias gitcp='git cherry-pick';
alias gitaa='git add . -Av';
alias gitap='git add . -Ap';

# === Git stash ===
alias gits='git stash';
alias gitsp='git stash -p';
alias gitspop='git stash pop';

# === Git tools ===
alias gitlo='git log --pretty=oneline';
alias gitmt='git mergetool';
alias githd='git update-index --assume-unchanged';
alias gitsh='git update-index --no-assume-unchanged';

# === Git patchs ===
alias gitacp='function f() { \
                clear; url=$1; echo $url; \
                if [[ ! $url =~ '.patch' ]]; then url='$url.patch'; fi; \
                patch=$(curl -s $url 2>nul); \
                git apply --stat '$patch'; \
                git apply --check '$patch'; \
              }; f';
alias gitapp='function f() { \
                clear; url=$1; echo $url; \
                if [[ ! $url =~ '.patch' ]]; then url='$url.patch'; fi; \
                patch=$(curl -s $url 2>nul); \
                git apply --3way '$patch'; \
              }; f';

