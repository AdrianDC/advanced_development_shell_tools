#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === GitHub Username ===
function githubusername()
{
  # GitHub Credentials
  export GitEMail="user.name@gmail.com";
  export GitFullName="Full Name";
  export GitUserName="Username";

  # Create  ~/.bash_android.github.rc with the exports to override the credentials
  if [ -f ~/.bash_android.github.rc ]; then
    source ~/.bash_android.github.rc;
  fi;

  # Return username
  echo "${GitUserName}";
}

# === GitHub Url Cherry-pick ===
function gitcpup()
{
  # Variables
  local tmpfile=$(mktemp);
  local tmpurl="${1}";
  echo '';

  # Finish previous one
  if [ -z "${tmpurl}" ]; then
    git am --continue;
    return;
  fi;

  # GitHub/GitLab patch
  if [[ ! "${tmpurl}" =~ '.patch' ]]; then
    if [[ "${tmpurl}" =~ 'github.com' ]] || [[ "${tmpurl}" =~ 'gitlab.com' ]]; then
      tmpurl="${tmpurl}.patch";
    fi;
  fi;

  # CodeAurora patch
  if [[ "${tmpurl}" =~ 'codeaurora.org' ]]; then
    if [[ ! "${tmpurl}" =~ 'patch/' ]]; then
      tmpurl="${tmpurl/commit\/?*id=/patch\/?id=}";
    fi;
    if [[ ! "${tmpurl}" =~ 'patch/' ]]; then
      echo '';
      echo -e ' \e[1;33mgitcpup: Link incomplete, add "..." around the url\e[0m';
      echo " Failed on ${tmpurl}";
      echo '';
      return;
    fi;
  fi;

  # Git Kernel patch
  if [[ "${tmpurl}" =~ 'kernel.org' ]]; then
    if [[ ! "${tmpurl}" =~ 'patch/' ]]; then
      tmpurl="${tmpurl/commit\/?*id=/patch\/?id=}";
    fi;
    if [[ ! "${tmpurl}" =~ 'patch/' ]]; then
      echo '';
      echo -e ' \e[1;33mgitcpup: Link incomplete, add "..." around the url\e[0m';
      echo " Failed on ${tmpurl}";
      echo '';
      return;
    fi;
  fi;

  # Download patch
  rm -rf .git/rebase-apply;
  curl "${tmpurl}" > ${tmpfile} 2> /dev/null;

  # Files renaming
  if [ ! -z "${2}" ] && [ ! -z "${3}" ]; then
    sed -i "s#${2}#${3}#g" "${tmpfile}";
  fi;

  # Cherry-pick
  git am -3 ${tmpfile};
  if [ ${?} -ne 0 ]; then
    echo '';
    echo " Failed on ${tmpurl}";
    echo '';
    return;
  fi;
  git log --max-count=1 --pretty=oneline;
  echo '';

  # End of process
  rm -f ${tmpfile};
}

# === GitHub Url Cherry-pick Renamed ===
function gitcpur()
{
  # Usage
  if [ -z "${4}" ]; then
    echo " Usage: gitcpur githuburltoproject branch search_text replace_text";
    return;
  fi;

  # Variables
  local tmpfile=$(mktemp);
  local tmpurl="${1}";
  local branch="${2}";
  local search="${3}";
  local replace="${4}";
  echo '';

  # GitHub/GitLab patch
  if [[ ! "${tmpurl}" =~ '.patch' ]]; then
    if [[ "${tmpurl}" =~ 'github.com' ]] || [[ "${tmpurl}" =~ 'gitlab.com' ]]; then
      tmpurl="${tmpurl}.patch";
    fi;
  fi;

  # Cherry-pick
  rm -rf .git/rebase-apply;
  curl "${tmpurl}" > ${tmpfile} | sed "s/${search}/${replace}/g" 2> /dev/null;
  git am -3 ${tmpfile};
  if [ ${?} -ne 0 ]; then
    echo '';
    echo " Failed on ${tmpurl}";
    echo '';
    return;
  fi;
  git log --max-count=1 --pretty=oneline;
  echo '';

  # End of process
  rm -f ${tmpfile};
}

# === GitHub Url Fetch-Reset ===
function gitfcu()
{
  # Variables
  link="${1}";

  if [ ! -z "${2}" ]; then
    branch="${2}";
  else
    branch="cm-14.1";
  fi;

  if [ -z "${link}" ]; then
    echo " Error: Not a GitHub url '${link}'";
    return;
  fi;

  git fetch ${link} ${branch};
  echo '';
  git reset --hard FETCH_HEAD;
}

# === Git Clean Tags ===
function gitcleantags()
{
  # Usage
  if [ -z "${1}" ]; then
    echo " Usage: gittagsclean branch_to_keep";
    return;
  fi;

  # Variables
  local branch_keep=${1};

  # Delete tags
  git tag | grep -v ${branch_keep} | xargs git tag -d;
}

# === Git One Branch Keeper ===
function gitonebranch()
{
  # Fetch remotes
  local username=$(githubusername);
  git fetch ${username};
  git fetch ${username} refs/heads/*:refs/heads/*;
  git fetch ${username} refs/tags/*:refs/tags/*;

  # Remove branches
  git branch -r | sed "s/${username}\/\(.*\)/\1/" \
                | grep -v "HEAD" \
                | grep -v $(git rev-parse --abbrev-ref HEAD) \
                | xargs -I {} sh -c "printf \" Removing branch {} : \"; git push ${username} :{};";

  # Remove tags
  git tag -l | xargs -I {} sh -c "printf \" Removing tag {} : \"; git push ${username} :{}; printf "  "; git tag -d {};";
}
# === Git Stash Helpers ===
alias gits='git stash';
alias gitsp='git stash -p';
alias gitsu='git stash -u';
alias gitspop='git stash pop';

# === Git Diff Helpers ===
function gitdi()
{
  # Show unmerged diffs
  git diff --name-status;
  git ls-files --others --exclude-standard | awk '{print "U       " $0}';
}
function gitdfs()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: gitdfs sha1commit';
    echo '';
    return;
  fi;

  # Diff commits
  git diff-tree --no-commit-id --name-status -r ${1};
}
function gitdf()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: gitdf sha1commit filepath';
    echo '';
    return;
  fi;

  # Diff commits with paths
  git diff ${1}^:${2} ${1}:${2};
}

# === Git Log Helpers ===
alias gitlo='git log --pretty=oneline';
alias gitlod='git log --pretty=oneline --';
alias gitloo='git log --pretty=format:"%C(yellow)%h %Cred%ad %Creset%s" --date=short --all --';
function gitlos()
{
  # Variables
  local cnt=${2:-30};

  # Search related commits
  echo '';
  echo -e " \e[1;37mSearching for ${1} in last ${cnt} commits...\e[0m";
  echo '';
  for sha1 in $(git log --max-count=${cnt} --format=format:%H -- .); do
    if [ ! -z "$(git show ${sha1} | grep -i "${1}")" ]; then
      git show --name-only --oneline ${sha1};
      echo '';
    fi;
  done;
}

# === Git Commit Finder ===
function gitfindsha1()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: gitfindsha1 <remote/branch> "title text to search"';
    echo '';
    return;
  fi;

  # Search
  git log --pretty=oneline ${1} \
    | grep "${2}" \
    | head -n 1 \
    | cut -f 1 -d ' ';
}

# === Git Show Helpers ===
alias gitshow='git show --name-status';
alias gitshf='git show --pretty=full';
function gitshl() { git show --oneline --name-only ${1} | tail -n +2 | cut -c $((1+${2:-0}))-; }

# === Git Add Helpers ===
alias gitap='git add -p';
alias gitaa='git add . -Av';
alias gitan='git add . -An';
function gite() { gedit ${1}; printf ' Done ? [Enter] '; read; git add ${1}; }

# === Git Branch Helpers ===
alias gitbd='git branch -D';
alias gitbv='git fetch ${gitreviewdefault} $(git rev-parse --abbrev-ref HEAD); git branch -vv';

# === Git Checkout Helpers ===
alias gitch='git checkout';

# === Git Cherry-Pick Helpers ===
alias gitcp='git cherry-pick';
alias gitcpc='git reset; git cherry-pick --continue';
function gitcpf() { git fetch ${1} ${2}; git cherry-pick FETCH_HEAD; }
function gitfcp() { git fetch ${1}; git cherry-pick FETCH_HEAD~${2:-0}; }
function gitcpr() { git show ${1} --no-color | sed "s/${2}/${3}/g" | patch; }

# === Git Commits Helpers ===
alias gitc='git commit $(gitgpgparam)';
alias gitcs='git commit $(gitgpgparam) -s';
alias gitca='git commit $(gitgpgparam) --amend';
alias gitcae='git commit $(gitgpgparam) --amend --no-edit';
alias gitcauthor='git commit $(gitgpgparam) --amend --no-edit --author="$(git config --global --get user.name) <$(git config --global --get user.email)>"';
alias gitrevert='git revert $(gitgpgparam) --no-edit';
alias gitfix='rm -fv .git/COMMIT_EDITMSG*; rm -fv .git/.COMMIT_EDITMSG.swp';

# === Git Commits Change-ID ===
function gitcid()
{
  # Copy commit-msg
  cp -fv "${bash_android_dir}/android_tools/commit-msg" '.git/hooks/commit-msg';
  chmod u+x ./.git/hooks/commit-msg;

  # Update commit with Change-ID
  git commit --amend --no-edit;
  git commit --amend;
}

# === Git Commits Change-ID Upstream Download ===
function gitcidupstream()
{
  # Fetch commit-msg file
  curl -Lo .git/hooks/commit-msg http://review.lineageos.org/tools/hooks/commit-msg;
  cp -fv '.git/hooks/commit-msg' "${bash_android_dir}/android_tools/commit-msg";
  chmod u+x ./.git/hooks/commit-msg;
}

# === Git Commit Stable
function gitcommitstable
{
  # Default variables
  local to_insert_default='RM-290';

  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitcommitstable "commit_range" "to_insert (default '${to_insert_default}')"';
    echo '';
    return;
  fi;

  # Variables
  local commit_range=${1};
  local to_insert=${2:-${to_insert_default}};

  # Single commits changes
  if [[ ! "${commit_range}" =~ '..' ]]; then
    commit_range=${commit_range}^..${commit_range};
  fi;

  # Pick and edit
  for commit_sha1 in $(git rev-list --reverse ${commit_range}); do
    rm -f .git/COMMIT_EDITMSG;
    rm -f .git/.COMMIT_EDITMSG.swp;
    git cherry-pick ${commit_sha1};
    sed -i -e "2,/^[^ ]*: .*/s/^\([^ ]*: .*\)/${to_insert}\n\n\1/" .git/COMMIT_EDITMSG;
    git commit --amend --edit --file=.git/COMMIT_EDITMSG;
    echo '';
  done;
}

# === Git Fetch Helpers ===
function gitfurl() { git fetch "${1%/commits/*}" "${1#*/commits/}"; }

# === Git Push Helpers ===
alias gitpf='git push -f';

# === Git Rebase Helpers ===
alias gitra='git rebase --abort';
alias gitrc='git rebase --continue';
alias gitre='git rebase --edit-todo';
alias gitrs='git rebase --skip';
function gitrf() { git rebase ${1}^ -i; }
function gitr() { git rebase HEAD~${1:-5} -i; }
function gitrall() { git rebase -i HEAD~$(($(git rev-list --count HEAD) - 1)); }
function gitrfedit() { GIT_SEQUENCE_EDITOR="sed -i -e 's/pick/edit/g'" git rebase ${1} -i; }
function gitredit() { GIT_SEQUENCE_EDITOR="sed -i -e 's/pick/edit/g'" git rebase HEAD~${1:-5} -i; }

# === Git rebasing ===
function gitrb()  { branch=${1:-$(repogetbranch)}; git fetch github ${branch}; git rebase github/${branch}; }
function gitrbo() { branch=${1:-$(repogetbranch)}; git fetch origin ${branch}; git rebase origin/${branch}; }

# === Git Remote Helpers ===
alias gitrv='git remote -v';

# === Git Reset Helpers ===
alias gitrh='git reset FETCH_HEAD --hard';
alias githd='git reset HEAD --hard';
alias gitcl='git reset HEAD --hard; git stash -u; git am --abort';
alias gitro='git reset HEAD^ --hard';
alias gitsl='git reset HEAD^; gitap; gitcae';
alias gitrl='git revert HEAD -n; git commit -m "Revert"; git reset HEAD^; git add -p';
alias gitri='git reset HEAD^';
alias gitrt='git reset --hard';

# === Git Config Helpers ===
alias gitrerere='git config --global rerere.enabled';
alias gitdiffpermhide='git config core.filemode false';
alias gitdiffpermshow='git config core.filemode true';
alias gpglist='gpg --list-secret-keys --keyid-format LONG';
alias gpgsilent='echo "no-tty" >> ~/.gnupg/gpg.conf';
alias gpgenable='git config --global commit.gpgsign true';
alias gpgdisable='git config --global commit.gpgsign false';
alias gpgsigning='git config --global user.signingkey';
alias gitshowsg='git config --global alias.logs "log --show-signature"';
alias gitpwstore='git config --global credential.helper store';
alias githi='git update-index --assume-unchanged';
alias gitsh='git update-index --no-assume-unchanged';

# === Git GPG Parameter ===
function gitgpgparam()
{
  if [ "$(git config --global --get commit.gpgsign)" = 'true' ]; then
    echo '-S';
  fi;
}

# === Git MergeTool Helpers ===
alias gitmt='git mergetool';
function gitme()
{
  # Read next unmerged file
  local path=$(timeout 1 git mergetool 2>/dev/null \
             | head -n 2 \
             | tail -1);

  # If unmerged file found
  if [ -f "${path}" ]; then
    gedit "${path}";
    echo '';
    printf "${path} ? [Enter] ";
    read;
    echo '';
    git add "${path}";
  else
    echo " '${path}' not found...";
  fi;
}
function gitmte()
{
  # Files differences
  git diff --name-only | uniq;
  echo '';

  # Edit all unmerged files
  for file in $(git diff --name-only | uniq); do
    printf " - ${file} : ";
    gedit ${file};
    printf ' Done ? [Enter / Ctrl+C] ';
    read;
    git add ${file};
  done;
}
