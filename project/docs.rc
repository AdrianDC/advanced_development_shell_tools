#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Advanced Development Shell Tools Docs ===
function shtoolsdocs()
{
  # Usage: shtoolsdocs [bool_install] (Instantiate the project documentation)

  # Variables
  local currentdir=${PWD};

  # Access documentation path
  cd "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/docs/";

  # Installation mode
  if [ ! -z "${1}" ]; then
    sudo apt install build-essential curl libcurl4-openssl-dev libffi-dev ruby-dev zlib1g-dev;
    sudo gem install rubygems-update;
    sudo update_rubygems;
    sudo gem install bundler;
    sudo bundle install;
    bundle;
  fi;

  # Open webviewer
  sleep 2 && urlopen "http://127.0.0.1:4002" &

  # Launch Jekyll
  bundle exec jekyll serve --incremental --port 4002;

  # Cleanup server files
  rm -rf ./_site ./.jekyll-metadata ./Gemfile.lock;

  # Restore current path
  cd "${currentdir}/";
}

# === Advanced Development Shell Tools README.forum Updater ===
function shtoolsforum()
{
  # Usage: shtoolsforum (Refresh README.forum project presentation)

  # Variables
  local ext;
  local preview_file;
  local preview_files;
  local preview_timestamp;
  local preview_url=${ADVANCED_DEVELOPMENT_SHELL_TOOLS_URL//\//\\\/};
  local readme_forum=${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/forums/README;
  local readme_md=${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/README;

  # Header
  echo '';
  echo -e ' \e[1;33madvanced_development_shell_tools:\e[1;37m Building README forum documentations\e[0m';
  echo '';

  # Handle multiple README files
  for ext in 'md' 'previews.md' 'samples.md' 'shtools.md' 'version.md'; do

    # Prepare README.forum
    rm -f "${readme_forum}.${ext}";
    cp -v "${readme_md}.${ext}" "${readme_forum}.${ext}";

    # Convert from markdown to bbcode
    sed -i 's#!\[.*\](\(.*\))#[IMG]\1[/IMG]#g' "${readme_forum}.${ext}";
    sed -i 's#\[\([^]]*\)\](\([^)]*\))#[URL=\2]\1[/URL]#g' "${readme_forum}.${ext}";
    sed -i '/^[ ]*<br \/>$/d' "${readme_forum}.${ext}";
    sed -i "s#\`\`\`\(cpp\|Shell\)#[CODE]#g" "${readme_forum}.${ext}";
    sed -i "s#\`\`\`#[/CODE]#g" "${readme_forum}.${ext}";
    sed -i "s#\(\`.*\`\)#[FONT=\"Courier New\"][I]\1[/I][/FONT]#g" "${readme_forum}.${ext}";
    sed -i 's# \(\#\|\)\#\#\#$##g' "${readme_forum}.${ext}";
    sed -i 's#^\#\#\# \(.*\)$#[SIZE=5][B]\1[/B][/SIZE]#g' "${readme_forum}.${ext}";
    sed -i 's#^\#\#\#\# \(.*\)$#[SIZE=4][B]\1[/B][/SIZE]#g' "${readme_forum}.${ext}";
    sed -i ':a;N;$!ba;s#<!-- Center -->\n#[CENTER]#g;s#\n<!-- /Center -->#[/CENTER]#g' "${readme_forum}.${ext}";
    sed -i ':a;N;$!ba;s#<!-- Indent -->\n#[INDENT]#g;s#\n<!-- /Indent -->#[/INDENT]#g' "${readme_forum}.${ext}";
    sed -i 's#<!-- \(\|/\)List -->#[\1LIST]#g' "${readme_forum}.${ext}";
    sed -i 's#^ \* #<!-- Item -->#g' "${readme_forum}.${ext}";
    sed -i 's#\([^*]\{1\}\)\*\([^*]\{1\}[^\*]*\)\*\([^*]\{0,1\}\)#\1[I]\2[/I]\3#g' "${readme_forum}.${ext}";
    sed -i 's#\([^*]\{1\}\)\*\*\([^*]*\)\*\*\([^*]\{0,1\}\)#\1[B]\2[/B]\3#g' "${readme_forum}.${ext}";
    sed -i 's#__\([^*]*\)__#[U]\1[/U]#g' "${readme_forum}.${ext}";
    sed -i 's#^<!-- Item -->#[*]#g' "${readme_forum}.${ext}";
    sed -i '/^---$/d' "${readme_forum}.${ext}";

    # Get all previews png files
    preview_files=$(grep --color=never 'docs/assets.*\.png' "${readme_forum}.${ext}" \
                  | sed "s/.*${preview_url}\/raw\/master\/\(.*\.png\).*/\1/g");
    for preview_file in ${preview_files}; do

      # Filter out wrong outputs
      if [ ! -f "${preview_file}" ]; then
        continue;
      fi;

      # Get file timestamp and replace text
      preview_timestamp=$(stat -c %Y "${preview_file}");
      sed -i "s#${preview_file}#${preview_file}?timestamp=${preview_timestamp}#g" "${readme_forum}.${ext}";
    done;

  done;

  # Parsed header
  echo '';
  echo '  README forum files successfully rebuilt';
  echo '';
}

# === Advanced Development Shell Tools README.md Updater ===
function shtoolsreadme()
{
  # Usage: shtoolsreadme (Refresh README.md functions usages)

  # Variables
  local delimiter_start='<!-- Functions Start -->';
  local delimiter_end='<!-- Functions End -->';
  local github_project_url=${ADVANCED_DEVELOPMENT_SHELL_TOOLS_URL};
  local github_file_path='blob/master';
  local github_file_url;
  local github_raw_path='raw/master';
  local group_buffer;
  local group_category;
  local group_current;
  local group_last;
  local group_name;
  local header_buffer;
  local line;
  local line_function;
  local line_summary;
  local line_type;
  local line_usage;
  local path_file;
  local path_relative;
  local readme_buffer=;
  local stats_aliases=0;
  local stats_functions=0;
  local stats_hidden=0;
  local stats_sources=0;
  local tmp_grep;
  local tmp_list;
  local url;

  # Initialize variables
  group_buffer='';
  group_last='';

  # Unify locale for sorting
  local lc_all=${LC_ALL};
  LC_ALL=C;

  # Reload the project
  shtoolsup;

  # Header
  echo -e ' \e[1;33madvanced_development_shell_tools:\e[1;37m Building README.md documentation\e[0m';
  echo -n '  ...';

  # Refresh project README.md
  cp -f "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/README.md" "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/docs/project.md";

  # Refresh previews README.md
  cp -f "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/README.previews.md" "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/docs/previews.md";

  # Refresh samples README.md
  cp -f "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/README.samples.md" "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/docs/samples.md";

  # Refresh shtools README.md
  cp -f "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/README.shtools.md" "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/docs/shtools.md";

  # Refresh version README.md
  cp -f "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/README.version.md" "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/docs/version.md";

  # Cleanup previous README.md
  sed -i "\#^${delimiter_start}#,\$d" "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/docs/README.md";

  # Build new documentation inline
  {
    # Inject start delimiter
    echo -en "${delimiter_start}\n" >> "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/docs/README.md";

    # Read all sources and scripts
    tmp_list=$(mktemp);
    shtoolsfiles 'sources,scripts' > "${tmp_list}";
    while read -r path_file; do

      # Handle file path
      path_relative=${path_file##${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/};
      github_file_url="${github_project_url}/${github_file_path}/${path_relative}";
      stats_sources=$((stats_sources + 1));

      # Parsing header
      >&2 echo -en "\r\033[K  Parsing ${path_relative}";

      # Extract file group
      group_current=${path_relative%/*};

      # Create header section
      header_buffer='<span class="group_label">['${path_relative}"](${github_file_url})</span>";
      readme_buffer='';

      # Add file group header
      if [ ! "${group_current}" = "${group_last}" ]; then
        group_category=$(cat "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/${group_current}/.category" 2>/dev/null);
        group_name=$(cat "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/${group_current}/.name" 2>/dev/null);

        # Warning about missing group categories
        if [ -z "${group_category}" ]; then
          >&2 echo -e "\r\033[K  \e[1;37m${path_relative}: \e[1;31mERROR: '${path_relative}' has no group '.category'";
          >&2 echo '';
          return;
        fi;

        # Warning about missing group names
        if [ -z "${group_name}" ]; then
          >&2 echo -e "\r\033[K  \e[1;37m${path_relative}: \e[1;31mERROR: '${path_relative}' has no group '.name'";
          >&2 echo '';
          return;
        fi;

        # Build group header output
        readme_buffer+="${group_buffer}<details class='group_details'>\n<summary class=\"group_header\">\n#### ";
        readme_buffer+="<span class=\"group_category\">${group_category} &bull; </span>";
        readme_buffer+="<span class=\"group_label\">${group_name}</span> ####\n</summary>\n\n";
        group_last=${group_current};
        group_buffer='</details>\n\n';
      fi;

      # Prepend documentation arrow
      readme_buffer+="> ### ${header_buffer} ###\n>\n";

      # Handle shell scripts content
      if [ "${path_relative: -3}" = '.sh' ]; then

        # Parse shell script usage
        line_function=${path_relative##*\/};
        line_usage=$(grep -a --color=never "Usage: ${line_function}" "${path_file}");

        # Warning about missing usages
        if [ -z "${line_usage}" ]; then
          >&2 echo -e "\r\033[K  \e[1;37m${path_relative}: \e[1;31mERROR: '${line_function}' has no usage";
          >&2 echo '';
          return;
        fi;

        # Parse usage and summary details
        line_summary=${line_usage#*\(};
        line_summary=${line_summary%\)*};
        line_usage=${line_usage/ \(*\)/};
        line_usage=${line_usage#\# Usage: };

        # Apply summary styling
        line_summary="<b>\\\[${line_summary// /&nbsp;}\]&nbsp;</b>";

        # Append function details
        echo -en "${readme_buffer}  * [**\./${line_usage}** *${line_summary}*](${github_file_url})\n";
        readme_buffer='';

        # Sections separation
        echo -en "\n---\n";

        # Continue with the next file
        continue;

      fi;

      # Acquire source contents
      tmp_grep=$(mktemp);
      grep -a --color=never "^alias.*=\|^function .*()" "${path_file}" > "${tmp_grep}";

      # Handle source contents
      # shellcheck disable=SC2162
      while read line; do

        # Parse source functions
        line_function=${line};
        line_function=${line_function#function };
        line_function=${line_function#alias };
        line_function=${line_function%%\(\)*};
        line_function=${line_function%%=*};
        line_type=${line//*alias*/Alias};
        line_type=${line_type//*function*/Function};
        line_summary="(${line_type})";
        line_usage='';

        # Hide internal functions starting by __
        if [ "${line_function:0:2}" = '__' ]; then
          stats_hidden=$((stats_hidden + 1));
          continue;
        fi;

        # Search for function usage
        line_usage=$(grep -a --color=never "Usage: ${line_function}\( \|'\|\"\)" "${path_file}");

        # Parse function content
        if [ "${line_type}" = 'Function' ] || [ ! -z "${line_usage}" ]; then

          # Parse single line function
          if [[ "${line}" == *"${line_function}()"*"{"*"}" ]]; then
            line_summary='(Inline)';
            line_usage=${line#*\{ };
            line_usage=${line_usage% \}*};
            line_usage=${line_usage%;};
            line_usage=${line_usage// 2>*\/dev\/null/};
            line_usage=${line_usage//--/&#8208;&#8208;};
            stats_functions=$((stats_functions + 1));

          # Parse function usage
          else
            line_usage=${line_usage#*Usage: };
            line_usage=${line_usage%;};
            line_usage=${line_usage%"'"};
            line_usage=${line_usage%'"'};
            line_usage=${line_usage//--/&#8208;&#8208;};
            stats_functions=$((stats_functions + 1));

            # Mark function summary field
            if [[ "${line_usage}" == *"("*")"* ]]; then
              line_usage=${line_usage/ \(/-SUMMARY-};
              line_usage=${line_usage/\)*/-SUMMARY-};

            # Warning about missing description
            else
              >&2 echo " ${path_relative}: ${line_type} '${line_function}' has no description";
            fi;
          fi;

        # Parse alias content
        elif [ "${line_type}" = 'Alias' ]; then
          line_usage=${line#*=};
          line_usage=${line_usage%;};
          if [ "${line_usage:0:1}" = "'" ]; then
            line_usage=${line_usage#"'"};
            line_usage=${line_usage%"'"};
          elif [ "${line_usage:0:1}" = '"' ]; then
            line_usage=${line_usage#'"'};
            line_usage=${line_usage%'"'};
          fi;
          line_usage=${line_usage//--/&#8208;&#8208;};
          stats_aliases=$((stats_aliases + 1));
        fi;

        # Ignore deprecated or hidden functions
        if [[ "${line_usage}" == *'@Deprecated'* ]] || [[ "${line_usage}" == *'@Hide'* ]]; then
          continue;
        fi;

        # Apply usage formattings
        if [ ! -z "${line_usage}" ]; then
          line_usage=${line_usage//\</&lt;};
          line_usage=${line_usage//\>/&gt;};
          line_usage=${line_usage//\|/\\\|};

          # Parse summary out
          if [[ "${line_usage}" == *"-SUMMARY-"*"-SUMMARY-"* ]]; then
            line_summary=${line_usage#*-SUMMARY-};
            line_summary=${line_summary%-SUMMARY-*};
            line_summary="\\\[${line_summary// /&nbsp;}\\\]&nbsp;";
            line_usage=${line_usage/-SUMMARY-*-SUMMARY-/};
          fi;

          # Apply summary styling
          line_summary="<b>${line_summary}</b>";

          # Ignore single usage calls
          if [ "${line_usage}" = "${line_function}" ]; then
            line_usage='';

          # Apply alias usage styling
          elif [ "${line_type}" = 'Alias' ]; then
            line_usage=" : *${line_usage}*";

          # Apply function usage styling
          else
            line_usage=" *${line_usage#${line_function} }*";
          fi;

        # Warning about missing usages
        else
          >&2 echo -e "\r\033[K  \e[1;37m${path_relative}: \e[1;31mERROR: ${line_type} '${line_function}' has no usage";
          >&2 echo '';
          return;
        fi;

        # Append function details
        echo -en "${readme_buffer}  * **${line_function}**${line_usage} [*${line_summary}*](${github_project_url}/${github_file_path}/${path_relative})\n";
        readme_buffer='';

      done < "${tmp_grep}";
      rm -f "${tmp_grep}";

      # Sections separation
      if [ -z "${readme_buffer}" ]; then
        echo -en "\n---\n";
      else
        readme_buffer='';
      fi;

    done < "${tmp_list}";
    rm -f "${tmp_list}";

    # Append last file group buffer
    echo -en "${group_buffer}<div class=\"group_footer\">\n<br />\n\n---\n";

    # Generation information
    echo -en "* _Automatically generated by [shtoolsreadme](${github_project_url}/${github_file_path}/project/docs.rc) for [advanced_development_shell_tools](${github_project_url})_\n</div>\n";

    # Inject end delimiter
    echo -en "${delimiter_end}\n"

  } >> "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/docs/README.md";

  # Restore locale
  LC_ALL=${lc_all};

  # Parsed header
  echo -e "\r\033[K  \e[1;37mREADME.md successfully rebuilt:\e[0m ${stats_functions} functions, ${stats_aliases} aliases and ${stats_hidden} internal functions in ${stats_sources} sources";
  echo '';
}
