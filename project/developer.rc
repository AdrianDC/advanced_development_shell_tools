#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Advanced Development Shell Tools Syntax Checker ===
function shtoolscheck()
{
  # Usage: shtoolscheck [bool_ignore] (Run ShellCheck on the project)

  # Variables
  local file_source;
  local tmp_list;

  # Study all script files
  echo -e '\e[1;37m';
  tmp_list=$(mktemp);
  shtoolsfiles 'entrypoint,sources,scripts' > "${tmp_list}";
  while read -r file_source; do

    # Parsing header
    echo -en "\r\033[K shtoolscheck: Checking '${file_source}'...";

    # Launch ShellCheck
    if ! shellcheck "${file_source}" \
        -e SC1090,SC1091,SC1117,SC2164 \
        && [ -z "${1}" ]; then
      echo -e " \e[1;33mERROR: ${file_source} contains syntax errors or warnings\e[0m";
      echo '';
      return;
    fi;

  done < "${tmp_list}";
  rm -f "${tmp_list}";

  # Successfull syntax check
  echo -e '\r\033[K \e[1;32mshtoolscheck: Syntax checked successfully\e[0m';
  echo '';
}

# === Advanced Development Shell Tools Pusher ===
function shtoolspush()
{
  # Usage: shtoolspush [bool_ignore_readme] (Commit new changes to the project)

  # Update README.md
  if [ -z "${1}" ]; then
    shtoolsreadme;
  fi;

  # Variables
  local currentdir=${PWD};

  # Access Advanced Development Shell Tools folder
  cd "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/";

  # Commit changes
  git add -N ./*;
  git add . -Ap;
  git commit -s;

  # Commits stats with upstream
  git fetch origin "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_BRANCH}";
  echo '';
  echo -en ' \e[1;33mgitstat: \e[1;37mLocal commits:\e[1;33m ';
  git rev-list --left-right HEAD...FETCH_HEAD | grep -c '^<' | xargs echo -n;
  echo -en ' \e[1;37m| Upstream commits:\e[1;33m ';
  git rev-list --left-right HEAD...FETCH_HEAD | grep -c '^>';
  echo -en '\e[0m';
  echo '';

  # Push to upstream
  git push -f origin "HEAD:${ADVANCED_DEVELOPMENT_SHELL_TOOLS_BRANCH}";

  # Restore current path
  cd "${currentdir}/";

  # Reload the project
  shtoolsup;
}

# === Advanced Development Shell Tools Amend ===
function shtoolsamend()
{
  # Usage: shtoolsamend [bool_ignore_readme] [bool_ignore_message] (Amend new changes to the project)

  # Update README.md
  if [ -z "${1}" ]; then
    shtoolsreadme;
  fi;

  # Variables
  local currentdir=${PWD};

  # Access Advanced Development Shell Tools folder
  cd "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/";

  # Commit changes
  git add -N ./*;
  git add . -Ap;
  if [ -z "${2}" ]; then
    git commit -s --amend;
  else
    GIT_EDITOR="sed -i '/^#/d'" git commit -s --amend;
  fi;

  # Commits stats with upstream
  git fetch origin "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_BRANCH}";
  echo '';
  echo -en ' \e[1;33mgitstat: \e[1;37mLocal commits:\e[1;33m ';
  git rev-list --left-right HEAD...FETCH_HEAD | grep -c '^<' | xargs echo -n;
  echo -en ' \e[1;37m| Upstream commits:\e[1;33m ';
  git rev-list --left-right HEAD...FETCH_HEAD | grep -c '^>';
  echo -en '\e[0m';
  echo '';

  # Push to upstream
  git push -f origin "HEAD:${ADVANCED_DEVELOPMENT_SHELL_TOOLS_BRANCH}";

  # Restore current path
  cd "${currentdir}/";

  # Reload the project
  shtoolsup;
}

# === Advanced Development Shell Tools Configuration Edit ===
function shtoolsconf()
{
  # Usage: shtoolsconf (Edit the project configuration)

  # Edit the project configuration
  fileedit "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_CONFIGURATION}";
}
