#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Advanced Development Shell Tools Menu ===
function shtools()
{
  # Usage: shtools (Entrypoint menu to the project)

  # Variables
  local cnt=0;
  local key;
  local line_function;
  local line_usage;
  local list_functions=('');

  # Enable UI wrapper
  __shtoolsui 'enable';
  __shtoolsui 'start';

  # Function header
  echo '';
  echo -e " \e[1;37m[ Advanced Development Shell Tools - Menu ]";
  echo '';

  # Display shtools* menu
  for line_function in $(typeset -F | grep shtools | cut -d' ' -f 3 | grep -v '^shtools$\|^__'); do

    # Parse usage
    line_usage=$(grep -a "Usage: ${line_function} " "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_PROJECT_DIR}/"*);
    if [ -z "${line_usage}" ]; then
      continue;
    fi;
    line_usage=${line_usage#*\(};
    line_usage=${line_usage%\)*};
    list_functions+=("${line_function}");

    # Item choice
    cnt=$((cnt + 1));
    echo -e "  \e[1;33m${cnt}: \e[1;37m${line_function} \e[1;32m[${line_usage}]";

  done;
  echo '';

  # Request user input
  echo -en " \e[1;37m> Command to run [1-${cnt}] : ";
  __shtoolsui 'input';
  echo '';

  # Disable UI wrapper
  __shtoolsui 'disable';

  # Execute requested function
  if [ "${key}" -eq "${key}" ] 2> /dev/null && [ "${key}" -ge 1 ] && [ "${key}" -le "${cnt}" ]; then
    ${list_functions[${key}]};
  fi;
}

# === Advanced Development Shell Tools Options Menu ===
function shtools-()
{
  # Usage: shtools- (Options menu for the project)

  # Variables
  local active;
  local cnt;
  local key;
  local line_function;
  local line_option;
  local line_usage;
  local list_functions;

  # Enable UI wrapper
  __shtoolsui 'enable';

  # Loop until user exits
  key=-1;
  echo '';
  while [ ! "${key}" = '0' ] && [ ! "${key}" = 'q' ]; do

    # Clear UI wrapper
    __shtoolsui 'start';

    # Function header
    echo '';
    echo -e " \e[1;37m[ Advanced Development Shell Tools - Options ]";
    echo '';

    # Reset containers
    active=0;
    cnt=0;
    list_functions=('');

    # Display __shtools-* active options
    for line_function in $(typeset -F | grep '__shtools-' | cut -d' ' -f 3 \
                         | grep -v '^__shtools-$' \
                         | grep '\-enable$'); do

      # Verify if the option is active
      cnt=$((cnt + 1));
      line_option=${line_function%-enable};
      line_option=${line_option#__shtools-};
      if [ ! "${line_option}" = "${line_function}" ] && "__shtools-${line_option}-active" 2> /dev/null; then

        # Parse usage
        line_usage=$(shtoolsfiles 'entrypoint,sources' | xargs grep -a -m1 "Usage: ${line_function} ");
        if [ -z "${line_usage}" ]; then
          continue;
        fi;
        line_usage=${line_usage#*\(};
        line_usage=${line_usage%\)*};

        # Present active option
        active=$((active + 1));
        echo -e "  \e[1;33mOption ${cnt} active: \e[1;37m${line_option} \e[1;32m[${line_usage}]";

      fi;
    done;

    # Detected active options
    if [ "${active}" -ne 0 ]; then
      echo '';
    fi;
    cnt=0;

    # Display exit item
    echo -e "  \e[1;33m0: \e[1;37mKeep current options \e[1;32m[Exit the configuration]";

    # Display __shtools-* menu
    for line_function in $(typeset -F | grep '__shtools-' | cut -d' ' -f 3 \
                         | grep -v '^__shtools-$' \
                         | grep -v '\-active$'); do

      # Verify if the option is active
      line_option=${line_function%-enable};
      if [ ! "${line_option}" = "${line_function}" ] && "${line_option}-active" 2> /dev/null; then
        continue;
      fi;

      # Verify if the option is inactive
      line_option=${line_function%-disable};
      if [ ! "${line_option}" = "${line_function}" ] && ! "${line_option}-active" 2> /dev/null; then
        continue;
      fi;

      # Parse usage
      line_usage=$(shtoolsfiles 'entrypoint,sources' | xargs grep -a -m1 "Usage: ${line_function} ");
      if [ -z "${line_usage}" ]; then
        continue;
      fi;
      line_usage=${line_usage#*\(};
      line_usage=${line_usage%\)*};
      list_functions+=("${line_function}");

      # Item choice
      cnt=$((cnt + 1));
      echo -e "  \e[1;33m${cnt}: \e[1;37m${line_function#__shtools-} \e[1;32m[${line_usage}]";

    done;
    echo '';

    # Request user input
    echo -en " \e[1;37m> Command to run [0-${cnt}] : ";
    __shtoolsui 'input';
    echo '';

    # Default handling
    if [ -z "${key}" ]; then
      key=0;

    # Execute requested function
    elif [ "${key}" -eq "${key}" ] 2> /dev/null && [ "${key}" -ge 1 ] && [ "${key}" -le "${cnt}" ]; then
      ${list_functions[${key}]};
    fi;

  done;

  # Disable UI wrapper
  __shtoolsui 'disable';
}

# === Advanced Development Shell Tools Toolkits Menu ===
function shtoolskits()
{
  # Usage: shtoolskits [init] (Toolkits selection for the project)

  # Variables
  local cnt;
  local file_path;
  local key=-1;
  local list;
  local name;
  local tmp_list;
  local toolkits;

  # Enable UI wrapper
  __shtoolsui 'enable';

  # First time usage
  if [ -z "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_TOOLKITS}" ] || [ ! -z "${1}" ]; then

    # Clear UI wrapper
    __shtoolsui 'start';

    # Function header
    echo '';
    echo -e " \e[1;37m[ Advanced Development Shell Tools - Toolkits ]";
    echo '';
    echo -e ' \e[1;33mshtoolskits:\e[1;37m This function is meant to select which parts of';
    echo '              advanced_development_shell_tools you want to load';
    echo '';

    # Choices list
    echo -e ' \e[1;33mYou are: \e[1;37m1.\e[1;37m An Android developer or beginner';
    echo -e '          \e[1;37m2.\e[1;37m A developer working with Git';
    echo -e '          \e[1;37m3.\e[1;37m Another type of developer or user';
    echo '';

    # Choices input
    key='0';
    while [ -z "${key}" ] || [ ! -z "${key//[0-9]}" ] || [ "${key}" -lt 1 ] || [ "${key}" -gt "3" ]; do
      echo -en " \e[1;33m> \e[1;37mToolkits to use [1-3] :\e[1;37m ";
      __shtoolsui 'input';
    done;

    # Choices selection
    case "${key}" in
      1) toolkits=${ADVANCED_DEVELOPMENT_SHELL_TOOLS_TOOLKITS_ANDROID};;
      2) toolkits=${ADVANCED_DEVELOPMENT_SHELL_TOOLS_TOOLKITS_GIT};;
      3) toolkits=${ADVANCED_DEVELOPMENT_SHELL_TOOLS_TOOLKITS_HOST};;
    esac;

    # Initialize default toolkits
    sed -i "/^# Toolkits:.*/d" "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_CONFIGURATION}";
    export ADVANCED_DEVELOPMENT_SHELL_TOOLS_TOOLKITS="# Toolkits: ${toolkits}";
    echo "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_TOOLKITS}" >> "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_CONFIGURATION}";
    echo '';

  fi;

  # Loop until user exits
  while [ ! "${key}" = '0' ] && [ ! "${key}" = 'q' ]; do

    # Clear UI wrapper
    __shtoolsui 'start';

    # Function header
    echo '';
    echo -e " \e[1;37m[ Advanced Development Shell Tools - Toolkits ]";
    echo '';

    # Reset containers
    cnt=0;
    key='';
    list=('');
    toolkits='|';

    # Display guide information
    echo -e '  \e[1;37mKits: \e[1;32m[+] Enabled, \e[1;31m[-] Disabled, \e[1;36m[!] Mandatory';
    echo '';

    # Display __shtools-* menu
    tmp_list=$(mktemp);
    shtoolsfiles 'sources' | xargs -n1 dirname | uniq > "${tmp_list}";
    while read -r file_path; do

      # Group variables
      name=$(cat "${file_path}/.name" 2>/dev/null);
      file_path=${file_path#${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/};
      if [ "${file_path}" = 'project' ] || [ "${file_path}" = 'extensions/template' ]; then
        continue;
      fi;
      list+=("${file_path}");

      # Status output
      if [[ "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_TOOLKITS_MANDATORY}" == *"|${file_path}|"* ]]; then
        echo -en '  \e[1;36m[!]';
        toolkits="${toolkits}${file_path}|";
      elif [[ "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_TOOLKITS}" == *"|${file_path}|"* ]]; then
        echo -en '  \e[1;32m[+]';
        toolkits="${toolkits}${file_path}|";
      else
        echo -en '  \e[1;31m[-]';
      fi;

      # Item choice
      cnt=$((cnt + 1));
      echo -e "\e[1;33m ${cnt}: \e[1;37m${name:-[Unknown Folder Name]} \e[1;32m[${file_path}]";

    done < "${tmp_list}";
    rm -f "${tmp_list}";
    echo '';

    # Display exit item
    echo -e "      \e[1;33m0: \e[1;37mStore current toolkits \e[1;32m[Exit the configuration]";
    echo '';

    # Request user input
    echo -en " \e[1;33m> \e[1;37mToolkit to toggle [0-${cnt}] :\e[1;37m ";
    __shtoolsui 'input';
    if [ -z "${key}" ]; then
      key='0';
    fi;
    echo '';

    # Execute requested function
    if [ "${key}" -eq "${key}" ] 2> /dev/null && [ "${key}" -ge 1 ] && [ "${key}" -le "${cnt}" ]; then
      file_path=${list[${key}]};
      if [[ ! "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_TOOLKITS_MANDATORY}" == *"|${file_path}|"* ]]; then
        if [[ "${toolkits}" == *"${file_path}"* ]]; then
          toolkits="${toolkits/${file_path}|/}"
        else
          toolkits="${toolkits}${file_path}|";
        fi;
      fi;
      export ADVANCED_DEVELOPMENT_SHELL_TOOLS_TOOLKITS="# Toolkits: ${toolkits}";
    fi;

  done;

  # Disable UI wrapper
  __shtoolsui 'disable';

  # Update new toolkits
  sed -i "s#\(\# Toolkits: \).*#\1${toolkits}#g" "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_CONFIGURATION}";

  # Reload the project
  shtoolsup >/dev/null 2>&1;
}

# === Advanced Development Shell Tools News ===
function shtoolsnews()
{
  # Usage: shtoolsnews [since_days] (Display the project news notifications)

  # Variables
  local commits_local_count;
  local commits_remote_count;
  local currentdir=${PWD};
  local line;
  local line_topic;
  local since_days=${1};
  local since_tag;
  local timestamp_current;
  local timestamp_last;

  # Direct call output
  if [ -z "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_INSTANTIATION}" ]; then
    if [ -z "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_SYNC}" ]; then
      echo '';
    fi;

  # Ignore automated news based on timestamp
  else

    # Validate timestamp from configuration
    timestamp_current=$(date +%Y-%m-%d);
    timestamp_last=$(grep '^# News timestamp: ' "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_CONFIGURATION}");
    if [ -z "${timestamp_last}" ]; then
      echo "# News timestamp: ${timestamp_current}" >> "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_CONFIGURATION}";
    elif echo "${timestamp_last}" | grep -q "${timestamp_current}"; then
      return;
    fi;

    # Update new timestamp configuration
    sed -i "s/\(# News timestamp: \).*/\1${timestamp_current}/g" "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_CONFIGURATION}";
  fi;

  # Access Advanced Development Shell Tools folder
  cd "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_DIR}/";

  # Fetch remote project and ignore if unavailable
  echo -en ' \e[1;33mshtoolsnews: \e[1;33mChecking remote upgrades...\e[0m';
  if ! git fetch --quiet origin "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_BRANCH}" >/dev/null 2>&1; then
    echo -en '\r\033[K \e[1;33mshtoolsnews: \e[1;31mInternet access not available...\e[0m';
    if [ -z "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_INSTANTIATION}" ]; then
      echo '';
    else
      sleep 1;
    fi;
    echo -en "\r\033[K";
    cd "${currentdir}/";
    return;
  fi;

  # Acquire reference tag
  if [ -z "${since_days}" ]; then
    since_tag=FETCH_HEAD;
  else
    since_tag=$(git rev-list FETCH_HEAD --since "${since_days} days ago" | tail -n 1);
  fi;

  # Ignore if unchanged
  if git diff --quiet HEAD "${since_tag}" \
      && git diff-index --quiet HEAD; then
    echo -en "\r\033[K";
    cd "${currentdir}/";
    return;
  fi;
  echo -en "\r\033[K";

  # Enable UI wrapper
  if [ -z "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_SYNC}" ]; then
    __shtoolsui 'enable';
    __shtoolsui 'start';
  fi;

  # Header
  echo '';
  echo -e ' \e[1;33m===[ advanced_development_shell_tools by AdrianDC ]===';
  echo '';

  # Present local diffs
  if ! git diff-index --quiet HEAD; then
    echo -e " \e[1;33mshtoolsnews: \e[1;37mLocal differences detected";
    echo '';
    git diff --stat HEAD 2>/dev/null | cat;
    echo '';
  fi;

  # Acquire commits counts
  commits_local_count=$(git rev-list --left-right HEAD...FETCH_HEAD | grep -c '^<');
  if [ -z "${since_days}" ]; then
    commits_remote_count=$(git rev-list --left-right HEAD...FETCH_HEAD | grep -c '^>');
  else
    commits_remote_count=$(git rev-list --left-right "${since_tag}"...FETCH_HEAD | grep -c '^>');
  fi;

  # Present local commits
  if [ "${commits_local_count}" -ne 0 ]; then
    echo -e " \e[1;33mshtoolsnews: \e[1;37m${commits_local_count} local commits missing";
    echo '';

    # Present local commits log
    echo -e '  \e[1;37m                     Functions \e[1;33m# \e[1;37m Details';
    echo -e '  \e[1;37m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \e[1;33m# \e[1;37m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~';
    while read -r line; do
      line=${line#* };
      line_topic=${line%%:*};
      line=${line#*:};
      printf "  \e[1;32m%30s \e[1;33m#\e[1;37m%s\n" "${line_topic}" "${line}";
    done < <(git log --abbrev-commit --pretty=oneline -n "${commits_local_count}" HEAD);
    echo '';
  fi;

  # Present remote commits
  if [ "${commits_remote_count}" -ne 0 ]; then
    if [ -z "${since_days}" ]; then
      echo -e " \e[1;33mshtoolsnews: \e[1;37m${commits_remote_count} new commits available upstream";
    else
      echo -e " \e[1;33mshtoolsnews: \e[1;37m${commits_remote_count} commits published upstream since ${since_days} days";
    fi;
    echo '';

    # Present remote commits log
    echo -e '  \e[1;37m                     Functions \e[1;33m# \e[1;37m Details';
    echo -e '  \e[1;37m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \e[1;33m# \e[1;37m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~';
    while read -r line; do
      line=${line#* };
      line_topic=${line%%:*};
      line=${line#*:};
      printf "  \e[1;32m%30s \e[1;33m#\e[1;37m%s\n" "${line_topic}" "${line}";
    done < <(git log --abbrev-commit --pretty=oneline -n "${commits_remote_count}" FETCH_HEAD);

    # Present upgrade hint
    if [ -z "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_SYNC}" ]; then
      echo '';
      echo -e ' \e[1;33m> \e[1;37mUse \e[1;32mshtoolssync\e[1;37m to upgrade the local project';
    fi;
    echo '';
  fi;

  # Ignore input during project sync
  if [ ! -z "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_SYNC}" ]; then
    sleep 1;

  # Delay input on automatic notifications
  elif [ ! -z "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_INSTANTIATION}" ]; then
    echo -en '\r\033[K \e[1;37m> Resuming input in 3 seconds...';
    sleep 3;
    echo -en '\r\033[K';

  # Block input on manual launch
  else
    echo -en '\r\033[K \e[1;37m> Resume... [ENTER]';
    __shtoolsui 'input';
  fi;

  # Disable UI wrapper
  if [ -z "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_SYNC}" ]; then
    __shtoolsui 'disable';
  fi;

  # Restore current path
  cd "${currentdir}/";
}
