#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === Standalone Source Helper ===
# source <(curl -Ls https://github.com/AdrianDC/android_development_shell_tools/raw/master/android_kernel_builders.rc)

# === Kernel Builder ===
function makekernel()
{
  # Out path handling
  if [ ! -d ./.build ]; then
    mkdir ./.build;
  fi;

  # Mode: make clean / make mrproper
  if [ "${1}" = 'clean' ] || [ "${1}" = 'mrproper' ]; then

    # Launch make mode
    make "${1}" O=./.build;
    return;
  fi;
  echo '*' > ./out/.gitignore

  # Environment
  if [ -z "${DEFCONFIG_NAME}" ] || [ ! -z "${1}" ]; then

    # Usage
    if [ -z "${1}" ] || ! ls arch/arm*/configs/*${1}*_defconfig 1> /dev/null 2>&1; then
      echo '';
      echo ' Usage: makekernel [platform_device_to_init / clean / mrproper] [make_parameters] (Kernel inline compiler)';
      echo '   Details: The kernel needs to be under an Android build tree to select toolchains'
      echo '';
      return;
    fi;

    # Kernel defconfig
    kerneldefconfig "${1}";

    # Kernel toolchains selection
    kerneltoolchains;

    # Kernel configuration
    make ${DEFCONFIG_NAME} O=./.build;
  fi;

  # Variables
  local time_diff;
  local make_parameters="${@:2}";

  # Kernel build
  time_diff=$(date +%s);
  make -j$(grep -c ^processor /proc/cpuinfo) ${make_parameters} O=./.build;

  # Show compilation time
  time_diff=$(($(date +%s)-${time_diff}));
  echo '';
  echo -e " \e[1;37m[ Done compiling in ${time_diff} secs ]\e[0m";
  echo '';
}

# === Kernel Defconfig Selection ===
function kerneldefconfig()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: kerneldefconfig [platform_device] (Select defconfig easily)';
    echo '';
    return;
  fi;

  # Detect arm / arm64
  export ARCH=arm;
  local DEFCONFIG_CHECKS;
  for arch_check in arm arm64; do
    DEFCONFIG_CHECKS=("./arch/${arch_check}/configs/"*"${1}"*);
    if [ ${#DEFCONFIG_CHECKS[@]} -eq 1 ] && [ -f "${DEFCONFIG_CHECKS}" ]; then
      export ARCH=${arch_check};
      break;
    fi;
  done;

  # Defconfig detection
  local DEFCONFIG_PATH=./arch/${ARCH}/configs;
  local DEFCONFIG_INPUT=("${DEFCONFIG_PATH}/"*"${1}"*);
  if [ ${#DEFCONFIG_INPUT[@]} -ne 1 ] || [ ! -f "${DEFCONFIG_INPUT}" ]; then
    if [ ${#DEFCONFIG_INPUT[@]} -eq 1 ]; then
      echo '';
      echo '  Error: makedefconf found no defconfigs';
      echo '';
      return;
    fi;

    # Create defconfig selector list
    local cnt=0;
    echo '';
    echo '  Warning: makedefconf found '${#DEFCONFIG_INPUT[@]}' defconfigs';
    echo '';
    for defconfig_path in ${DEFCONFIG_INPUT[@]}; do
      cnt=$((${cnt} + 1));
      echo "   ${cnt}: ${defconfig_path}";
    done;
    echo '';
    printf "  Defconfig to use [1 to ${cnt}] : ";
    read key;
    key=$((${key} - 1));
    if [ ${key} -ge 0 ] && [ ${key} -lt ${cnt} ]; then
      DEFCONFIG_INPUT=${DEFCONFIG_INPUT[${key}]};
    else
      DEFCONFIG_INPUT='';
    fi;

    # Validate user choice
    if [ ! -f "${DEFCONFIG_INPUT}" ]; then
      echo '';
      echo '  Error: makedefconf found no defconfigs';
      echo '';
      return;
    fi;
  fi;

  # Kernel defconfig
  export DEFCONFIG_NAME=$(basename "${DEFCONFIG_INPUT}");
}

# === Kernel Toolchains Selection ===
function kerneltoolchains()
{
  # Usage
  if [ -z "${ARCH}" ]; then
    echo '';
    echo ' Usage: kerneltoolchains (Select toolchains based on ARCH in Android build tree)';
    echo '';
    return;
  fi;

  # Architecture environment
  local cross_compiler=;
  local dir_cross_compiler='../../../prebuilts/gcc/linux-x86';
  echo '';

  # CCache environment
  local ccache=;
  if [ ! -z "${USE_CCACHE}" ] && [ ${USE_CCACHE} -eq 1 ]; then
    ccache=$(which ccache);
  fi;

  # Architecture ARM-64
  if [ "${ARCH}" = 'arm64' ]; then
    cross_compiler=$(readlink -f ${dir_cross_compiler}/aarch64/aarch64-linux-android-4.9/bin);
    if [ ! -z "${cross_compiler}" ]; then
      echo '  makekernel: Using Android 4.9 toolchain';
    else
      cross_compiler=$(readlink -f ${dir_cross_compiler}/aarch64/aarch64-linux-android-4.8/bin);
      if [ ! -z "${cross_compiler}" ]; then
        echo '  makekernel: Falling back to Android 4.8 toolchain';
      fi;
    fi;

    # Failed Cross-Compiler search
    if [ -z "${cross_compiler}" ]; then
      echo '  makekernel: No cross compiler found!';
      echo '';
      return;
    fi;

    # Cross-Compiler environment variable
    export CROSS_COMPILE="${ccache} aarch64-linux-android-";

  # Architecture ARM-32
  else
    cross_compiler=$(readlink -f ${dir_cross_compiler}/arm/arm-linux-androideabi-4.9/bin);
    if [ ! -z "${cross_compiler}" ]; then
      echo '  makekernel: Using Android 4.9 toolchain';
    else
      cross_compiler=$(readlink -f ${dir_cross_compiler}/arm/arm-linux-androideabi-4.8/bin);
      if [ ! -z "${cross_compiler}" ]; then
        echo '  makekernel: Falling back to Android 4.8 toolchain';
      else
        cross_compiler=$(readlink -f ${dir_cross_compiler}/arm/arm-eabi-4.8/bin);
        if [ ! -z "${cross_compiler}" ]; then
          echo '  makekernel: Falling back to GCC 4.8 toolchain';
        else
          cross_compiler=$(readlink -f ${dir_cross_compiler}/arm/arm-linux-androideabi-4.7/bin);
          if [ ! -z "${cross_compiler}" ]; then
            echo '  makekernel: Falling back to Android 4.7 toolchain';
          else
            cross_compiler=$(readlink -f ${dir_cross_compiler}/arm/arm-eabi-4.7/bin);
            if [ ! -z "${cross_compiler}" ]; then
              echo '  makekernel: Falling back to GCC 4.7 toolchain';
            fi;
          fi;
        fi;
      fi;
    fi;

    # Failed Cross-Compiler search
    if [ -z "${cross_compiler}" ]; then
      echo '  makekernel: No cross compiler found!';
      echo '';
      return;
    fi;

    # Cross-Compiler environment variable
    if [[ ${cross_compiler} =~ 'arm-linux-androideabi-' ]]; then
      export CROSS_COMPILE="${ccache} arm-linux-androideabi-";
    else
      export CROSS_COMPILE="${ccache} arm-eabi-";
    fi;
  fi;
  echo '';

  # Path environment variable
  if [[ ! "${PATH}" =~ "${cross_compiler}" ]]; then
    export PATH=${cross_compiler}:${PATH};
  fi;
}
