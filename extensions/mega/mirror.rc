#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Mega Mirror ===
function megamirror()
{
  # Usage
  if [ -z "${1}" ] || [ -z "${2}" ] || [ -z "${3}" ]; then
    echo '';
    echo ' Usage: megamirror <local_folder> <remote_folder> <--upload/--download> [--copy,-y/-n] (MEGA mirror syncer)';
    echo '';
    echo '  > Upload with --upload (individual), optional --copy (mega-sync)';
    echo '  > Download with --download (individual), optional --copy (mega-sync)';
    echo '';
    return;
  fi;

  # Verify megacmd is installed
  if ! type mega-ls >/dev/null 2>&1; then
    echo '';
    echo -e ' \e[1;33mmega-cmd:\e[0m Please install megacmd before using tools like "mega-ls"';
    echo '';
    return;
  fi;

  # =======================================================
  # Reload mega.nz account
  meganzreload true;

  # Ignore missing credentials
  if ! mega-ls >/dev/null; then
    return;
  fi;

  # Variables
  local local_folder=${1};
  local remote_folder=${2%/};
  local option_direction=${3};
  local option_params=${4};
  local tmp_local_ls;
  local tmp_remote_ls;
  local flag_delete;
  local key;
  local key_override;
  local line;
  local line_tmp;
  local file_details;
  local file_path;
  local file_local;
  local file_escaped;
  local file_local_output;
  local file_local_size;
  local time_start;
  local time_span;

  # Initialize variables
  tmp_local_ls=$(mktemp);
  tmp_remote_ls=$(mktemp);

  # =======================================================
  # Parameters input
  if [[ "${option_params}" == *'-y'* ]]; then
    key_override=true;
    key=y;
  elif [[ "${option_params}" == *'-n'* ]]; then
    key_override=true;
    key=n;
  else
    key_override=;
  fi;

  # =======================================================
  # Introduction message
  echo -e " \e[1;33mmegamirror:\e[1;37m Syncing '${local_folder}' and '${remote_folder}'...\e[0m";

  # Retrieve files informations
  find "${local_folder}" -mindepth 1 -printf '%s\t%P#\n' > "${tmp_local_ls}";
  mega-find -l "${remote_folder}" > "${tmp_remote_ls}";

  # =======================================================
  # Upload mode
  if [ ! "${option_direction}" = '--download' ]; then

    # Parse all remote files
    while [ -s "${tmp_remote_ls}" ]; do

      # Extract first line
      IFS='()' read -r -a line <<< "$(sed '1!d' "${tmp_remote_ls}")";
      sed -i '1d' "${tmp_remote_ls}";

      # Ignore empty lines
      if [ -z "${line[*]}" ]; then
        continue;
      fi;

      # Parse line content
      file_details=${line[1]%,*};
      file_size=${file_details};
      file_path=${line[0]% };
      file_local=${file_path#${remote_folder}};
      file_local=${file_local#/};
      file_local_output=${file_local//\\/\\\\};
      file_escaped=${file_local_output//\|/\\\|};
      file_escaped=${file_escaped//\[/\\\[};
      file_escaped=${file_escaped//\]/\\\]};
      flag_delete=;

      # Ignore irrelevant paths
      if [ "${file_path}" = "${remote_folder}" ]; then
        continue;
      fi;

      # Verify folder exists
      if [ "${file_details}" = 'folder' ]; then
        if [ ! -d "${file_local}" ]; then
          echo -en " \e[1;33mmegamirror:\e[1;31m Remote folder '${file_local_output}/' is missing:\e[0m";
          flag_delete=true;

        # Exclude folder from needed uploads
        else
          sed -i "\|\t${file_escaped}#|d" "${tmp_local_ls}";
        fi;

      # Verify files sizes do not mismatch
      elif [ -f "${file_local}" ]; then
        file_local_size=$(stat -c "%s" "${file_local}" \
                        | awk '{ split( "B KB MB GB" , v ); s=1; while( $1>2048 ){ $1/=1024; s++ } printf "%0.2f %s\n", $1, v[s] }');
        if [ ! "${file_size}" = "${file_local_size}" ]; then
          echo -en " \e[1;33mmegamirror:\e[1;31m Remote file '${file_local_output}' is different (${file_size} != ${file_local_size}):\e[0m";
          flag_delete=true;

        # Exclude file from needed uploads
        else
          sed -i "\|\t${file_escaped}#|d" "${tmp_local_ls}";
        fi;

      # Remote file no longer exist locally
      else
        echo -en " \e[1;33mmegamirror:\e[1;31m Remote file '${file_local_output}' locally removed:\e[0m";
        flag_delete=true;
      fi;

      # Delete remote file
      if [ ! -z "${flag_delete}" ]; then
        echo -n ' Delete remote [y/N/a] ? ';
        if [ -z "${key_override}" ]; then
          if ! read -r -t 20 key; then
            echo '';
          elif [ "${key}" = 'A' ] || [ "${key}" = 'a' ]; then
            key_override='y';
            key='y';
          fi;
        else
          echo "${key_override}";
        fi;
        if [ "${key}" = 'Y' ] || [ "${key}" = 'y' ]; then
          mega-rm "${file_path}";
          echo -e " \e[1;33mmegamirror:\e[1;32m Removed remote '${file_path}'\e[0m";

          # Remove folder elements
          if [ "${file_details}" = 'folder' ]; then
            sed -i "\|${file_escaped}|d" "${tmp_remote_ls}";
          fi;
        fi;
      fi;

    done;

    # ===========================================
    # Upload with mega-sync to remote
    if [[ "${option_params}" == *'--copy'* ]]; then
      echo -e " \e[1;33mmegamirror:\e[1;37m mega-sync starting...\e[0m";
      # TODO: Validate and reenable
      #mega-sync "${local_folder}" "${remote_folder}" 2>&1 \
      #    | grep -v 'ERROR: File already exists at';

    # Upload with megaput to remote
    else

      # Check all files listed for upload
      while [ -s "${tmp_local_ls}" ]; do
        IFS=$'\t' read -r -a line <<< "$(sed '1!d' "${tmp_local_ls}")";
        sed -i '1d' "${tmp_local_ls}";

        # Parse file informations
        file_local=${line[*]:1};
        file_local=${file_local#/};
        file_local=${file_local%#};
        file_path=${remote_folder}/${file_local};
        time_start=$(date +%s);

        # Create remote folder
        if [ -d "${file_local}" ]; then
          mega-mkdir "${file_path}";
          echo -e " \e[1;33mmegamirror:\e[1;37m Created remote folder '${file_path}/'\e[0m";

        # Upload file to target
        else
          file_path=$(dirname "${file_path}");
          echo -e " \e[1;33mmegamirror:\e[1;37m Uploading to the server - Path '${file_local}'\e[0m";
          mega-mkdir "${file_path}" 2>&1 \
              | grep -v 'Folder already exists:';
          mega-put "${file_local}" "${file_path}";

          # Show upload time
          time_span=$(($(date +%s) - time_start));
          echo -e " \e[1;33mmegamirror:\e[1;32m Upload done in ${time_span} secs\e[0m";

        fi;
      done;
    fi;

  # =======================================================
  # Download mode
  else

    # Parse all local files
    while [ -s "${tmp_local_ls}" ]; do

      # Extract first line
      IFS=$'\t' read -r -a line <<< "$(sed '1!d' "${tmp_local_ls}")";
      sed -i '1d' "${tmp_local_ls}";

      # Ignore empty lines
      if [ -z "${line[*]}" ]; then
        continue;
      fi;

      # Parse line content
      file_size=${line[0]};
      file_path=${line[*]:1};
      file_path=${file_path%#};
      file_local=${file_path#${local_folder}};
      file_local=${file_local#/};
      file_local_output=${file_local//\\/\\\\};
      file_escaped=${file_path//\\/\\\\};
      file_escaped=${file_escaped//\|/\\\|};
      file_escaped=${file_escaped//\[/\\\[};
      file_escaped=${file_escaped//\]/\\\]};
      flag_delete=;

      # Ignore irrelevant paths
      if [ "${file_path}" = '' ] || [ ! -e "${file_path}" ]; then
        continue;
      fi;

      # Extract remote information
      file_details='';
      if [ -d "${file_path}" ]; then
        file_details='folder';
      fi;
      IFS='()' read -r -a line_tmp <<< "$(grep --color=never "${remote_folder}/${file_escaped//\\\|/\|} (${file_details}" "${tmp_remote_ls}")";

      # Verify folder exists
      if [ -d "${file_path}" ]; then
        if [ -z "${line_tmp[1]%,*}" ]; then
          echo -en " \e[1;33mmegamirror:\e[1;31m Remote folder '${file_local_output}/' is missing:\e[0m";
          flag_delete=true;

        # Exclude folder from needed downloads
        else
          sed -i "\|${remote_folder}/${file_escaped} (|d" "${tmp_remote_ls}";
        fi;

      # Verify files sizes do not mismatch
      elif [ ! -z "${line_tmp[*]}" ]; then
        file_size=$(echo "${file_size}" \
                  | awk '{ split( "B KB MB GB" , v ); s=1; while( $1>2048 ){ $1/=1024; s++ } printf "%0.2f %s\n", $1, v[s] }');
        if [ ! "${file_size}" = "${line_tmp[1]%,*}" ]; then
          echo -en " \e[1;33mmegamirror:\e[1;31m Local file '${file_local_output}' is different (${file_size} != ${line_tmp[1]%,*}):\e[0m";
          flag_delete=true;

        # Exclude file from needed downloads
        else
          sed -i "\|${remote_folder}/${file_escaped} (|d" "${tmp_remote_ls}";
        fi;

      # Local file no longer exist remotely
      else
        echo -en " \e[1;33mmegamirror:\e[1;31m Local file '${file_local_output}' remotely removed:\e[0m";
        flag_delete=true;
      fi;

      # Delete local file
      if [ ! -z "${flag_delete}" ]; then
        echo -n ' Delete local [y/N/a] ? ';
        if [ -z "${key_override}" ]; then
          if ! read -r -t 20 key; then
            echo '';
          elif [ "${key}" = 'A' ] || [ "${key}" = 'a' ]; then
            key_override='y';
            key='y';
          fi;
        else
          echo "${key_override}";
        fi;
        if [ "${key}" = 'Y' ] || [ "${key}" = 'y' ]; then
          rm -r "${file_path}";
          echo -e " \e[1;33mmegamirror:\e[1;32m Removed local '${file_path}'\e[0m";
        fi;
      fi;

    done;

    # ===========================================
    # Download with mega-sync to local
    if [[ "${option_params}" == *'--copy'* ]]; then
      echo -e " \e[1;33mmegamirror:\e[1;37m megacopy starting...\e[0m";
      # TODO: Validate and reenable
      #mega-sync "${local_folder}" "${remote_folder}" --download 2>&1 \
      #    | grep -v 'ERROR: File already exists at';

    # Download with mega-get to local
    else

      # Check all files listed for download
      while [ -s "${tmp_remote_ls}" ]; do
        IFS='()' read -r -a line <<< "$(sed '1!d' "${tmp_remote_ls}")";
        sed -i '1d' "${tmp_remote_ls}";

        # Parse file informations
        file_details=${line[1]%,*};
        file_path=${line[0]% };
        file_local=${file_path#${remote_folder}};
        file_local=${file_local#/};
        file_escaped=${file_local//\|/\\\|};
        file_escaped=${file_escaped//\[/\\\[};
        file_escaped=${file_escaped//\]/\\\]};
        time_start=$(date +%s);

        # Ignore irrelevant paths
        if [ -z "${file_local}" ]; then
          continue;
        fi;

        # Create local folder
        if [ "${file_details}" = 'folder' ]; then
          if [ ! -d "${file_local}" ]; then
            mkdir -p "${file_local}";
            echo -e " \e[1;33mmegamirror:\e[1;37m Created local folder '${file_local}/'\e[0m";
          fi;

        # Download file
        else

          # Download header informations
          file_local=$(dirname "${file_local}");
          echo -e " \e[1;33mmegamirror:\e[1;37m Downloading from the server - Path '${file_path}'\e[0m";

          # Download file to local
          mkdir -p "${file_local}";
          mega-get "${file_path}" "${file_local}";

          # Show download time
          time_span=$(($(date +%s) - time_start));
          echo -e " \e[1;33mmegamirror:\e[1;32m Download done in ${time_span} secs\e[0m";

        fi;
      done;
    fi;
  fi;

  # =======================================================
  # End message
  echo -e " \e[1;33mmegamirror:\e[1;32m Synced '${local_folder}' and '${remote_folder}'\e[0m";

  # Cleanup temp files
  rm "${tmp_local_ls}";
  rm "${tmp_remote_ls}";

  # =======================================================
  # Reload mega.nz account
  meganzreload;
}
