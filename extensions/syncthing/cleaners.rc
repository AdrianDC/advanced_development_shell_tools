#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === SyncThing Untracked Paths From Git ===
function stignorefromgit()
{
  # Usage: stignorefromgit [bool_dry_run] (Rebuild SyncThing .stignore* from .gitignore)

  # Variables
  local dry_run="${1}";
  local gitignore_file;
  local gitignore_line;
  local gitignore_path;
  local gitignore_prefix;
  local gitignore_unique;
  local stignore;
  local tmp_list;

  # Detect .stignore path
  if [ -f ./.stignored ]; then
    stignore=./.stignored;
  elif grep '#include .stignored' ./.stignore; then
    echo '';
    echo -e ' \e[1;33mstignorefromgit: \e[1;37mSyncThing .stignored initialized...\e[0m';
    echo '';
    echo -n '' > ./.stignored;
    stignore=./.stignored;
  elif [ -f ./.stignore ]; then
    stignore=./.stignore;
  else
    echo '';
    echo -e ' \e[1;31mstignorefromgit: \e[1;37mSyncThing .stignore* file not found...\e[0m';
    echo '';
    return;
  fi;

  # Reset .stignore file
  echo -n '' > "${stignore}.tmp";

  # Preserve .git folders
  echo '!.git' >> "${stignore}.tmp";
  echo '!**/.git' >> "${stignore}.tmp";

  # Travel through .gitignore paths
  tmp_list=$(mktemp);
  LC_ALL=C find ./ -name .gitignore | sort > "${tmp_list}";
  while read -r gitignore_file; do

    # Acquire folder path
    gitignore_path="${gitignore_file#./}";
    gitignore_path="${gitignore_path%/*}";
    if [ ! -z "${gitignore_path}" ]; then
      gitignore_path="${gitignore_path}/";
    fi;

    # Read .gitignore files
    while read -r gitignore_line; do

      # Detect root lines
      if [ "${gitignore_line:0:1}" = '/' ]; then
        gitignore_line="${gitignore_line#/}";
        gitignore_unique='true';
      else
        gitignore_unique='';
      fi;

      # Detect negated lines
      if [ "${gitignore_line:0:1}" = '!' ]; then
        gitignore_line="${gitignore_line#!}"
        gitignore_prefix='!';
        gitignore_unique='true';
      else
        gitignore_prefix='';
      fi;

      # Adapt folder inclusions to .stignore
      if [ "${gitignore_line: -1}" = '/' ]; then
        gitignore_line="${gitignore_line%/}";
      fi;

      # Ignore empty or commented lines
      if [ -z "${gitignore_line}" ] || [ "${gitignore_line:0:1}" = '#' ]; then
        continue;
      fi;

      # Adapt line contents to .stignore
      gitignore_line="${gitignore_line//\\#/#}";

      # Detect unique paths
      if [ -d "${gitignore_path}${gitignore_line}" ] ||
          [ -f "${gitignore_path}${gitignore_line}" ] ||
          [[ "${gitignore_line}" = *'/'* ]] ||
          [[ ! "${gitignore_line}" = *'/'* && ! "${gitignore_line:0:1}" = '.' && "${gitignore_line: -2}" = '.*' ]]; then
        gitignore_unique='true';
      fi;

      # Append to .stignore
      echo "${gitignore_prefix}${gitignore_path}${gitignore_line}" >> "${stignore}.tmp";
      if [ -z "${gitignore_unique}" ]; then
        echo "${gitignore_prefix}${gitignore_path}**/${gitignore_line}" >> "${stignore}.tmp";
      fi;

    done < "${gitignore_file}";
  done < "${tmp_list}";

  # Detect differences
  if ! cmp -s "${stignore}" "${stignore}.tmp"; then

    # Present differences
    # Credits: Colorized diff output (https://stackoverflow.com/questions/8800578/how-to-colorize-diff-on-the-command-line/16865578#16865578)
    echo '';
    echo -e ' \e[1;33mstignorefromgit:\e[1;37m Differences detected with the previous version...\e[0m';
    echo '';
    sleep 1;
    diff -U3 --minimal "${stignore}" "${stignore}.tmp" \
        | sed 's/^-/\x1b[1;31m-/;s/^+/\x1b[1;32m+/;s/^@/\x1b[1;34m@/;s/$/\x1b[0m/' \
        | less -r;

    # Update .stignore file
    if [ -z "${dry_run}" ]; then
      rm -f "${stignore}";
      mv "${stignore}.tmp" "${stignore}";

    # Dry run
    else
      rm -f "${stignore}.tmp";
    fi;

  # Remove temporary
  else
    rm -f "${stignore}.tmp";
  fi;
}

# === SyncThing Untracked Paths Cleaner ===
function stignoreclean()
{
  # Usage: stignoreclean [bool_dry_run] (Cleanup untracked paths from SyncThing .stignore*)

  # Variables
  local dry_run=${1};
  local ignored_found;
  local ignored_path;
  local ignored_paths;
  local tmp_list;
  local tmp_negative;

  # Acquire .stignore paths
  tmp_list=$(mktemp);
  grep -hv '^!' .stignore* 2>/dev/null > "${tmp_list}";

  # Build negative paths
  tmp_negative='';
  while read -r ignored_paths; do
    ignored_paths="${ignored_paths#!}";
    if [ ! -z "${tmp_negative}" ]; then
      tmp_negative="${tmp_negative}\|";
    fi;
    tmp_negative="${tmp_negative}$ignored_paths";
  done < <(grep -h '^!' .stignore* 2>/dev/null);

  # Travel through .stignored paths
  while read -r ignored_paths; do

    # Ignore macros
    if [ "${ignored_paths:0:1}" = '#' ]; then
      continue;
    fi;

    # Expand paths
    for ignored_path in ${ignored_paths}; do

      # Remove folders contents
      if [ -d "${ignored_path}" ]; then
        if [ ! -z "$(ls -A "${ignored_path}")" ]; then
          echo '';
          echo -e " \e[1;33mstignoreclean: \e[1;37mRemoving folder contents '${ignored_path}'\e[0m";
          while read -r ignored_found; do

            # Preserve negative ignores
            if [ ! -z "${tmp_negative}" ] && echo "${ignored_found}" | grep -q "${tmp_negative}"; then
              echo -e "                \e[1;32mPreserving '${ignored_found}'\e[0m";
              continue;
            fi;

            # Remove found ignored files
            if [ -z "${dry_run}" ]; then
              rm -rf "${ignored_found}";
            fi;

          done < <(find "${ignored_path}/" -mindepth 1);
        fi;

      # Remove files
      elif [ -f "${ignored_path}" ]; then

        # Preserve negative ignores
        if [ ! -z "${tmp_negative}" ] && echo "${ignored_path}" | grep -q "${tmp_negative}"; then
          echo '';
          echo -e " \e[1;33mstignoreclean: \e[1;32mPreserving '${ignored_path}'\e[0m";
          continue;
        fi;

        # Preserve negative ignores
        echo '';
        echo -e " \e[1;33mstignoreclean: \e[1;37mRemoving file '${ignored_path}'\e[0m";
        if [ -z "${dry_run}" ]; then
          rm -f "${ignored_path}";
        fi;

      fi;
    done;

  done < "${tmp_list}";

  # Cleanup
  echo '';
  rm -f "${tmp_list}";
}

# === SyncThing Untracked Paths Checked ===
function stignorecheck()
{
  # Usage: stignorecheck (Check untracked paths from SyncThing .stignore*)

  # Check untracked paths from SyncThing .stignore*
  stignoreclean --dry-run;
}
