#!/bin/bash
#
# Copyright 2015-2017 Adrian DC
# Copyright 2017 Caio99BR
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === ADB DualBootPatcher Selector ===
function adbdbpselect()
{
  # Usage
  if [[ "${*}" == *'-h'* ]]; then
    echo '';
    echo '  Usage: adbdbpselect [all,list,name] (Select DualBootPatcher installation)';
    echo '';
    return;
  fi;

  # Variables
  local adb=$(adbcmd);
  local cnt;
  local enforced;
  local hide;
  local key;
  local name=('');
  local params=${*};
  local roms=('');
  local roms_cnt;
  local slot;

  # Convert space to commas
  params=${params// /,};

  # Give adb root permissions
  #   BUG: adbsu[r] is getting more time than expected, wait for future updates
  adbwait;
  adbro;

  # Check if MultiBoot is installed
  if [ -z "$(${adb} shell 'ls /sdcard/MultiBoot/ 2> /dev/null')" ]; then
    echo '';
    echo '  adbdbpselect: MultiBoot installation folder not found!';
    echo '                Check it via app!';
    echo '';
    return;
  fi;

  # Show hide images
  if [[ "${params}" == *'all'* ]]; then
    hide='do-not-hide-anything-please'
  else
    hide='before-ramdisk-update';
  fi

  # Prepare selinux access
  enforced=$(${adb} shell getenforce);
  if [ "${enforced}" = 'Enforcing' ]; then
    ${adb} shell 'setenforce 0';
  fi;

  # List all DualBootPatcher installations
  roms=($(${adb} shell 'find /sdcard/MultiBoot/* -maxdepth 1 2> /dev/null' \
          | grep 'boot.img' \
          | grep -v "${hide}" \
          | tr -d '\r'));

  # Get current slot ID
  slot=$(${adb} shell 'getprop ro.multiboot.romid' | tr -d '\r');

  # Restore selinux access
  if [ "${enforced}" = 'Enforcing' ]; then
    ${adb} shell 'setenforce 1';
  fi;

  # Store number of ROMs
  roms_cnt=${#roms[@]};

  # Check if a MultiBoot install is on device
  if [ "${roms_cnt}" = '0' ]; then
    echo '';
    echo '  adbdbpselect: No MultiBoot installation found!';
    echo '                Check it via app!';
    echo '';
    return;
  fi;

  # Build ROMs list
  cnt=-1;
  echo '';
  echo -e " \e[1;37m[ DualBootPatcher installations ]\e[0m ";
  echo '';
  until [ "${cnt}" = "$((roms_cnt - 1))" ]; do
    cnt=$((cnt + 1));

    # Get name of ROM
    name[${cnt}]=${roms[${cnt}]#/sdcard/MultiBoot/};
    name[${cnt}]=${name[${cnt}]%/boot.img*};

    # Show current name and path
    echo -n "   ${cnt}: ${name[${cnt}]^} [${roms[${cnt}]}] ";
    if [ "${slot}" = "${name[${cnt}]}" ]; then
      echo -ne '\e[1;33m(current)\e[0m ';
    fi;
    echo '';
  done;

  # Select ROM
  if [[ "${params}" != *'list'* ]]; then
    echo '';
    echo -en " \e[1;33mSelect ROM to use [0 to ${cnt}] :\e[0m ";
    read -r key;
    echo '';

    # Return selected ROM name or path
    if [ "${key}" -ge '0' ] && [ "${key}" -le "${cnt}" ]; then
      if [[ "${params}" == *'name'* ]]; then
        export __ADBDBPSELECT="${name[${key}]}";
        echo "${name[${key}]}" | tr -d '\r';
      else
        export __ADBDBPSELECT="${roms[${key}]}";
        echo "${roms[${key}]}" | tr -d '\r';
      fi;
    else
      echo '' | tr -d '\r';
    fi;
  fi;
}

# === ADB DualBootPatcher AutoBoot ===
function adbdbpautoboot()
{
  # Usage
  if [[ "${*}" == *'-h'* ]]; then
    echo '';
    echo '  Usage: adbdbpautoboot [noreboot] (DualBootPatcher autoboot selection)';
    echo '';
    return;
  fi;

  # Variables
  unset __ADBDBPSELECT;
  local adb=$(adbcmd);
  local romtarget;
  local params=${*};

  # Give adb root permissions
  #   BUG: adbsu[r] is getting more time than expected, wait for future updates
  adbwait;
  adbro;

  # Convert space to commas
  params=${params// /,};

  # Select the ROM desired
  adbdbpselect;
  romtarget=${__ADBDBPSELECT};

  # Check if ROM was selected
  if [ -z "${romtarget}" ]; then
    echo '';
    echo '  adbdbpautoboot: No MultiBoot installation selected!';
    echo '                  Give ROOT permissions to app!';
    echo '';
    return;
  fi;

  # Get device from ... device
  device=$(${adb} shell 'getprop ro.build.product' | tr -d '\r');

  # Fallback to 'androiddevicestarget' way to get boot partition
  partitiontarget=$(androiddevicestarget boot "${device}");

  echo '';
  echo '  adbdbpautoboot:';
  echo "    Flashing from : ${romtarget}";
  echo "               to : ${partitiontarget}";

  # Flash the boot.img of ROM select
  ${adb} shell "dd if=\"${romtarget}\" of=\"${partitiontarget}\"";

  # Don't Reboot to Android if requested
  if [[ "${params}" != *'noreboot'* ]]; then
    adb reboot;
  fi;
  echo '';
}

# === ADB DualBootPatcher AutoBoot ===
function adbdbpupdateboot()
{
  # Usage
  if [[ "${*}" == *'-h'* ]]; then
    echo '';
    echo '  Usage: adbdbpupdateboot [force] (DualBootPatcher update current boot)';
    echo '';
    return;
  fi;

  # Variables
  local adb=$(adbcmd);
  local device;
  local md5sum_partition;
  local md5sum_dbp;
  local slot;
  local params=${*};
  local partitiontarget;

  # Convert space to commas
  params=${params// /,};

  # Give adb root permissions
  #   BUG: adbsu[r] is getting more time than expected, wait for future updates
  adbwait;
  adbro;

  # Get current slot ID
  slot=$(${adb} shell 'getprop ro.multiboot.romid' | tr -d '\r');

  # Check if ROM was found
  if [ -z "${slot}" ]; then
    echo '';
    echo '  adbdbpupdateboot: Slot of current running ROM not found!';
    echo '';
    return;
  fi;

  # Get device from ... device
  device=$(${adb} shell 'getprop ro.build.product' | tr -d '\r');

  # Fallback to 'androiddevicestarget' way to get boot partition
  partitiontarget=$(androiddevicestarget boot "${device}");

  # Get md5sum from boot partition and dbp
  md5sum_partition=$(${adb} shell "md5sum -b ${partitiontarget}");
  md5sum_dbp=$(${adb} shell "md5sum -b /sdcard/MultiBoot/${slot}/boot.img");

  # Check md5sum to prevent useless update
  if [ "${md5sum_partition}" = "${md5sum_dbp}" ] && [[ "${params}" != *'force'* ]]; then
    echo '';
    echo '  adbdbpupdateboot: Current boot is already updated! Skipping...';
    echo "                    Use 'force' to update anyway"
  else
    echo '';
    echo '  adbdbpupdateboot:';
    echo "    Updating from : ${partitiontarget}";
    echo "               to : /sdcard/MultiBoot/${slot}/boot.img";

    ${adb} shell "dd if=\"${partitiontarget}\" of=\"/sdcard/MultiBoot/${slot}/boot.img\"";
  fi;
  echo '';
}
