#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2016
# ======================================

# === ROM Output Cleaner ===
function outdevcl()
{
  # Function usage
  if [ -z "${1}" ]; then
    echo " Usage: outdevcl devicename";
    echo "";
    return;
  fi;

  # Out path
  out_device_path="./out/target/product/${1}";

  # Rebuild the build properties
  if [ -f "${out_device_path}/obj/ETC/system_build_prop_intermediates/build.prop" ]; then
    rm -f "${out_device_path}/obj/ETC/system_build_prop_intermediates/build.prop";
  fi;
  if [ -f "${out_device_path}/ota_temp/RECOVERY/RAMDISK/default.prop" ]; then
    rm -f "${out_device_path}/ota_temp/RECOVERY/RAMDISK/default.prop";
  fi;
  if [ -f "${out_device_path}/recovery/root/default.prop" ]; then
    rm -f "${out_device_path}/recovery/root/default.prop";
  fi;

  # Delete relevant outputs
  rm -rfv "${out_device_path}/"*${1}*".zip";
  rm -rfv "${out_device_path}/"*${1}*".zip.md5sum";
  rm -rfv "${out_device_path}/boot"*;
  rm -rfv "${out_device_path}/combinedroot";
  rm -rfv "${out_device_path}/data";
  rm -rfv "${out_device_path}/install";
  rm -rfv "${out_device_path}/kernel";
  rm -rfv "${out_device_path}/obj/ETC/system_build_prop_intermediates";
  rm -rfv "${out_device_path}/obj/PACKAGING/target_files_intermediates";
  rm -rfv "${out_device_path}/ota_temp/RECOVERY/RAMDISK";
  rm -rfv "${out_device_path}/"*"ota"*".zip";
  rm -rfv "${out_device_path}/recovery";
  rm -rfv "${out_device_path}/root";
  rm -rfv "${out_device_path}/system";
  rm -rfv "${out_device_path}/utilities";
  rm -rfv "${out_device_path}/combined"*;
  rm -rfv "${out_device_path}/ramdisk"*;
  rm -rfv "${out_device_path}/recovery"*;
  rm -rfv "${out_device_path}/system"*;
}

# === ROM Automatic Releaser ===
function romautorelease()
{
  # Function usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: romautorelease devicename {aosp/cm/caf/oms},j1,nowipe/outcl,local/wipeout]';
    echo '';
    return;
  fi;

  # Internal variables
  local cwd=$(pwd);
  local rom_logs="${ANDROID_DEV_DRIVE}/Logs";
  local rom_logs_output;

  # Access ROM root
  repor;

  # ROM variables
  local rom_device="${1}";
  local rom_params="${2}";
  local rom_phone="${rom_device^}";
  local rom_tag;
  local rom_target;
  
  # AOSP 7.1
  if [[ "${rom_params}" =~ 'aosp' ]]; then
    rom_tag='AOSP71';
    rom_target="${rom_phone}/AOSP-7.1";

  # CyanogenMod 14.1
  elif [[ "${rom_params}" =~ 'cm' ]]; then
    rom_tag='CM141';
    rom_target="${rom_phone}/CyanogenMod-14.1";

  # AOSP-CAF 6.0
  elif [[ "${rom_params}" =~ 'caf' ]]; then
    rom_tag='CAF60';
    rom_target="${rom_phone}/AOSP-CAF-6.0";

  # AOSP-OMS 6.0
  elif [[ "${rom_params}" =~ 'oms' ]]; then
    rom_tag='OMS60';
    rom_target="${rom_phone}/AOSP-OMS-6.0";

  # Automatic per-device selection
  else
    echo '';
    echo ' Error: ROM target has not been found...';
    echo ' Usage: romautorelease devicename {aosp/cm/caf/oms},j1,nowipe/outcl,local/wipeout]';
    echo '';
    return;
  fi;

  # Ignore the build
  if [[ "${rom_params}" =~ 'nobuild' ]]; then
    echo ' Cleaning skipped...';

  # Delete the product outputs
  elif [[ "${rom_params}" =~ 'outcl' ]]; then
    rm -rfv './out/target/product';

  # Delete the devices relevant results
  elif [[ ! "${rom_params}" =~ 'nowipe' ]]; then
    outdevcl "${rom_device}";
  fi;

  # CPU handling
  if [[ "${rom_params}" =~ 'j1' ]]; then
    build_cpu_count=1;
  else
    build_cpu_count=$(grep -c ^processor /proc/cpuinfo);
  fi;

  # Compilation logs
  rom_logs_output="${rom_logs}/Build.${rom_device}.${rom_tag}.log";

  # Ignore the build
  if [[ "${rom_params}" =~ 'nobuild' ]]; then
    echo ' Build skipped...';

  # Build Android AOSP
  elif [[ "${rom_tag}" =~ 'AOSP71' ]]; then
    source ./build/envsetup.sh;
    lunch aosp_${rom_device}-userdebug;
    make -j${build_cpu_count} otapackage | tee ${rom_logs_output};

  # Build Android AOSP-CAF
  elif [[ "${rom_tag}" =~ 'CAF' ]]; then
    source ./build/envsetup.sh;
    lunch aosp_${rom_device}-userdebug;
    make -j${build_cpu_count} otapackage | tee ${rom_logs_output};

  # Build Android AOSP-OMS
  elif [[ "${rom_tag}" =~ 'OMS' ]]; then
    source ./build/envsetup.sh;
    lunch aosp_${rom_device}-userdebug;
    make -j${build_cpu_count} bacon | tee ${rom_logs_output};

  # Build Android Sony AOSP
  elif [[ "${rom_tag}" =~ 'SONY' ]]; then
    source ./build/envsetup.sh;
    lunch aosp_${rom_device}-userdebug;
    make -j${build_cpu_count} otapackage | tee ${rom_logs_output};

  # Build Android CyanogenMod
  else
    repos "${rom_device}";
    brunch "${rom_device}" | tee ${rom_logs_output};
  fi;

  # Upload the result and notify
  pushbrom "${rom_device}" "${rom_tag}";
  if [[ ! "${rom_params}" =~ 'local' ]]; then
    gnome-terminal -x bash -c "\
        source $(getbash)/android_bash.rc; \
        devuplrom \"${rom_device}\" \"${rom_target}\"; \
        pushb \"${rom_tag} for ${rom_device} uploaded\"";
  fi;

  # Wipe product output if requested
  if [[ "${rom_params}" =~ 'wipeout' ]]; then
    outdevcl "${rom_device}";
  fi;

  # Restore original path
  cd "${cwd}";
}

# === AOSP Automatic Releaser ===
function aospautorelease()
{
  # AndroidDev
  cdand;

  # Repository sync
  if [ -z "${1}" ]; then
    cdaosp;
    reposy;
  fi;

  # Devices to build
  local devices=${1:-huashan mint hayabusa tsubasa};

  # Walk through devices
  for device in ${devices}; do

    # Device sync
    cdaosp ${device};
    if [ -z "${2}" ]; then
      reposy;
    fi;

    # ROM build and release
    aospnpatcher;
    romautorelease ${device} aosp;

  done;
}

# === CyanogenMod Automatic Releaser ===
function cmautorelease()
{
  # AndroidDev
  cdand;

  # Repository sync
  if [ -z "${1}" ]; then
    cdcm;
    reposy;
  fi;

  # Devices to build
  local devices=${1:-huashan mint hayabusa tsubasa};

  # Walk through devices
  for device in ${devices}; do

    # Device sync
    cdcm ${device};
    if [ -z "${2}" ]; then
      reposy;
    fi;

    # ROM build and release
    cm14patcher;
    romautorelease ${device} cm;

  done;
}

# === MultiROM Automatic Releaser ===
function mromautorelease()
{
  cdand;
  cdmultirom;
  repomrom "huashan";
  for device in mint hayabusa tsubasa; do
    repomrom "${device}" "nosync";
  done;
}

# === TWRP Automatic Releaser ===
function twrpautorelease()
{
  cdand;
  cdtwrp;
  repotwrp "huashan";
  for device in mint hayabusa tsubasa; do
    repotwrp "${device}" "nosync";
  done;
}

# === ROM CAF 8x60 Releaser ===
#function cafautorelease()
#{
#  cdand;
#  cdaospcaf;
#  reposycl;
#  for device in huashan mint hayabusa tsubasa; do
#    romautorelease "$device" caf;
#  done;
#}

# === ROM OMS 8x60 Releaser ===
#function omsautorelease()
#{
#  cdand;
#  cdaospoms;
#  reposycl;
#  for device in huashan mint hayabusa tsubasa; do
#    romautorelease "$device" oms;
#  done;
#}

