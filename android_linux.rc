#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === Clear Screen ===
function cls()
{
  # Usage: cls (Clean terminal screen)

  # Clean terminal screen
  echo -e \\033c;
  clear;
}

# === Clipboard ===
function toclip() { xclip -selection c; }

# === Find Name ===
alias findn='find -name';

# === Folders Syncer ===
function rsynca()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: rsynca <path1> <path2>';
    echo '';
    return;
  fi;

  # Sync execution
  rsync -av --delete "${1}" "${2}";
}
alias pcinfo='inxi -Fxz';

# === Newer Files Finder ===
function findnewer()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: findnewer <20160123>';
    echo '';
    return;
  fi;

  # Search for newer files
  touch -t ${1}0000.01 /tmp/filetimeref;
  find . -type f -newer /tmp/filetimeref -print;
  rm -f /tmp/filetimeref;
}

# === CPIO Extractor ===
function cpioext()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: cpioext <cpio_file_to_extract>';
    echo '';
    return;
  fi;

  # Extract cpio file
  local cwd=$(pwd);
  local file=$(echo "${1}" | sed 's/file:\/\/\(.*\)/\1/');
  local name=$(basename "${file}");
  local outdir=$(mktemp -d);
  cp "${file}" "${outdir}/";
  cd "${outdir}";
  cpio -i -F "${name}";
  xdg-open "${outdir}/";
  cd "${cwd}";
}

# === Video Resizer ===
function videoresize()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: videoresize <video_file>';
    echo '';
    return;
  fi;

  # Show and run command
  local command="mencoder ${1} -vf scale=480 -vf rotate=2 -ovc lavc -oac pcm -lavcopts vcodec=mpeg4:autoaspect -o ${1}.small.mp4";
  echo '';
  echo "${command}";
  echo '';
  ${command};
  echo '';
}

# === Automount Disabler ===
function disableautomount()
{
  # Usage: disableautomount (Linux USB automount disabler)

  # Linux USB automount disabler
  gsettings set org.cinnamon.desktop.media-handling automount-open false
  gsettings set org.cinnamon.desktop.media-handling automount false
  gsettings set org.gnome.desktop.media-handling automount-open false;
  gsettings set org.gnome.desktop.media-handling automount false;
}

# === Diff Binaries ===
function diffbin()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: diffbin <binary_left> <binary_right> [first_n_lines]';
    echo '';
    return;
  fi;

  # Full view
  if [ -z "${3}" ]; then
    diff -sy <(xxd "${1}") <(xxd "${2}") | less | colordiff;

  # Partial view
  else
    diff -sy <(xxd "${1}") <(xxd "${2}") | less | colordiff | head -n ${3};
  fi;
}

# === Network Speed ===
function netspeed()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: netspeed (Display network speeds)';
    echo '';
    return;
  fi;

  # Display network speeds
  echo '';
  dev_eth=$(grep -c eth0 /proc/net/dev);
  dev_wlan=$(grep -c wlan0 /proc/net/dev);
  tput sc;

  while [ ${dev_eth} -ne 0 ] || [ ${dev_wlan} -ne 0 ]; do
    if [ ${dev_eth} -ne 0 ]; then
      vals_eth=$(awk '{if(l1){print ($2-l1)/1024"kB/s",($10-l2)/1024"kB/s"} else{l1=$2; l2=$10;}}' \
               <(grep eth0 /proc/net/dev) \
               <(sleep 1; grep eth0 /proc/net/dev));
    else
      vals_eth='';
    fi;
    if [ ${dev_wlan} -ne 0 ]; then
      vals_wlan=$(awk '{if(l1){print ($2-l1)/1024"kB/s",($10-l2)/1024"kB/s"} else{l1=$2; l2=$10;}}' \
                <(grep wlan0 /proc/net/dev) \
                <(sleep 1; grep wlan0 /proc/net/dev));
    else
      vals_wlan='';
    fi;

    if [ ! -z "${vals_eth}" ]; then
      tput rc;
      tput ed;
      tput el;
      if [ ! -z "${vals_eth}" ]; then
        echo -e " \e[1;33mEthernet:\e[0m";
        echo -e "   Download: "$(echo "${vals_eth}" | awk '{ print $1 }');
        echo -e "   Upload: "$(echo "${vals_eth}" | awk '{ print $2 }');
      fi;
      if [ ! -z "${vals_wlan}" ]; then
        echo -e " \e[1;33mWLAN:    \e[0m";
        echo -e "   Download: "$(echo "${vals_wlan}" | awk '{ print $1 }');
        echo -e "   Upload: "$(echo "${vals_wlan}" | awk '{ print $2 }');
      fi;
    fi;
    sleep 1;
  done;
}

# === Build Locker ===
function buildlock()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: buildlock <command...> (Mutex-locked command execution)';
    echo '';
    return;
  fi;

  # Variables
  local file_lock=~/.tmp_runlock.tag;

  # Lock Detected
  if [ -f "${file_lock}" ]; then
    echo '';
    echo " buildlock: The file '${file_lock}' still exists, waiting...";
    echo '';
    while [ -f "${file_lock}" ]; do sleep 10; done;
  fi;

  # Run work
  echo 1 > "${file_lock}";
  ${@};
  rm -f "${file_lock}";
}

# === File Scheme Sorter ===
function fileschemesorter()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: fileschemesorter <file_to_sort> <file_reference>';
    echo '';
    return;
  fi;

  # Variables
  local file_to_sort="${1}";
  local file_reference="${2}";
  local file_temp_1=$(mktemp);
  local file_temp_2=$(mktemp);
  local file_temp_3=$(mktemp);

  # Reference browse
  touch ${file_temp_1};
  cat ${file_reference} | while read line; do

    # Relevant lines
    if [ ! -z "${line}" ] && grep -q "${line}$" "${file_to_sort}"; then
      echo ${line} >> "${file_temp_1}";
    fi;

  done;

  # Final comparison
  sort "${file_to_sort}" -o "${file_temp_2}";
  sort "${file_temp_1}" -o "${file_temp_3}";
  meld "${file_temp_2}" "${file_temp_3}";
  meld "${file_to_sort}" "${file_temp_1}";
  echo '';
  echo ' Press [ENTER] to continue...';
  echo '';
  read key;
  rm "${file_to_sort}";
  mv "${file_temp_1}" "${file_to_sort}";

  # Cleanup
  rm -f ${file_temp_2};
  rm -f ${file_temp_3};
}

# === USB MTP Mounts ===
function mtpmountdisable()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: mtpmountdisable (Disable MTP automount)';
    echo '';
    return;
  fi;

  # Disable MTP automount
  gsettings set org.cinnamon.desktop.media-handling automount-open false;
  gsettings set org.cinnamon.desktop.media-handling automount false;
}

# === CleanRAM ===
function cleanram()
{
  # Usage: cleanram (RAM caches cleanup)

  # Run cleanram script
  "${android_development_shell_tools_dir}/run_cleanram.sh";
}

# === CleanRAM with Kills ===
function cleanramkill()
{
  # Usage: cleanramkill (Complete RAM cleanup including "java")

  # Kill relevant RAM eating processes
  killall java;

  # Run cleanram script
  cleanram;
}

# === Network Manager Restart ===
function networkrestart()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: networkrestart (Restart network manager)';
    echo '';
    return;
  fi;

  # Restart network manager
  sudo service network-manager restart;
}

# === Pushbullet Folder Sizes ===
function pushbsizes()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: pushbsizes <paths> (Path sizes in PushBullet notification)';
    echo '';
    return;
  fi;

  # Notify all input sizes
  echo '';
  echo " Studying sizes of inputs: ${*}";
  echo '';
  local message=$(du -csh ${*} | tee /dev/stderr | tr '\t' ' ');
  pushb "${message//$'\n'/\\\n}";
}

# === Done Notification Sender ===
alias isdone='notify-send "Process execution finished !"';
