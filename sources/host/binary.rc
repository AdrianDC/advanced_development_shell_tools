#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Binary Editor ===
function binaryeditor()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: binaryeditor <patternsearch> [binariespath] [replacement] (Binary files parser and editor)';
    echo '';
    return;
  fi;

  # Variables
  local PATTERN=${1};
  local FILES=${2:-.};
  local REPLACEMENT=${3};
  local REPLACE=;
  local STRINGS=;
  PATTERN=${PATTERN//\*/.\*};
  PATTERN=${PATTERN//./.};

  # Headers
  echo '';
  if [ ! -z "${REPLACEMENT}" ]; then
    echo -e " \e[1;31m=== Replacing '${PATTERN}' with '${REPLACEMENT}' in ${FILES} ===\e[0m";
  else
    echo -e " \e[1;31m=== Searching '${PATTERN}' in ${FILES} ===\e[0m";
  fi;
  echo '';

  # Search files
  for FILE in $(find "${FILES}" -not -path "*.git/*" -not -path "*.repo/*" | sort); do

    # File / directory detection
    FILE=$(readlink -f "${FILE}");
    if [ ! -e "${FILE}" ] || [ -d "${FILE}" ]; then
      continue;
    fi;

    # Replacement mode
    if [ ! -z "${REPLACEMENT}" ]; then
      STRINGS=$(stringsgetall "${FILE}" \
              | grep --color=never "${PATTERN}" \
              | sort -u -r);

      # Information found
      if [ ! -z "${STRINGS}" ]; then
        echo -en  "   \e[1;37m${FILE} :\e[0m ${STRINGS} ";
        for OLD_STRING in ${STRINGS}; do
          NEW_STRING=${OLD_STRING//${PATTERN}/${REPLACEMENT}};

          # String conversions
          OLD_STRING_HEX=$(echo -n "${OLD_STRING}" | xxd -g 0 -u -ps -c 256)00;
          NEW_STRING_HEX=$(echo -n "${NEW_STRING}" | xxd -g 0 -u -ps -c 256)00;

          # Dimensions security
          if [ ${#NEW_STRING_HEX} -le ${#OLD_STRING_HEX} ]; then
            while [ ${#NEW_STRING_HEX} -lt ${#OLD_STRING_HEX} ];
            do
              NEW_STRING_HEX=${NEW_STRING_HEX}00;
            done;

            # Modification confirmation
            echo -en  '\e[1;36m[y/N] \e[0m';
            read -r -s -d'' -s -n1 REPLACE;
            if [[ "${REPLACE}" == 'y' || "${REPLACE}" == 'Y' ]]; then
              hexdump -ve '1/1 "%.2X"' "${FILE}" \
                  | sed "s/${OLD_STRING_HEX}/${NEW_STRING_HEX}/g" \
                  | xxd -r -p > "${FILE}.tmp";
              chmod --reference "${FILE}" "${FILE}.tmp";
              mv "${FILE}.tmp" "${FILE}";
              echo -e '\e[1;32mDone!\e[0m';
            else
              echo -e '\e[1;33mIgnored.\e[0m';
            fi;

          # String overflow
          else
            echo -e '\e[1;36m[N] \e[1;33mString too long...\e[0m';
          fi;
        done;

      # Information not found
      else
        STRINGS=$(stringsgetall "${FILE}" \
                | grep --color=never "${REPLACEMENT}" \
                | sort -u -r);
        if [ ! -z "${STRINGS}" ]; then
          echo -e "   \e[1;37m${FILE}:\e[0m ${REPLACEMENT} \e[1;33mFound.\e[0m";
        fi;
      fi;

    # Search mode
    else
      STRINGS=$(stringsgetall "${FILE}" \
              | grep --color=never "${PATTERN}" \
              | sort -u -r \
              | tr '\n' ',');
      if [ ! -z "${STRINGS}" ]; then
        echo -e "   \e[1;37m${FILE}:\e[1;33m ${STRINGS}\e[0m";
      fi;
    fi;

  done;
  echo '';
}

# === Binary Search ===
function binarysearch()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: binarysearch <patternsearch> [binariespath] (Binary files parser and searcher)';
    echo '';
    return;
  fi;

  # Run binaryeditor in search mode
  binaryeditor "${1}" "${2}";
}
