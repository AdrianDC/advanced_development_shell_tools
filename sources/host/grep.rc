#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Grep Sources ===
function g()
{
  # Usage: g [inputs] (Grep through sources)

  # Grep through files
  GREP_COLORS='fn=1;1' grep --color=auto -ir --exclude={*.o,*.a,*.cmd,*.ko} \
      --exclude-dir='\.git' --exclude-dir='\.repo' --exclude-dir='node_modules' \
      -- "${*?}" .;
}

# === Grep Binaries ===
function gb()
{
  # Usage: gb [inputs] (Grep through binaries)

  # Grep through files
  GREP_COLORS='fn=1;1' grep --color=auto -air --exclude={*.o,*.a,*.cmd,*.ko} \
      --exclude-dir='\.git' --exclude-dir='\.repo' --exclude-dir='node_modules' \
      -- "${*?}" .;
}

# === Grep Strings ===
function gs()
{
  # Usage: gs [inputs] (Grep through sources and binaries)

  # Variables
  local tmp_list;

  # Grep through files
  tmp_list=$(mktemp);
  findfilteredprojectfiles . > "${tmp_list}";
  while read -r file; do
    found=$(stringsgetall "${file}" | grep -ai --color=always -- "${*?}");
    if [ ! -z "${found}" ]; then
      echo -e "\e[1;31m${file} :\e[0m ${found}";
    fi;
  done < "${tmp_list}";
  rm -f "${tmp_list}";
}

# === Grep Strings Editor ===
function gce()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gce <inputs> (Grep and edit through sources and binaries)';
    echo '';
    return;
  fi;

  # Variables
  local files=();
  local tmp_list;

  # Grep through files
  tmp_list=$(mktemp);
  findfilteredprojectfiles . > "${tmp_list}";
  while read -r file; do
    found=$(stringsgetall "${file}" | grep -ai --color=always -- "${*?}");
    if [ ! -z "${found}" ]; then
      files+=("${file}");
    fi;
  done < "${tmp_list}";
  rm -f "${tmp_list}";

  # Edit found files
  fileedit "${files[@]}";
}

# === Grep Kernel Configurations ===
function gck()
{
  # Usage: gck [inputs] (Grep through kernel configurations)

  # Variables
  local tmp_list;

  # Grep through files
  tmp_list=$(mktemp);
  findfilteredprojectfiles . \( -name 'Kconfig*' \) > "${tmp_list}";
  while read -r file; do
    found=$(stringsgetall "${file}" | grep -ai --color=always -- "${*#CONFIG_}");
    if [ ! -z "${found}" ]; then
      echo -e "\e[1;31m${file} :\e[0m ${found}";
    fi;
  done < "${tmp_list}";
  rm -f "${tmp_list}";
}

# === Grep All Sources ===
function gcs()
{
  # Usage: gcs [inputs] (Grep through all code sources)

  # Variables
  local tmp_list;

  # Grep through files
  tmp_list=$(mktemp);
  findfilteredprojectfiles . \( -name '*.c' -o -name '*.cc' -o -name '*.cpp' -o -name '*.h' -o -name '*.hpp' \) > "${tmp_list}";
  while read -r file; do
    found=$(stringsgetall "${file}" | grep -ai --color=always -- "${*?}");
    if [ ! -z "${found}" ]; then
      echo -e "\e[1;31m${file} :\e[0m ${found}";
    fi;
  done < "${tmp_list}";
  rm -f "${tmp_list}";
}

# === Grep All Makefiles ===
function gca()
{
  # Usage: gca [inputs] (Grep through all build makefiles)

  # Variables
  local tmp_list;

  # Grep through files
  tmp_list=$(mktemp);
  findfilteredprojectfiles . \( -name '*.mk' -o -name '*.bp' -o -name '*.go' -o -name 'Makefile*' -o -name '*.cmake' \) > "${tmp_list}";
  while read -r file; do
    found=$(stringsgetall "${file}" | grep -ai --color=always -- "${*?}");
    if [ ! -z "${found}" ]; then
      echo -e "\e[1;31m${file} :\e[0m ${found}";
    fi;
  done < "${tmp_list}";
  rm -f "${tmp_list}";
}

# === Grep Android Manifests ===
function gcmanifest()
{
  # Usage: gcmanifest [inputs] (Grep through Android Manifests)

  # Variables
  local tmp_list;

  # Grep through files
  tmp_list=$(mktemp);
  findfilteredprojectfiles . \( -name 'AndroidManifest.xml' \) > "${tmp_list}";
  while read -r file; do
    found=$(stringsgetall "${file}" | grep -ai --color=always -- "${*?}");
    if [ ! -z "${found}" ]; then
      echo -e "\e[1;31m${file} :\e[0m ${found}";
    fi;
  done < "${tmp_list}";
  rm -f "${tmp_list}";
}

# === Grep Android .rc Files ===
function gcrc()
{
  # Usage: gcrc [inputs] (Grep through Android .rc files)

  # Variables
  local tmp_list;

  # Grep through files
  tmp_list=$(mktemp);
  findfilteredprojectfiles . \( -name '*.rc' \) > "${tmp_list}";
  while read -r file; do
    found=$(stringsgetall "${file}" | grep -ai --color=always -- "${*?}");
    if [ ! -z "${found}" ]; then
      echo -e "\e[1;31m${file} :\e[0m ${found}";
    fi;
  done < "${tmp_list}";
  rm -f "${tmp_list}";
}

# === Grep Android Sepolicies ===
function gcsep()
{
  # Usage: gcsep [inputs] (Grep through Android sepolicies)

  # Variables
  local tmp_list;

  # Grep through files
  tmp_list=$(mktemp);
  findfilteredprojectfiles . \( -name '*.te' -o -name '*_contexts' \) > "${tmp_list}";
  while read -r file; do
    found=$(stringsgetall "${file}" | grep -ai --color=always -- "${*?}");
    if [ ! -z "${found}" ]; then
      echo -e "\e[1;31m${file} :\e[0m ${found}";
    fi;
  done < "${tmp_list}";
  rm -f "${tmp_list}";
}

# === Grep Android .xml Files ===
function gcxml()
{
  # Usage: gcxml [inputs] (Grep through Android .xml files)

  # Variables
  local tmp_list;

  # Grep through files
  tmp_list=$(mktemp);
  findfilteredprojectfiles . \( -name '*.xml' \) > "${tmp_list}";
  while read -r file; do
    found=$(stringsgetall "${file}" | grep -ai --color=always -- "${*?}");
    if [ ! -z "${found}" ]; then
      echo -e "\e[1;31m${file} :\e[0m ${found}";
    fi;
  done < "${tmp_list}";
  rm -f "${tmp_list}";
}

# === Grep Android Sepolicies Contexts ===
function gccontexts()
{
  # Usage: gccontexts [inputs] (Grep through Android sepolicies contexts)

  # Variables
  local tmp_list;

  # Grep through files
  tmp_list=$(mktemp);
  findfilteredprojectfiles . \( -name '*_contexts' \) > "${tmp_list}";
  while read -r file; do
    found=$(stringsgetall "${file}" | grep -ai --color=always -- "${*?}");
    if [ ! -z "${found}" ]; then
      echo -e "\e[1;31m${file} :\e[0m ${found}";
    fi;
  done < "${tmp_list}";
  rm -f "${tmp_list}";
}

# === Grep Docker Files ===
function gcdocker()
{
  # Usage: gcdocker [inputs] (Grep through Docker files)

  # Variables
  local tmp_list;

  # Search all build definitions
  tmp_list=$(mktemp);
  findfilteredprojectfiles . \( -name 'Dockerfile' -o -name 'docker-compose.yml' \) > "${tmp_list}";
  while read -r file; do
    found=$(stringsgetall "${file}" | grep -ai --color=always -- "${*?}");
    if [ ! -z "${found}" ]; then
      echo -e "\e[1;31m${file} :\e[0m ${found}";
    fi;
  done < "${tmp_list}";
  rm -f "${tmp_list}";
}

# === Grep GitLab CI Files ===
function gcgitlabci()
{
  # Usage: gcgitlabci [inputs] (Grep through GitLab CI files)

  # Variables
  local tmp_list;

  # Search all build definitions
  tmp_list=$(mktemp);
  findfilteredprojectfiles . \( -name '.gitlab-ci.yml' \) > "${tmp_list}";
  while read -r file; do
    found=$(stringsgetall "${file}" | grep -ai --color=always -- "${*?}");
    if [ ! -z "${found}" ]; then
      echo -e "\e[1;31m${file} :\e[0m ${found}";
    fi;
  done < "${tmp_list}";
  rm -f "${tmp_list}";
}

# === Grep Search Helpers ===
alias grepi='grep -ai';

# === Grep Android Modules ===
function gcmodules()
{
  # Usage: gcmodules [path] (List all LOCAL_MODULE elements)

  # Variables
  local tmp_list;

  # Search all build definitions
  tmp_list=$(mktemp);
  findfilteredprojectfiles "${1:-.}" \( -name '*.mk' -o -name '*.bp' \) > "${tmp_list}";
  while read -r file; do
    stringsgetall "$(readlink -f "${file}")" \
      | grep -ai --color=never "LOCAL_MODULE[ ]*:=\|LOCAL_PACKAGE_NAME[ ]*:=\|    name: " \
      | sed 's/.*\(:=[ \t]*\|name: "\)\([^"]*\)\(".*\|\)/\2/g';
  done < "${tmp_list}";
  rm -f "${tmp_list}";
}

# === Grep Android Phony ===
function gcphony()
{
  # Usage: gcphony (List all PHONY rules)

  # Variables
  local tmp_list;

  # Search all build definitions
  tmp_list=$(mktemp);
  findfilteredprojectfiles . \( -name '*.mk' \) > "${tmp_list}";
  while read -r file; do
    stringsgetall "$(readlink -f "${file}")" \
      | grep -ai --color=never ".PHONY:" \
      | sed 's/.PHONY: //g';
  done < "${tmp_list}";
  rm -f "${tmp_list}";
}

# === Strings Get All ===
function stringsgetall()
{
  # Usage: stringsgetall [params] (Run strings command based on host variants)

  # Handle Sysinternals strings variant
  if strings -accepteula 2> /dev/null | grep -q 'sysinternals'; then
    strings -a -accepteula -nobanner "${@}";

  # Handle generic strings variant
  else
    strings -a "${@}";
  fi;
}
