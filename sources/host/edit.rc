#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Edit Replace Lines ===
function editreplacelines()
{
  # Usage
  if [ -z "${3}" ]; then
    echo '';
    echo ' Usage: editreplacelines <"match_line"> <"to_write"> <"files"> (Edit by replacing lines)';
    echo '';
    return;
  fi;

  # Variables
  local match_line=${1};
  local to_write=${2};
  local files=("${@:3}");

  # Replace
  sed -i "s#^.*${match_line}.*#${to_write}#g" "${files[@]}";
}

# === Edit Replace Match ===
function editreplacematch()
{
  # Usage
  if [ -z "${3}" ]; then
    echo '';
    echo ' Usage: editreplacematch <"match_line"> <"to_write"> <"files"> (Edit by replacing matches)';
    echo '';
    return;
  fi;

  # Variables
  local match_content=${1};
  local to_write=${2};
  local files=("${@:3}");

  # Replace
  sed -i "s#${match_content}#${to_write}#g" "${files[@]}";
}

# === Edit Remove Lines ===
function editremovelines()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: editremovelines <"match_line"> <"files"> (Edit by removing lines)';
    echo '';
    return;
  fi;

  # Variables
  local match_line=${1};
  local files=("${@:2}");

  # Remove
  sed -i "\#^.*${match_line}.*#d" "${files[@]}";
}

# === Edit Remove Match ===
function editremovematch()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: editremovematch <"match_line"> <"files"> (Edit by removing matches)';
    echo '';
    return;
  fi;

  # Variables
  local match_content=${1};
  local files=("${@:2}");

  # Remove
  sed -i "s#${match_content}##g" "${files[@]}";
}

# === Edit Remove Trailing Spaces ===
function editremovetrailingspaces()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: editremovetrailingspaces <"files"> (Edit by removing trailing spaces)';
    echo '';
    return;
  fi;

  # Variables
  local files=("${@}");

  # Remove
  sed -i 's#[ \t]*$##g' "${files[@]}";
}

# === Edit Remove Up To Match ===
function editremoveupto()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: editremoveupto <"match_line"> <"files"> (Edit by removing lines up to first match)';
    echo '';
    return;
  fi;

  # Variables
  local match_line=${1};
  local files=("${@:2}");

  # Remove up to match
  sed -i "\#^.*${match_line}.*#,\$!d" "${files[@]}";
}

# === Edit Remove From Match ===
function editremovefrom()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: editremovefrom <"match_line"> <"files"> (Edit by removing lines from first match)';
    echo '';
    return;
  fi;

  # Variables
  local match_line=${1};
  local files=("${@:2}");

  # Remove up to match
  sed -i "\#^.*${match_line}.*#,\$d" "${files[@]}";
}

# === Edit Insert Above ===
function editinsertabove()
{
  # Usage
  if [ -z "${3}" ]; then
    echo '';
    echo ' Usage: editinsertabove <"match_line"> <"to_insert"> <"files"> (Edit by inserting above)';
    echo '';
    return;
  fi;

  # Variables
  local match_line=${1};
  local to_insert=${2};
  local files=("${@:3}");

  # Insert above
  sed -i "s#\(^.*${match_line}.*\)#${to_insert}\n\1#g" "${files[@]}";
}

# === Edit Insert Below ===
function editinsertbelow()
{
  # Usage
  if [ -z "${3}" ]; then
    echo '';
    echo ' Usage: editinsertbelow <"match_line"> <"to_insert"> <"files"> (Edit by inserting below)';
    echo '';
    return;
  fi;

  # Variables
  local match_line=${1};
  local to_insert=${2};
  local files=("${@:3}");

  # Insert below
  sed -i "s#\(^.*${match_line}.*\)#\1\n${to_insert}#g" "${files[@]}";
}

# === Edit Replace Multiline ===
function editreplacemultiline()
{
  # Usage
  if [ -z "${4}" ]; then
    echo '';
    echo ' Usage: editreplacemultiline <"match_first"> <"match_last"> <"replace"> <"files"> (Edit by replacing multiple lines)';
    echo '';
    return;
  fi;

  # Variables
  local match_first=${1};
  local match_last=${2};
  local replace=${3};
  local files=("${@:4}");

  # Replace section from first to last
  sed -i "\#${match_first}#{:a; N; \#${match_last}#!ba; s#${match_first}.*${match_last}#${replace}#; };" "${files[@]}";
}

# === Edit Trim Output ===
function edittrimoutput()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: edittrimoutput <"files"> (Edit by triming output line rewrites)';
    echo '';
    return;
  fi;

  # Trim output line rewrites
  sed -i 's/\r[^\n]*\r/\r/g' "${@}";
  sed -i 's/\(\r\|'$'\033''\[K\)//g' "${@}";
  sed -Ei 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' "${@}";
}

# === File Scheme Sorter ===
function fileschemesorter()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: fileschemesorter <file_to_sort> <file_reference> (Sort file against scheme file)';
    echo '';
    return;
  fi;

  # Variables
  local file_to_sort=${1};
  local file_reference=${2};
  local file_temp_1;
  local file_temp_2;
  local file_temp_3;

  # Initialize variables
  file_temp_1=$(mktemp);
  file_temp_2=$(mktemp);
  file_temp_3=$(mktemp);

  # Reference browse
  touch "${file_temp_1}";
  while read -r line; do

    # Relevant lines
    if [ ! -z "${line}" ] && grep -q "${line}$" "${file_to_sort}"; then
      echo "${line}" >> "${file_temp_1}";
    fi;

  done < "${file_reference}";

  # Final comparison
  sort "${file_to_sort}" -o "${file_temp_2}";
  sort "${file_temp_1}" -o "${file_temp_3}";
  pathscompare "${file_temp_2}" "${file_temp_3}";
  pathscompare "${file_to_sort}" "${file_temp_1}" --wait;
  echo '';
  echo ' Press [ENTER] to continue...';
  echo '';
  read -r;
  rm "${file_to_sort}";
  mv "${file_temp_1}" "${file_to_sort}";

  # Cleanup
  rm -f "${file_temp_2}";
  rm -f "${file_temp_3}";
}
