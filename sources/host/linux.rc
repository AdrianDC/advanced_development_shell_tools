#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Clipboard ===
function toclip() { xclip -selection c; }

# === Folders Syncer ===
function rsynca()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: rsynca <path1> <path2> (Mirror a path to another)';
    echo '';
    return;
  fi;

  # Sync execution
  rsync -aAHPvXz --delete "${1}" "${2}";
}

# === Folders Fast Syncer ===
function rsyncf()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: rsyncf <path1> <path2> (Mirror a path to another based on size only)';
    echo '';
    return;
  fi;

  # Sync execution
  rsync -aAHPvXz --delete --size-only "${1}" "${2}";
}

alias pcinfo='inxi -Fxz';

# === CPIO Extractor ===
function cpioext()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: cpioext <cpio_file_to_extract> (Extract cpio file)';
    echo '';
    return;
  fi;

  # Variables
  local cwd;
  local file;
  local name;
  local outdir;

  # Extract cpio file
  cwd=$(pwd);
  file=$(echo "${1}" | sed 's/file:\/\/\(.*\)/\1/');
  name=$(basename "${file}");
  outdir=$(mktemp -d);
  cp "${file}" "${outdir}/";
  cd "${outdir}";
  cpio -i -F "${name}";
  diropen "${outdir}/";
  cd "${cwd}";
}

# === Video Resizer ===
function videoresize()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: videoresize <video_file> (Resize video dimensions)';
    echo '';
    return;
  fi;

  # Show and run command
  local command="mencoder ${1} -vf scale=480 -vf rotate=2 -ovc lavc -oac pcm -lavcopts vcodec=mpeg4:autoaspect -o ${1}.small.mp4";
  echo '';
  echo "${command}";
  echo '';
  ${command};
  echo '';
}

# === Reown Recursively ===
function reownas()
{
  # Usage
  if [ ! -z "${2}" ]; then
    echo '';
    echo ' Usage: reownas [other_user_name] (Reown current folder recursively)';
    echo '';
    return;
  fi;

  # Variables
  local user=${1};

  # Default to current user
  if [ -z "${user}" ]; then
    user=$(whoami);
  fi;

  # Reown current folder recursively
  sudo chown -Rv "${user}:${user}" "${PWD:?}" \
      | grep -v 'retained as';
}

# === Diff Binaries ===
function diffbin()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: diffbin <binary_left> <binary_right> [first_n_lines] (Compare binary files)';
    echo '';
    return;
  fi;

  # Full view
  if [ -z "${3}" ]; then
    diff -sy <(xxd "${1}") <(xxd "${2}") | less | colordiff;

  # Partial view
  else
    diff -sy <(xxd "${1}") <(xxd "${2}") | less | colordiff | head -n "${3}";
  fi;
}

# === Drive Speed Test ===
function drivespeedtest()
{
  # Usage
  if [ -z "${1}" ] || [ -e "${1}" ]; then
    echo '';
    echo ' Usage: drivespeedtest <test_file_path> (Run drive write speed test)';
    echo '';
    return;
  fi;

  # Variables
  local file_path=${1};
  local time_diff;
  local value;

  # Run drive write speed test
  echo '';
  sync;
  time_diff=$(date +%s%N);
  time sh -c "dd if=/dev/zero of=${file_path} bs=100k count=1k && sync";
  time_diff=$(($(date +%s%N) - time_diff));
  rm "${file_path}";
  echo '';

  # Calculate performance
  value=$((104857600 * 1000 / time_diff));
  echo -e " \e[1;33m[ Path transfer performance: ${value} MB/s ]\e[0m";
  echo '';
}

# === Network Manager Restart ===
function networkrestart()
{
  # Usage: networkrestart (Restart network manager)

  # Restart network manager
  sudo service network-manager restart;
}

# === Temp Cleaner ===
function tmpclean()
{
  # Usage: tmpclean (Cleanup /tmp from old leftovers)

  # Cleanup /tmp from old leftovers
  sudo find /tmp -type f -atime '+2' -print -delete;
}

# === Done Notification Sender ===
alias isdone='notify-send "Process execution finished !"';

# === Resources Monitor  ===
alias topcpu='top -o %CPU';
alias topmem='top -o %MEM';

# === Keyboard Inputs ===
alias keyboardinputs='xev | grep "keycode .* (.*)"';

# === APT Install Broken ===
alias aptinstallbroken='sudo apt install -o Dpkg::Options::="--force-overwrite" --fix-broken';
