#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Standalone Source Helper ===
# source <(curl -Ls1 https://github.com/AdrianDC/advanced_development_shell_tools/raw/master/sources/host/edit.rc)
# source <(curl -Ls1 https://github.com/AdrianDC/advanced_development_shell_tools/raw/master/sources/host/tools.rc)

# === Hastebin ===
function haste()
{
  # Usage: haste <file> or | haste (Share hastebin logs)

  # Based upon https://github.com/seejohnrun/haste-client

  # Variables
  local tmp;
  local url;

  # Get output
  tmp=$(mktemp);
  if [ ! -z "${1}" ] && [ -f "${1}" ]; then
    tee "${tmp}" < "${1}";
  else
    cat | tee "${tmp}";
  fi;
  echo '';

  # Trim line rewrites
  edittrimoutput "${tmp}";

  # Upload to hastebin
  url=$(timeout -k 10 10 curl -X POST -s --data-binary @"${tmp}" https://hastebin.com/documents \
      | awk -F '"' '{ print "http://hastebin.com/"$4; }');
  echo " haste: ${url}";

  # Open url and delete temp file
  urlopen "${url}";
  rm "${tmp}";
}

# === Pastebin ===
function pbin()
{
  # Usage: pbin <file> or | pbin (Share Pastebin logs)

  # Variables
  local tmp;
  local token;
  local url;

  # Get output
  tmp=$(mktemp);
  if [ ! -z "${1}" ] && [ -f "${1}" ]; then
    tee "${tmp}" < "${1}";
  else
    cat | tee "${tmp}";
  fi;
  echo '';

  # Trim line rewrites
  edittrimoutput "${tmp}";

  # Acquire token from Pastebin
  token=$(curl -s 'https://pastebin.com' \
        | grep --color=never 'csrf_token_post' \
        | sed 's/.*name="csrf_token_post" value="\(.*\)".*/\1/')

  # Upload to Pastebin
  url=$(timeout -k 10 10 curl -X POST -s 'https://pastebin.com/post.php' \
        -D - \
        -F "csrf_token_post=${token}" \
        -F "paste_code=<${tmp};type=text/plain" \
        -F "paste_expire_date=${PASTEBIN_EXPIRE:-1D}" \
        -F 'paste_format=8' \
        -F 'paste_private=1' \
        -F 'submit_hidden=submit_hidden' \
      | grep --color=never 'location');
  url="http://pastebin.com/raw${url##*: }";
  echo " pastebin: ${url}";

  # Open url and delete temp file
  urlopen "${url}";
  rm "${tmp}";
}

# === Pastebin Permanent ===
alias pbinperm='PASTEBIN_EXPIRE=N pbin';

# === dogbin ===
function dogbin()
{
  # Usage: dogbin <file> or | dogbin (Share dogbin logs)

  # Based upon the haste function above

  # Variables
  local tmp;
  local url;

  # Get output
  tmp=$(mktemp);
  if [ ! -z "${1}" ] && [ -f "${1}" ]; then
    tee "${tmp}" < "${1}";
  else
    cat | tee "${tmp}";
  fi;
  echo '';

  # Trim line rewrites
  edittrimoutput "${tmp}";

  # Upload to dogbin
  url="http://del.dog/$(timeout -k 10 10 curl -X POST -s --data-binary @"${tmp}" \
      https://del.dog/documents | grep key | cut -d \" -f 4)";
  echo " dogbin: ${url}";

  # Open url and delete temp file
  urlopen "${url}";
  rm "${tmp}";
}

# === Remote Script Launcher ===
function remotescript()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: remotescript <url> [bool_automated] (Remote script launcher with confirmations)';
    echo '';
    return;
  fi;

  # Variables
  local script=${1};
  local line;
  local tmpfile;

  # Header
  echo '';
  echo -e " \e[1;33mremotescript: Importing ${script}...\e[0m";
  echo '';

  # Retrieve script
  tmpfile=$(mktemp);
  curl -Ls1 "${script}" > "${tmpfile}";

  # Open descriptor 3 on input
  exec 3<"${tmpfile}";

  # Loop through script
  while IFS= read -r -u 3 line; do

    # Handle comment lines
    if echo "${line}" | grep -q '^[ ]*\(#.*\|\)$'; then
      echo -e "\e[1;36m${line}\e[0m";

    # Handle commands lines
    else
      if [ ! -z "${2}" ]; then
        echo -e "\e[1;32m${line}\e[0m";
      else
        echo -en "\e[1;32m${line} \e[1;33m[Enter]\e[0m";
        read -r;
      fi;
      # shellcheck disable=SC2001
      line=$(echo "${line}" | sed 's/;[ ]*$//g');
      ${line};
    fi;

  done;

  # Finish process
  echo '';
  rm -f "${tmpfile}";
  exec 3<&-;
}

# === Build Locker ===
function buildlock()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: buildlock <command...> (Mutex-locked command execution)';
    echo '';
    return;
  fi;

  # Variables
  local file_lock=${ADVANCED_DEVELOPMENT_SHELL_TOOLS_WORKSPACE:-${HOME}}/.tmp_runlock.tag;

  # Lock Detected
  if [ -f "${file_lock}" ]; then
    echo '';
    echo " buildlock: The file '${file_lock}' still exists, waiting...";
    echo '';
    while [ -f "${file_lock}" ]; do sleep 10; done;
  fi;

  # Run work
  echo 1 > "${file_lock}";
  "${@}";
  rm -f "${file_lock}";
}

# === Work In Progress Shortcuts ===
function wip()
{
  # Usage
  if [ -z "${*}" ] && [ -z "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_WIP}" ]; then
    echo '';
    echo ' Usage: wip [commands to store] (Work in progress commands to store and use)';
    echo '';
    return;
  fi;

  # Input given, save commands
  if [ ! -z "${*}" ]; then
    ADVANCED_DEVELOPMENT_SHELL_TOOLS_WIP=${*};
    echo '';
    echo -e " \e[1;33mwip: Stored\e[0m '${ADVANCED_DEVELOPMENT_SHELL_TOOLS_WIP}'. \e[1;33mUse 'wip' to run the commands\e[0m";
    echo '';

  # No input, run commands
  else
    echo '';
    echo -e " \e[1;33mwip: Running\e[0m '${ADVANCED_DEVELOPMENT_SHELL_TOOLS_WIP}'...";
    echo '';
    ${ADVANCED_DEVELOPMENT_SHELL_TOOLS_WIP};
  fi;
}
