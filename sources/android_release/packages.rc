#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Sign Zip Package ===
function signzip()
{
  # Usage
  if [ ! -f "${1}" ]; then
    echo '';
    echo ' Usage: signzip <zip_to_sign> [signed_output_zip] (Sign flashable zip)';
    echo '';
    return;
  fi;

  # Variables
  local java_version;
  local javac_version;
  local validated_java='';
  local zip_input=${1};
  local zip_output=${2};

  # Direct ZIP signature
  if [ -z "${zip_output}" ]; then
    zip_output=${zip_input};
    zip_input=$(readlink -f "${zip_input}.unsigned.zip");
    mv -v "${zip_output}" "${zip_input}";
  fi;

  # Apply the metadata file
  #local tmp_folder;
  #local pwd_folder;
  #tmp_folder=$(mktemp -d);
  #pwd_folder=$(pwd);
  #cd ${tmp_folder}/;
  #mkdir -p ./META-INF/com/android/;
  #echo 'ota-required-cache=0' > ./META-INF/com/android/metadata;
  #echo 'ota-type=FILE' >> ./META-INF/com/android/metadata;
  #echo 'post-build=' >> ./META-INF/com/android/metadata;
  #echo 'post-timestamp='$(date +%s) >> ./META-INF/com/android/metadata;
  #echo 'pre-device=' >> ./META-INF/com/android/metadata;
  #zip -d "${zip_input}" ./META-INF/com/android/metadata;
  #zip -g "${zip_input}" ./META-INF/com/android/metadata;
  #cd ${pwd_folder}/;

  # Remove output file
  rm -f "${zip_output}";

  # Detect java versions
  java_version=$(java -version 2>&1 | grep 'version ' | cut -d"\"" -f 2);
  javac_version=$(javac -version 2>&1 | cut -d' ' -f 2);

  # Handle OpenJDK and Oracle
  case "${java_version%%.*}" in

    # OpenJDK Java
    1|11)
      java_version=${java_version#1.};
      java_version=${java_version%%.*};
      javac_version=${javac_version#1.};
      javac_version=${javac_version%%.*};
      if [ "${java_version}" -ge 7 ] && [ "${javac_version}" -ge 7 ]; then
        validated_java='true';
      fi;;

    # Oracle Java
    9)
      if [ "${javac_version%%.*}" -eq 9 ]; then
        validated_java='true';
      fi;;

  esac;

  # Check Java installed version
  if [ -z "${validated_java}" ]; then
    echo '';
    echo '  signzip: Please install java[c] from OpenJDK (at least 1.7) or Oracle (at least 9.0)';
    echo '';
    return;
  fi;

  # Sign ZIP
  java -jar "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_SIGNAPK_DIR}/signapk-cm121.jar" \
      -w "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_SIGNAPK_DIR}/testkey.x509.pem" \
      "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_SIGNAPK_DIR}/testkey.pk8" \
      "${zip_input}" \
      "${zip_output}";

  # Remove unsigned file if successful
  if [ -f "${zip_input}" ]; then
    rm -f "${zip_input}";
  fi;
}

# === Sign Zip Packages ===
function signzips()
{
  # Usage
  if [ ! -f "${1}" ]; then
    echo '';
    echo ' Usage: signzips <zip_1> [zip_2] ... (Sign flashable zips)';
    echo '';
    return;
  fi;

  # Variables
  local file_path;

  # Sign the zip files
  for file_path in "${@}"; do
    signzip "${1}";
  done;
}

# === Sign Apk Package ===
function signapk()
{
  # Usage
  if [ ! -f "${1}" ]; then
    echo '';
    echo ' Usage: signapk <apk_to_sign> [signed_output_apk] (Sign an apk file)';
    echo '';
    return;
  fi;

  # Reuse signzip for the same purpose
  signzip "${1}" "${2}";
}

# === Sign Apk Packages ===
function signapks()
{
  # Usage
  if [ ! -f "${1}" ]; then
    echo '';
    echo ' Usage: signapks <apk_1> [apk_2] ... (Sign apk files)';
    echo '';
    return;
  fi;

  # Variables
  local file_path;

  # Sign the apk files
  for file_path in "${@}"; do
    signapk "${1}";
  done;
}

# === Output Zip Maker ===
function packzip()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: packzip <files> (Files to flashable zip)';
    echo '';
    return;
  fi;

  # Variables
  local CurDir;
  local FilesList=();
  local FileTarget;
  local Installs;
  local OutFile;
  local SystemPartition;
  local TargetFile;
  local TmpDir;

  # Variables
  CurDir=$(pwd);
  TmpDir=$(mktemp -d);
  OutFile="${TARGET_PRODUCT}-$(basename "$(readlink -f "${1}")")-$(date +'%Y%m%d-%H%M').zip";
  TargetFile="$(desktoppath)/Builds/${OutFile}";

  # Handle paths
  mkdir -p "$(dirname "${TargetFile}")";

  # Header
  echo '';
  echo -e ' \e[1;37m[ Packed Zip Maker by Adrian DC - 2016 ]\e[0m';
  echo '';

  # Files handling
  Installs=${*};
  for FilePath in ${Installs[*]}; do

    # Target selection
    FileTarget=;
    if [[ "${FilePath}" == *'/system'* ]]; then
      FilePath=$(echo -n "${FilePath}" | tail -1 \
               | sed "s/\x1B\[[0-9;]*[JKmsu]//g");
      FileTarget=$(echo "${FilePath}" \
                 | sed "s/.*\(system\/.*\)/\1/g");
    elif [[ "${FilePath}" == *'/proprietary'* ]]; then
      FilePath=$(echo -n "${FilePath}" | tail -1 \
               | sed "s/\x1B\[[0-9;]*[JKmsu]//g");
      FileTarget=$(echo "${FilePath}" \
                 | sed "s/.*proprietary\/\(.*\)/system\/\1/g");
    fi;

    # Target copy
    if [ ! -z "${FileTarget}" ]; then
      FileDir=$(dirname "${FileTarget}");
      if [ ! -d "${TmpDir}/${FileDir}" ]; then
        mkdir -p "${TmpDir}/${FileDir}";
      fi;
      if [ -f "${FilePath}" ]; then
        cp "${FilePath}" "${TmpDir}/${FileTarget}";
        FilesList+=("./${FileTarget}");
      fi;
    fi;
  done;

  # Partitions
  androiddevicestarget init;
  SystemPartition=$(androiddevicestarget system);

  # Generate zip, updater-script and include files
  cd "${TmpDir}/";
  mkdir -p ./META-INF/com/google/android/;
  cp "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_FLASHABLE_ANDROID_BASE}" "${OutFile}.unsigned.zip";
  cp "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_UPDATER_INSTALL_SYSTEM}" ./META-INF/com/google/android/updater-script;
  sed -i "s/ANDROID_SYSTEM_PARTITION/${SystemPartition//\//\\\/}/" ./META-INF/com/google/android/updater-script;
  zip -g "${TmpDir}/${OutFile}.unsigned.zip" ./META-INF/com/google/android/updater-script;
  rm -rf ./META-INF;

  # Pack zip output
  if [ ! -z "${FilesList[*]}" ]; then
    zip -g "${TmpDir}/${OutFile}.unsigned.zip" "${FilesList[@]}";

    # Zip signature
    signzip "${TmpDir}/${OutFile}.unsigned.zip" "${TmpDir}/${OutFile}";
    cp "${TmpDir}/${OutFile}" "${TargetFile}";

    # End of work
    echo '';
    echo -e " \e[1;37mPackage File:\e[0m ${TargetFile}";
    export PACKAGE_RESULT=${TargetFile};
  fi;
  echo '';

  # End of work
  rm -rf "${TmpDir}";
  cd "${CurDir}";
}

# === Packages Results Zip Maker ===
function packzippr()
{
  # Usage
  # shellcheck disable=SC2153
  if [ -z "${PACKAGES_RESULTS}" ]; then
    echo '';
    echo ' Usage: packzippr (Pack files from PACKAGES_RESULTS to a flashable zip)';
    echo '';
    return;
  fi;

  # Variables
  local results=();

  # Results array
  for result in ${PACKAGES_RESULTS}; do
    results+=("${result}");
  done;

  # Pack results to zip
  packzip "${results[@]}";
}

# === Git Zip Maker ===
function gitzip()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitzip <commit_sha1> (Git commit files to flashable zip)';
    echo '';
    return;
  fi;

  # Variables
  local file_path;
  local files_list=;
  local status;
  local tmpfile;

  # Files parsing
  tmpfile=$(mktemp);
  git diff-tree --no-commit-id --name-status -r "${1}" > "${tmpfile}";
  while read -r line; do
    status=$(echo "${line}" | awk '{ print $1 }');
    file_path=$(echo "${line}" | awk '{ print $2 }');
    if [[ "${status}" == *'D'* || "${line}" == *'.mk'* ]]; then
      continue;
    fi;
    files_list="${files_list} ${file_path}";
  done < "${tmpfile}";

  # Pack into zip
  packzip "${files_list}";
  rm -f "${tmpfile}";
}

# === OEM Partition Injector ===
function oeminjectorzip()
{
  # Usage
  if [ -z "${1}" ] || [ ! -f "${1}" ]; then
    echo '';
    echo ' Usage: oeminjectorzip <oem_image> (OEM files to flashable injector zip)';
    echo '';
    return;
  fi;

  # Variables
  local cur_dir;
  local oem_file;
  local oem_files;
  local oem_files_list=();
  local oem_folder;
  local oem_image=${1};
  local oem_name;
  local oem_partition;
  local oem_target_file;
  local oem_target_dir;
  local target_file;
  local target_name;
  local tmp_dir;
  local tmp_file;

  # Verify simg2img is installed
  if ! type simg2img >/dev/null 2>&1; then
    echo '';
    echo ' oeminjectorzip: Please install android-tools-fsutils';
    echo '';
    return;
  fi;

  # Mount and prepare the ext4 OEM image
  oem_folder=$(mktemp -d);
  tmp_file=$(mktemp);
  simg2img "${oem_image}" "${tmp_file}";
  sudo mount -t ext4 "${tmp_file}" "${oem_folder}";

  # Extract OEM name
  oem_name=$(basename "${oem_image}");
  oem_name=${oem_name%.*};

  # Initialize variables
  cur_dir=$(pwd);
  tmp_dir=$(mktemp -d);
  target_name="oem-${oem_name}-$(date +'%Y%m%d-%H%M').zip";
  target_file="$(desktoppath)/Builds/${target_name}";

  # Handle paths
  mkdir -p "$(dirname "${target_file}")";

  # Header
  echo '';
  echo -e ' \e[1;37m[ OEM Injector Zip by Adrian DC - 2015-2020 ]\e[0m';
  echo '';

  # Files handling
  oem_files=$(find "${oem_folder}/" -type f -printf '%P\n');
  for oem_file in ${oem_files[*]}; do

    # Target selection
    oem_file=$(echo -n "${oem_file}" | tail -1 \
             | sed "s/\x1B\[[0-9;]*[JKmsu]//g");
    oem_target_file=oem/${oem_file};
    oem_target_dir=$(dirname "${oem_target_file}");
    if [ ! -d "${tmp_dir}/${oem_target_dir}" ]; then
      mkdir -p "${tmp_dir}/${oem_target_dir}";
    fi;

    # Target copy
    oem_file=$(readlink -f "${oem_folder}/${oem_file}");
    if [ -f "${oem_file}" ]; then
      cp "${oem_file}" "${tmp_dir}/${oem_target_file}";
      oem_files_list+=("./${oem_target_file}");
    fi;
  done;

  # Pack zip output
  cd "${tmp_dir}/";
  if [ ! -z "${oem_files_list[*]}" ]; then

    # Partitions
    androiddevicestarget init;
    oem_partition=$(androiddevicestarget oem);

    # Generate zip, updater-script and include files
    mkdir -p ./META-INF/com/google/android/;
    cp "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_FLASHABLE_ANDROID_BASE}" "${target_name}.unsigned.zip";
    cp "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_UPDATER_INSTALL_OEM}" ./META-INF/com/google/android/updater-script;
    sed -i "s/ANDROID_OEM_PARTITION/${oem_partition//\//\\\/}/" ./META-INF/com/google/android/updater-script;
    zip -g "${tmp_dir}/${target_name}.unsigned.zip" ./META-INF/com/google/android/updater-script;
    zip -g "${tmp_dir}/${target_name}.unsigned.zip" "${oem_files_list[@]}";
    rm -rf ./META-INF;

    # Zip signature
    signzip "${tmp_dir}/${target_name}.unsigned.zip" "${tmp_dir}/${target_name}";
    cp "${tmp_dir}/${target_name}" "${target_file}";
    export PACKAGE_RESULT=${target_file};

    # Package result
    echo '';
    echo -e " \e[1;37mPackage File:\e[0m ${target_file}";
  else
    export PACKAGE_RESULT=;
  fi;
  echo '';

  # End of work
  sudo umount "${oem_folder}";
  rm -rf "${tmp_dir}";
  rm -rf "${tmp_file}";
  cd "${cur_dir}";
}
