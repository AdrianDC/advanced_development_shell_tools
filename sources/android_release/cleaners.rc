#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === ROM Output Cleaner ===
function outdevcl()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: outdevcl <devicename> [minimal/full] (Advanced ROM output cleaner for rebuilds)';
    echo '';
    return;
  fi;

  # Header
  echo '';
  echo -e " \e[1;33moutdevcl:\e[0m Cleaning up ROM outputs for '${1}'";

  # Run full output cleaners
  if [ "${2}" = 'full' ]; then

    # Run product output cleaner
    outproductdevcl "${1}";

  # Run partial output cleaners
  else

    # Run bootimage output cleaner
    outbootdevcl "${1}" 'nested';

    # Run OTA output cleaner
    outotadevcl "${1}" 'nested';

    # Run system output cleaner
    outsystemdevcl "${1}" "${2}" 'nested';

  fi;

  # Run common output cleaner
  outcommoncl 'nested';

  # Footer
  echo '';
}

# === ROM Output Boot Cleaner ===
function outbootdevcl()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: outbootdevcl <devicename> (ROM output cleaner for bootimage rebuilds)';
    echo '';
    return;
  fi;

  # Variables
  local out_device_path;

  # Header
  [ -z "${2}" ] && echo '';
  echo -e " \e[1;33moutbootdevcl:\e[0m Cleaning up bootimage outputs for '${1}'";
  [ -z "${2}" ] && echo '';

  # Out path
  out_device_path=${OUT_DIR:-./out}/target/product/${1};

  # Rebuild the default properties
  if [ -f "${out_device_path}/ota_temp/RECOVERY/RAMDISK/default.prop" ]; then
    rm -f "${out_device_path}/ota_temp/RECOVERY/RAMDISK/default.prop";
  fi;
  if [ -f "${out_device_path}/recovery/root/default.prop" ]; then
    rm -f "${out_device_path}/recovery/root/default.prop";
  fi;

  # Delete relevant outputs
  rm -rf "${out_device_path}/boot"*;
  rm -rf "${out_device_path}/combinedroot";
  rm -rf "${out_device_path}/combined"*;
  rm -rf "${out_device_path}/install";
  rm -rf "${out_device_path}/kernel";
  rm -rf "${out_device_path}/ramdisk"*;
  rm -rf "${out_device_path}/recovery";
  rm -rf "${out_device_path}/recovery"*;
  rm -rf "${out_device_path}/root";
  rm -rf "${out_device_path}/utilities";
}

# === ROM Output OTA Cleaner ===
function outotadevcl()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: outotadevcl <devicename> (ROM output cleaner for OTA rebuilds)';
    echo '';
    return;
  fi;

  # Variables
  local out_device_path;

  # Header
  [ -z "${2}" ] && echo '';
  echo -e " \e[1;33moutotadevcl:\e[0m Cleaning up OTA outputs for '${1}'";
  [ -z "${2}" ] && echo '';

  # Out path
  out_device_path=${OUT_DIR:-./out}/target/product/${1};

  # Delete relevant outputs
  rm -rf "${out_device_path}/"*"${1}"*".zip";
  rm -rf "${out_device_path}/"*"${1}"*".zip.md5sum";
  rm -rf "${out_device_path}/data";
  rm -rf "${out_device_path}/obj/ETC/system_build_prop_intermediates";
  rm -rf "${out_device_path}/obj/PACKAGING/apkcerts_intermediates";
  rm -rf "${out_device_path}/obj/PACKAGING/target_files_intermediates";
  rm -rf "${out_device_path}/ota_temp/RECOVERY/RAMDISK";
  rm -rf "${out_device_path}/"*"ota"*".zip";
}

# === ROM Output Sepolicies Cleaner ===
function outsepdevcl()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: outsepdevcl <devicename> (ROM output cleaner for sepolicies rebuilds)';
    echo '';
    return;
  fi;

  # Variables
  local out_device_path;

  # Header
  [ -z "${2}" ] && echo '';
  echo -e " \e[1;33moutsepdevcl:\e[0m Cleaning up sepolicy outputs for '${1}'";
  [ -z "${2}" ] && echo '';

  # Out path
  out_device_path=${OUT_DIR:-./out}/target/product/${1};

  # Delete relevant outputs
  rm -f "${out_device_path}/root/file_contexts"*;
  rm -f "${out_device_path}/root/"*"_contexts";
  rm -f "${out_device_path}/root/sepolicy";
  rm -f "${out_device_path}/combinedroot/file_contexts"*;
  rm -f "${out_device_path}/combinedroot/"*"_contexts";
  rm -f "${out_device_path}/combinedroot/sepolicy";
  rm -f "${out_device_path}/recovery/root/file_contexts"*;
  rm -f "${out_device_path}/recovery/root/"*"_contexts";
  rm -f "${out_device_path}/recovery/root/sepolicy";
  rm -f "${out_device_path}/system/etc/selinux/"*"_contexts";
  rm -f "${out_device_path}/system/etc/selinux/plat_sepolicy_and_mapping.sha256";
  rm -f "${out_device_path}/system/etc/selinux/plat_sepolicy.cil";
  rm -f "${out_device_path}/system/vendor/etc/selinux/"*"_contexts";
  rm -f "${out_device_path}/system/vendor/etc/selinux/plat_pub_versioned.cil";
  rm -f "${out_device_path}/system/vendor/etc/selinux/precompiled_sepolicy";
  rm -f "${out_device_path}/system/vendor/etc/selinux/precompiled_sepolicy.plat_sepolicy_and_mapping.sha256";
  rm -f "${out_device_path}/system/vendor/etc/selinux/precompiled_sepolicy.product_sepolicy_and_mapping.sha256";
  rm -f "${out_device_path}/system/vendor/etc/selinux/vendor_sepolicy.cil";
}

# === ROM Output System Cleaner ===
function outsystemdevcl()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: outsystemdevcl <devicename> [bool_minimal] (ROM output cleaner for system rebuilds)';
    echo '';
    return;
  fi;

  # Variables
  local out_device_path;

  # Header
  [ -z "${3}" ] && echo '';
  echo -e " \e[1;33moutsystemdevcl:\e[0m Cleaning up system outputs for '${1}'";
  [ -z "${3}" ] && echo '';

  # Out path
  out_device_path=${OUT_DIR:-./out}/target/product/${1};

  # Delete relevant outputs
  if [ -z "${2}" ]; then
    rm -rf "${out_device_path}/system";

  # Delete relevant outputs while keeping heavy ones
  elif [ -d "${out_device_path}/system" ]; then
    find "${out_device_path}/system" -type f \
        -not -name '*.apk' -and \
        -not -name '*.art' -and \
        -not -name '*.bmd' -and \
        -not -name '*.dat' -and \
        -not -name '*.fw' -and \
        -not -name '*.hyb' -and \
        -not -name '*.idc' -and \
        -not -name '*.jar' -and \
        -not -name '*.kcm' -and \
        -not -name '*.kl' -and \
        -not -name '*.lic.txt' -and \
        -not -name '*.oat' -and \
        -not -name '*.odex' -and \
        -not -name '*.ogg' -and \
        -not -name '*.otf' -and \
        -not -name '*.prof' -and \
        -not -name '*.rel' -and \
        -not -name '*.ttf' -and \
        -not -name '*.vdex' \
        -delete;
  fi;
}

# === ROM Output Product Cleaner ===
function outproductdevcl()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: outproductdevcl <devicename> (ROM product output cleaner for new builds)';
    echo '';
    return;
  fi;

  # Variables
  local out_path;

  # Header
  [ -z "${2}" ] && echo '';
  echo -e " \e[1;33moutproductdevcl:\e[0m Cleaning up product outputs for '${1}'";
  [ -z "${2}" ] && echo '';

  # Out path
  out_path=${OUT_DIR:-./out};

  # Delete relevant outputs
  rm -f "${out_path}/.kati_stamp-"*"${1}"*;
  rm -f "${out_path}/build-"*"${1}"*'.ninja';
  rm -f "${out_path}/ninja-"*"${1}"*'.sh';
  rm -f "${out_path}/env-"*"${1}"*'.sh';
  rm -f "${out_path}/combined-"*"${1}"*'.ninja';
  rm -rf "${out_path}/host/"*'/obj/EXECUTABLES/'*"${1}"*;
  rm -rf "${out_path}/host/"*'/bin/'*"${1}"*;
  rm -f "${out_path}/soong/Android-"*"${1}"*'.mk';
  rm -f "${out_path}/soong/make_vars-"*"${1}"*'.mk';
  rm -rf "${out_path}/target/product/${1}";
}

# === ROM Output Sepolicies Cleaner ===
function outcommoncl()
{
  # Usage: outcommoncl (ROM output cleaner for common rebuilds)

  # Header
  [ -z "${1}" ] && echo '';
  echo -e " \e[1;33moutcommoncl:\e[0m Cleaning up common outputs";
  [ -z "${1}" ] && echo '';

  # Delete build temporary outputs
  rm -rf './out/soong/.bootstrap';
  rm -rf './out/soong/.minibootstrap';
}
