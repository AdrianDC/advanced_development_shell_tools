#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Repo CCache Status/Setter ===
function repocache()
{
  # Usage
  if [ "${1}" = '--help' ]; then
    echo '';
    echo ' Usage: repocache [size_max/clean/reinit/wipe] (CCache watcher and configuration)';
    echo '';
    return;
  fi;

  # Variables
  local ccache_path;
  local currentdir;
  local max_size;

  # Access repo root
  currentdir=$(pwd);
  croot;

  # Validate CCache prebuilt binary
  ccache_path='./prebuilts/misc/linux-x86/ccache/ccache';
  if [ ! -f "${ccache_path}" ]; then
    ccache_path=$(which ccache);
  fi;

  # Validate CCache native binary
  if [ ! -f "${ccache_path}" ]; then
    echo '';
    echo -e ' \e[1;31mrepocache: ccache not installed...\e[0m';
    echo '';
    return;
  fi;

  # Clean CCache
  if [ "${1}" = 'clean' ]; then
    "${ccache_path}" -C;

  # Reinit CCache
  elif [ "${1}" = 'reinit' ]; then
    max_size=$(grep 'max_size' "${CCACHE_DIR}/ccache.conf" 2>/dev/null);
    if [ ! -z "${max_size}" ]; then

      # Acquire maxsize
      max_size=${max_size##*= };

      # Wipe while retaining ccache.conf
      mv -f "${CCACHE_DIR}/ccache.conf" "${CCACHE_DIR}/.ccache.conf";
      rm -rf "${CCACHE_DIR:?}/"*;
      mv -f "${CCACHE_DIR}/.ccache.conf" "${CCACHE_DIR}/ccache.conf";

      # Cleanup and reinit
      echo '';
      echo -en ' \e[1;33mrepocache:\e[0m ';
      "${ccache_path}" -M "${max_size}";
      echo '';
    fi;

    # Avoid study on reinit
    return;

  # Wipe CCache
  elif [ "${1}" = 'wipe' ]; then
    if [ ! -z "${CCACHE_DIR}" ]; then
      rm -rf "${CCACHE_DIR:?}/"*;
    fi;

  # Update the maximum on input (example 20G)
  elif [ ! -z "${1}" ]; then
    "${ccache_path}" -M "${1}";
  fi;

  # Study the CCache
  watch -n 1 -d "${ccache_path}" -s;

  # Restore path
  cd "${currentdir}/";
}
