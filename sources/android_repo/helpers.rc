#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Android gettop ===
function gettop()
{
  # Usage: gettop (Get repo root path)

  # Variables
  local CURDIR;
  local TOP;

  # Initialize variables
  CURDIR=${PWD};
  TOP=${CURDIR};

  # Access parent until found or root
  while [ ! -d '.repo' ] && [ ! "${PWD}" = '/' ]; do
    cd ../;
    TOP=$(PWD='' /bin/pwd -P);
  done;

  # Echo if path is valid
  cd "${CURDIR}";
  if [ -d "${TOP}/.repo" ]; then
    echo "${TOP}";
  fi;
}

# === Android croot ===
function croot()
{
  # Usage: croot (Access repo root path)

  # Variables
  local TOP;

  # Initialize variables
  TOP=$(gettop);

  # Access if valid
  if [ "${TOP}" ]; then
    cd "$(gettop)";
  else
    >&2 echo "Couldn't locate the top of the tree.  Try setting TOP.";
  fi;
}

# === Android Repo Environment Starter ===
function repos()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repos <device_name> (Prepare Android device environment)';
    echo '';
    return;
  fi;

  # Variables
  local currentdir=${PWD};
  local device=${1};
  local target;

  # Access repo root path
  croot >/dev/null;

  # Validate envsetup exists
  if [ ! -f ./build/envsetup.sh ]; then
    echo '';
    echo -e ' \e[1;31mError: Android Repo not found...\e[0m';
    echo '';
    cd "${currentdir}";
    return;
  fi;

  # Unset previous variables
  unset LINEAGE_BUILD;
  unset LINEAGE_DEVICES_ONLY;
  unset LINEAGE_FIXUP_COMMON_OUT;
  unset OUT_DIR;

  # Isolate out folders
  if [ -L ./out ] || [ ! -d ./out ]; then

    # Local isolated out folder
    if [ ! -L ./out -a ! -d ./out ] || readlink ./out | grep -q '^./'; then
      mkdir -p "./out-${device}/";
      rm -f ./out;
      export OUT_DIR;
      OUT_DIR=$(readlink -f "./out-${device}");

    # Override OUT for symlinks
    else
      export OUT_DIR;
      OUT_DIR=$(readlink -f './out');
    fi

  fi;

  # Unset CM/Lineage functions and load envsetup
  unset -f breakfast;
  unset -f brunch;
  source ./build/envsetup.sh; croot;

  # Open the lunch menu
  if [ "${device}" = 'lunch' ]; then
    lunch;

  # Prepare device environment for LineageOS
  elif type breakfast >/dev/null 2>&1; then
    export LINEAGE_FIXUP_COMMON_OUT=true;
    breakfast "${device}";

  # Prepare device environment for AOSP
  else
    target=$(codenametotarget "${device}");
    lunch "aosp_${target}-userdebug";
  fi;

  # Return to current folder
  cd "${currentdir}";
}

# === Roomservice Manifest ===
function reporoomserv()
{
  # Usage: reporoomserv (Manifest and local_manifests editor)

  # Variables
  local cwd;
  local files;
  local file_repopick;

  # Path handling
  cwd=$(pwd);
  croot;

  # Folder creation
  mkdir -p .repo/local_manifests/;

  # Files to open
  files=('.repo/local_manifests/roomservice.xml' '.repo/manifest.xml');

  # Untracked local_manifests
  if [ -f .repo/local_manifests/untracked.xml ]; then
    files+=('.repo/local_manifests/untracked.xml');
  fi;

  # Repopicks local_manifests
  file_repopick=$(readlink -f '.repo/local_manifests/roomservice.xml');
  file_repopick=${file_repopick%/*}/repopick-${file_repopick##*/};
  file_repopick=${file_repopick%.xml}.md;
  if [ -f "${file_repopick}" ]; then
    files+=("${file_repopick}");
  fi;

  # Manifest and local_manifests editor
  fileedit "${files[@]}";

  # Restore path
  cd "${cwd}";
}

# === Repo Sync Efficiently ===
function reposy()
{
  # Usage: reposy (Optimized relevant repo sync)

  # Optimized relevant repo sync
  repo sync -j"$(grep -c ^processor /proc/cpuinfo)" \
            --current-branch \
            --detach \
            --force-sync \
            --no-clone-bundle \
            --no-tags \
            "${@}";
}

# === Repo Sync and Rebase Efficiently ===
function reposyr()
{
  # Usage: reposyr (Optimized and rebased relevant repo sync)

  # Optimized and rebase relevant repo sync
  repo sync -j"$(grep -c ^processor /proc/cpuinfo)" \
            --current-branch \
            --no-tags \
            "${@}";
}

# === Repo Branch Sync with Safeguard ===
function reposysafe()
{
  # Usage: reposysafe (Safeguarded repo projects sync)

  # Variables
  local shtools_path;

  # Load shtools_path
  shtools_path=$(shtoolsget);

  # Safeguarded repo projects sync
  echo '';
  # shellcheck disable=SC2016
  repo forall -j"$(grep -c ^processor /proc/cpuinfo)" -c "
        is_git_valid=;
        git rev-parse --git-dir
        if git rev-parse --git-dir > /dev/null 2>&1; then
          is_git_valid=true;
        fi;
        if [ -z \"\${is_git_valid}\" ]; then
          source \"${shtools_path}/sources/android_repo/cleaners.rc\";
          source \"${shtools_path}/sources/android_repo/helpers.rc\";
          cd ./$(echo \"\$\{REPO_PATH\}\" | sed 's/[^\/]*/../g');
          rm -rf \"\$\{REPO_PATH\}\";
          echo -e \"\n \e[1;32mStarting: Project \${REPO_PROJECT} : \${REPO_REMOTE}/\${REPO_RREV##*/}\e[0m\n\";
          reposy \"\$\{REPO_PATH\}\";

        else
          false;
          while [ \${?} -ne 0 ]; do
            echo -e \"\n \e[1;33mFetch: Project \${REPO_PROJECT} : \${REPO_REMOTE}/\${REPO_RREV##*/}\e[0m\n\";
            timeout -k 20 20 git fetch --progress \"\${REPO_REMOTE}\" \"\${REPO_RREV##*/}\";
          done;
          if git add -N ./* && ! git diff-index --quiet HEAD -- || git am --abort >/dev/null 2>&1; then
            echo -e \"\n \e[1;32mCleaning: Project \${REPO_PROJECT} : \${REPO_REMOTE}/\${REPO_RREV##*/}\e[0m\n\";
            git reset HEAD --hard;
            git stash;
            git stash -u >/dev/null 2>&1;
            git am --abort;
          fi;
          echo -e \"\n \e[1;32mCheckout: Project \${REPO_PROJECT} : \${REPO_REMOTE}/\${REPO_RREV##*/}\e[0m\n\";
          if git rev-parse --git-dir > /dev/null 2>&1 || ! git checkout \"\${REPO_RREV##*/}\"; then
            source \"${shtools_path}/sources/android_repo/cleaners.rc\";
            source \"${shtools_path}/sources/android_repo/helpers.rc\";
            echo -e \"\n \e[1;32mRestarting: Project \${REPO_PROJECT} : \${REPO_REMOTE}/\${REPO_RREV##*/}\e[0m\n\";
            cd ./$(echo \"\$\{REPO_PATH\}\" | sed 's/[^\/]*/../g');
            reposyrm \"\${REPO_PATH}\";
          fi;
        fi;
        ";
  echo '';
}

# === Repo Branch Sync ===
function reposybranch()
{
  # Usage: reposybranch (Individual repo projects sync)

  # Individual repo projects sync
  echo '';
  # shellcheck disable=SC2016
  repo forall -c 'echo "";
                  echo " Project ${REPO_PROJECT} : ${REPO_REMOTE}/${REPO_RREV##*/}";
                  git fetch ${REPO_REMOTE} ${REPO_RREV##*/};
                  git checkout ${REPO_RREV##*/};';
  echo '';
}

# === Repo Prune ===
function repoprune()
{
  # Usage: repoprune (Apply repo-wide prune cleanup)

  # Apply repo-wide prune cleanup
  echo '';
  # shellcheck disable=SC2016
  repo forall -c 'tmpfile=$(mktemp);
                  echo "";
                  echo " Project ${REPO_PROJECT} : ${REPO_REMOTE}/${REPO_RREV##*/}\";
                  git prune HEAD 2> "${tmpfile}";
                  while read -r line; do
                    line=refs${line#*refs};
                    echo "  Removing ${line}";
                    rm -rf .git/\${line};
                  done < "${tmpfile}";
                  rm -f "${tmpfile}";
                  return;';
  echo '';
}

# === Repo Sync Clean ===
function reposycl()
{
  # Usage: reposycl (Cleaned optimized relevant repo sync)

  # Cleaned optimized relevant repo sync
  # shellcheck disable=SC2016
  repo forall -c 'echo "Cleaning project ${REPO_PROJECT}";
                  git rebase --abort >/dev/null 2>&1;
                  git stash >/dev/null 2>&1;
                  git stash -u >/dev/null 2>&1;
                  git reset --hard HEAD >/dev/null 2>&1;';
  repo sync -j"$(grep -c ^processor /proc/cpuinfo)" --current-branch --detach --force-sync --no-clone-bundle --no-tags;
}

# === Repo Foreach ===
function repoforeach()
{
  # Usage: repoforeach (Run commands for each project)

  # Variables
  local currentdir;
  local project_path;
  local repo_top;
  local tmp_list;

  # Get repo root
  currentdir=$(pwd);
  repo_top=$(gettop);

  # Run commands for each project
  tmp_list=$(mktemp);
  cat "${repo_top}/.repo/project.list" > "${tmp_list}";
  while read -r project_path; do
    echo '';
    echo " === ${project_path} ===";
    cd "${repo_top}/${project_path}";
    "${@}";
  done < "${tmp_list}";
  rm -f "${tmp_list}";

  # Restore path
  cd "${currentdir}/";
  echo '';
}

# === Repo List Exclude Search ===
function repolistexclude()
{
  # Usage: repolistexclude [word_to_search] (Get repo list fields to exclude with search)

  # List all fields
  echo '';
  if [ -z "${1}" ]; then
    repo list | sed 's/\(.*\) : \(.*\)/\2 [\1]/g' \
              | sort;

  # Get repo list fields to exclude with search
  else
    repo list | grep "${1}" \
              | sed 's/.* : \(.*\)/  <remove-project name="\1" \/>/g' \
              | sort;
  fi;
  echo '';
}
