#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Device Shortcuts ===
function cdd()
{
  # Usage: cdd <device_name> (Access device sources)

  # Variables
  local content;
  local project_item;
  local project_path;

  # Shortcut
  content=${1};
  if [ -z "${content}" ]; then
    content=$(repogetdevice);
  fi;

  # Path generation
  project_path=$(pwd | sed "s/\(.*\)Android\([^/]*\/[^/]*\).*/\1Android\2\/device\/*\/*${content}*/g");
  for project_item in ${project_path}; do
    if [ -d "${project_item}" ] && [[ ! "${project_item}" == *'generic'* ]] && [[ ! "${project_item}" == *'/qcom/'* ]]; then
      project_path=${project_item};
      break;
    fi;
  done;

  # Check path
  if [ ! -d "${project_path}" ]; then
    project_path=$(find ./*"${1}"* -type d -depth 0 2> /dev/null | head -n 1);
    if [ -z "${project_path}" ]; then
      echo " cdd: '${1}' not found...";
      return;
    fi;
  fi;

  # Access path
  cd "${project_path}";
}

# === Project Access ===
function cdp()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: cdp [project_name] (Access repo project sources)';
    echo '';
    return;
  fi;

  # Variables
  local cnt=0;
  local key;
  local project_path;
  local list_paths=('');
  local top;

  # Acquire repo path
  top=$(gettop);

  # Parse projects list to find first match
  while IFS= read -r project_path; do
    project_path=${project_path%/};
    if [[ "${project_path##*/}" == *"${1}"* ]]; then
      cnt=$((cnt + 1));
      list_paths+=("${project_path}");
    fi;
  done < "${top}/.repo/project.list";

  # Single input available
  if [ "${cnt}" -eq 0 ]; then
    echo '';
    echo -e " \e[1;37m[ Advanced Development Shell Tools - No project found ]\e[0m";
    echo '';

  # Single input available
  elif [ "${cnt}" -eq 1 ]; then
    cd "${top}/${list_paths[1]}";

  # Multiple inputs available
  else
    echo '';
    echo -e " \e[1;37m[ Advanced Development Shell Tools - Available project paths ]\e[0m";
    echo '';

    # Display paths menu
    cnt=0;
    for project_path in "${list_paths[@]}"; do
      if [ -z "${project_path}" ]; then
        continue;
      fi;
      cnt=$((cnt + 1));
      echo -e "  \e[1;33m${cnt}: \e[1;37m${project_path}\e[0m";
    done;
    echo '';

    # Request user input
    echo -n " > Path to select [1-${cnt}] : ";
    read -r key;
    echo '';

    # Access requested path
    cd "${top}/${list_paths[${key}]}";
  fi;
}

# === Repo Manifests ===
function cdman()
{
  # Usage: cdman (Access manifests path)

  # Variables
  local folder_path;

  # Access manifests path
  folder_path=$(pwd \
              | sed "s/\(.*\)Android\([^/]*\/[^/]*\).*/\1Android\2\/.repo\/manifests/g");
  mkdir -p "${folder_path}/";
  cd "${folder_path}/";
}

# === Repo Local Manifests ===
function cdlocman()
{
  # Usage: cdlocman (Access local manifests path)

  # Variables
  local folder_path;

  # Access local manifests path
  folder_path=$(pwd \
              | sed "s/\(.*\)Android\([^/]*\/[^/]*\).*/\1Android\2\/.repo\/local_manifests/g");
  mkdir -p "${folder_path}/";
  cd "${folder_path}/";
}

# === Repo Out Getter ===
function toout()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: toout <device_name> (Get device build output path)';
    echo '';
    return;
  fi;

  # Variables
  local device=${1};
  local outtargetpath;
  local outtargetpaths;

  # Get out target path
  outtargetpath=$(pwd | sed "s/\(.*\)Android\([^/]*\/[^/]*\).*/\1Android\2\/out*\/target\/product/g");

  # Path detection
  outtargetpaths=("${outtargetpath}/"*"${device}"*);
  if [ "${#outtargetpaths[@]}" -ne 1 ]; then
    outtargetpaths=("${outtargetpath}/"*);
  fi;

  # Return path result
  echo "${outtargetpaths[0]}";
}

# === Repo Out Access ===
function cdout()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: cdout [device_name] (Access device build output path)';
    echo '';
    return;
  fi;

  # Access out path
  cd "$(toout "${1}")";
}

# === Find Android Dev Drive ===
function getand()
{
  # Usage: getand (Get AndroidDev drive)

  # Variables
  local android_dev_dir=${PWD};

  # Parent navigation
  while [[ "${android_dev_dir}" != '/' && ! -d "${android_dev_dir}/Bash" ]]; do
    android_dev_dir=$(readlink -f "${android_dev_dir}/..");
  done;

  # Return Bash location
  if [ -d "${android_dev_dir}/Bash" ]; then
    echo "${android_dev_dir}";
  else
    echo "${ANDROID_DEV_DRIVE}";
  fi;
}

# === Repo ROM Shortcut ===
function torompaths()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: torompaths <rom_name> [device] (Get ROM device variant path)';
    echo '';
    return;
  fi;

  # Variables
  local android_dev_dir;
  local targets=();
  local target=;

  # AndroidDev access
  android_dev_dir=$(getand);

  # AndroidDev verification
  if [ -z "${android_dev_dir}" ]; then
    echo '';
    echo 'Android drive with "Bash" not found...';
    echo '';
    return;
  fi;

  # AndroidDev access
  if ! pwd | grep -q "${android_dev_dir}"; then
    cdand;
  fi;

  # AndroidDev escaping
  android_dev_dir=${android_dev_dir//\//\\\/};

  # ROM subpath
  if [ ! -z "${2}" ]; then
    for targets in $(pwd | sed "s/\(${android_dev_dir}\)\(\/[^/]*\(.*\)\|\)$/\1\/${1}-*${2}*\3/g"); do
      target=$(echo "${targets[*]}" | cut -f1 -d\ );
    done;
  fi;

  # ROM path
  if [ -z "${target}" ] || [ ! -d "${target}" ]; then
    target=$(pwd | sed "s/\(${android_dev_dir}\)\(\/[^/]*\(.*\)\|\)$/\1\/${1}\3/g");
    target=$(echo "${target}" | cut -f1 -d\ );
  fi;

  # Mismatching ROM path
  if [ -z "${target}" ] || [ ! -d "${target}" ]; then
    cdand;
    target=$(pwd | sed "s/\(${android_dev_dir}\)\(\/[^/]*\(.*\)\|\)$/\1\/${1}\3/g");
    target=$(echo "${target}" | cut -f1 -d\ );
  fi;

  # Return target
  readlink -f "${target}/";
}

# === Check Command for Path Changes ===
function pathchanged()
{
  # Usage: pathchanged <command> <parameters> (Run command and notify path changes)

  # Variables
  local current_path=${PWD};

  # Run input command
  "${@}";

  # Notify path differences
  [ "${current_path}" = "$(pwd)" ];
}

# === ROMs Shortcuts ===
function toaosp()       { torompaths 'AOSP' "${1}"; }
function tolineage()    { torompaths 'LineageOS' "${1}"; }
function cdaosp()       { cd "$(toaosp "${1}")"; }
function cdlineage()    { cd "$(tolineage "${1}")"; }

# === Private Shortcuts ===
function cdand()        { cd "$(getand)"; }
function cddev()        { cd "$(getand)/Development/${1}" 2> /dev/null; }
function cdprojects()   { cd "$(getand)/Projects/${1}"; }
function cdref()        { cd "$(getand)/References/${1}"; }
function cdrefapk()     { cd "$(getand)/References/apk"; }
function cdrefdev()     { cd "$(getand)/References/Devices/"${1:+*${1}}; }
function adbapks()      { cdrefapk; adbapkinstall; }
function cpaosp()       { cp -fv "./${1}" "$(toaosp "${2}")/${1}"; }
function cplineage()    { cp -fv "./${1}" "$(tolineage "${2}")/${1}"; }
function meldaosp()     { pathscompare "./${1}" "$(toaosp "${2}")/${1}"; }
function meldlineage()  { pathscompare "./${1}" "$(tolineage "${2}")/${1}"; }
function nout()         { diropen "$(toout "${1}")"; }
