#!/bin/bash
#
# Copyright 2015-2019 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Standalone Source Helper ===
# source <(curl -Ls1 https://github.com/AdrianDC/advanced_development_shell_tools/raw/master/sources/android_repo/changes.rc)

# === Repo Changes Logger ===
function repochanges()
{
  # Usage: repochanges [--local] ["filter_projects"] (Detect all repo projects differences)

  # Variables
  local filter_projects;
  local mode_local='';

  # Local mode
  if [ "${1}" = '--local' ]; then
    mode_local='true';
    shift;
  fi;

  # Project filters
  filter_projects=${1};

  # Diff execution
  echo '';
  echo -n '';
  printf '\r\033[K Scanning...';
  repo forall -j"$(grep -c ^processor /proc/cpuinfo)" -c "

     # Filter out projects
     if [ ! -z \"${filter_projects}\" ] && ! echo \"\${REPO_PATH}\" | grep -iq \"${filter_projects}\"; then
       printf \"\r\033[K Ignoring \${REPO_PROJECT} [\${REPO_REMOTE}/\${REPO_RREV##*/}] \";

     # Study projects
     else

       # Show and fetch projects
       printf \"\r\033[K Scanning \${REPO_PROJECT} [\${REPO_REMOTE}/\${REPO_RREV##*/}] \";
       git fetch --quiet \${REPO_REMOTE} \${REPO_RREV##*/};

       # Detect new remote commits
       changescount=\$(git rev-list --left-right HEAD...FETCH_HEAD | grep -c '^>');
       if [ -z '${mode_local}' ] && [ \${changescount} -ne 0 ]; then
         printf \"\r\033[K \033[32;1m[Project \${REPO_PROJECT}] \${changescount} remote updates\033[0m\";
         echo '';
         echo '';
         git --no-pager log --pretty=oneline --abbrev-commit --max-count=\${changescount} FETCH_HEAD;
         echo '';
       fi;

       # Detect local commits
       changescount=\$(git rev-list --left-right HEAD...FETCH_HEAD | grep -c '^<');
       if [ \${changescount} -ne 0 ]; then
         printf \"\r\033[K \033[33;1m[Project \${REPO_PROJECT}] \${changescount} local changes\033[0m\";
         echo '';
         echo '';
         git --no-pager log --pretty=oneline --abbrev-commit --max-count=\${changescount} HEAD;
         echo '';
       fi;

       # Detect local differences
       if [ \$(git diff --quiet; echo \${?}) -ne 0 ]; then
         printf \"\r\033[K \033[31;1m[Project \${REPO_PROJECT}] Unmerged differences\033[0m\";
         echo '';
         echo '';
         git --no-pager diff;
         echo '';
       fi;

     fi;
    " 2> /dev/null;

  # Done
  printf '\r\033[K';
  echo '';
  echo '';
}
