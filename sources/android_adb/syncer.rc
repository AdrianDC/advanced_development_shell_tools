#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === ADB Push Sync ===
function adbpushsync()
{
  # Usage
  if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo '';
    echo ' Usage: adbpushsync <local_path> <target_path> (Folders adb push syncer)';
    echo '';
    return;
  fi;

  # Variables
  local cur_path;
  local local_path=${1%/};
  local remote_path=${2%/};
  local local_folders;
  local local_files;
  local local_files_ls;
  local line;
  local line_esc;
  local file_size;
  local file_size_loc;

  # Initialize variables
  cur_path=$(pwd);
  local_folders=$(mktemp);
  local_files=$(mktemp);
  local_files_ls=$(mktemp);

  # Access local path
  cd "${local_path}";

  # Header
  echo '';
  echo " adbpushsync: Syncing '${local_path}' to '${remote_path}'";
  echo '';

  # List local folders
  find * -type d > "${local_folders}";

  # List target folders
  adb shell "cd '${remote_path}'; find * -type d | sort -r" | while read -r line; do
    echo -en "\r\033[K  Checking folder '${line}'";
    if [ -d "${line}" ]; then
      sed -i "\|^${line}|d" "${local_folders}";
    else

      # Delete additional folders
      echo -e "\r\033[K adbpushsync: Deleting target folder '${line}'";
      adb shell "rm -rf \"${remote_path}/${line}\"" >/dev/null 2>&1;

    fi;
  done;

  # Create missing remote folders
  while read -r line; do
    echo -e "\r\033[K adbpushsync: Creating target '${line}'";
    adb shell "mkdir -p \"${remote_path}/${line}\"";
  done < "${local_folders}";

  # List local files
  find ./* -type f > "${local_files}";
  find ./* -type f -exec ls -l {} \; > "${local_files_ls}";

  # List target files
  adb shell "cd '${remote_path}'; find * -type f" | while read -r line; do
    echo -en "\r\033[K  Checking file '${line}'";
    line_esc=${line//\&/\\\&};
    line_esc=${line_esc//\//\\\/};
    line_esc=${line_esc//\[/\\\[};
    line_esc=${line_esc//\]/\\\]};
    file_size=$(grep "${line_esc}" "${local_files_ls}" 2> /dev/null | cut -d' ' -f5);
    # shellcheck disable=SC2012
    file_size_loc=$(ls -l "${line}" 2> /dev/null | cut -d' ' -f5);
    if [ -e "${line}" ] && [ "${file_size}" -eq "${file_size_loc}" ]; then
      sed -i "\|^./${line_esc}|d" "${local_files}";
    else

      # Delete additional files
      echo -e "\r\033[K adbpushsync: Deleting target file '${line}' (${file_size} / ${file_size_loc:-Not local})";
      adb shell "rm -rf \"${remote_path}/${line}\"" >/dev/null 2>&1;

    fi;
  done;

  # Push missing remote files
  while read -r line; do
    echo -e "\r\033[K adbpushsync: Pushing to target '${line}'";
    echo -n '  ';
    adb push "${line}" "${remote_path}/${line}";
  done < "${local_files}";

  # Delete temporary files
  rm -f "${local_files}";
  rm -f "${local_files_ls}";
  rm -f "${local_folders}";

  # Restore current path
  cd "${cur_path}";
  echo -e '\r\033[K adbpushsync: Sync done';
  echo '';
}

# === ADB Pull Apks ===
function adbpullapks()
{
  # Usage: adbpullapks (Pull all installed apks through adb)

  # Variables
  local currentdir=${PWD};
  local device_apk_entry;
  local device_apk_path;
  local device_apk_name;
  local tmp_grep;

  # Access references apk folder
  cdrefapk;
  echo '';

  # Pull all packages installed on the device
  tmp_grep=$(mktemp);
  adb shell pm list packages -f \
      | grep ':/data/' \
      | cut -d':' -f2- \
      > "${tmp_grep}";
  while read -r device_apk_entry; do

    # Get package name and path
    device_apk_name=${device_apk_entry#*.apk=};
    device_apk_path=${device_apk_entry%.apk=*};

    # Pull package apk
    echo " adbapksync: Pulling and saving: ${device_apk_name}.apk";
    adb pull "${device_apk_path}.apk" "${device_apk_name}.apk" 2>/dev/null;

  done < "${tmp_grep}";
  rm -f "${tmp_grep}";

  # Restore current path
  cd "${currentdir}/";
  echo '';
}
