#!/bin/bash
#
# Copyright 2015-2018 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Standalone Source Helper ===
# source <(curl -Ls https://github.com/AdrianDC/android_development_shell_tools/raw/master/sources/android_adb/syncer.rc)

# === ADB Push Sync ===
function adbpushsync()
{
  # Usage
  if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo '';
    echo ' Usage: adbpushsync <local_path> <target_path> (Folders adb push syncer)';
    echo '';
    return;
  fi;

  # Variables
  local cur_path;
  local local_path=${1};
  local remote_path=${2};
  local local_folders;
  local local_files;
  local local_files_ls;
  local line;
  local line_esc;
  local file_size;
  local file_size_loc;

  # Initialize variables
  cur_path=$(pwd);
  local_folders=$(mktemp);
  local_files=$(mktemp);
  local_files_ls=$(mktemp);

  # Access local path
  cd "${local_path}";

  # Header
  echo '';
  echo " adbpushsync: Syncing '${local_path}' to '${remote_path}'";
  echo '';

  # List local folders
  find ./* -type d > "${local_folders}";

  # List target folders
  adb shell "cd '${remote_path}'; find * -type d | sort -r" | while read -r line; do
    echo -en "\r\033[K  Checking folder '${line}'";
    if [ -d "${line}" ]; then
      sed -i "/^${line}/d" "${local_folders}";
    else

      # Delete additional folders
      echo -e "\r\033[K adbpushsync: Deleting target folder '${line}'";
      adb shell "rm -rf \"${remote_path}/${line}\"";

    fi;
  done;

  # Create missing remote folders
  while read -r line; do
    echo -e "\r\033[K adbpushsync: Creating target '${line}'";
    adb shell "mkdir \"${remote_path}/${line}\"";
  done < "${local_folders}";

  # List local files
  find ./* -type f > "${local_files}";
  find ./* -type f -exec ls -l {} \; > "${local_files_ls}";

  # List target files
  adb shell "cd '${remote_path}'; find * -type f" | while read -r line; do
    echo -en "\r\033[K  Checking file '${line}'";
    line_esc=${line//\&/\\\&};
    line_esc=${line_esc//\//\\\/};
    file_size=$(grep "${line}" "${local_files_ls}" 2> /dev/null | cut -d' ' -f2);
    # shellcheck disable=SC2012
    file_size_loc=$(ls -l "${line}" 2> /dev/null | cut -d' ' -f2);
    if [ -e "${line}" ] && [ "${file_size}" -eq "${file_size_loc}" ]; then
      sed -i "/^${line_esc}/d" "${local_files}";
    else

      # Delete additional files
      echo -e "\r\033[K adbpushsync: Deleting target file '${line}' (${file_size} / ${file_size_loc:-Not local})";
      adb shell "rm -rf \"${remote_path}/${line}\"";

    fi;
  done;

  # Push missing remote files
  while read -r line; do
    echo -e "\r\033[K adbpushsync: Pushing to target '${line}'";
    echo -n '  ';
    adb push "${line}" "${remote_path}/${line}";
  done < "${local_files}";

  # Delete temporary files
  rm -f "${local_files}";
  rm -f "${local_files_ls}";
  rm -f "${local_folders}";

  # Restore current path
  cd "${cur_path}";
  echo -e '\r\033[K adbpushsync: Sync done';
  echo '';
}

# === ADB Apk Sync ===
function adbapksync()
{
  # Usage: adbapksync ( Extract all installed apks from a device through adb)

  # Varibles
  local currentdir=${PWD};

  # Change path to refapk
  cdrefapk;

  # Get list of packages installed on the device
  my_apks=($(adb shell pm list packages -f | grep "data" | awk -F "[/:-]" '{print $5}'));
  echo " adbapksync: Getting list of packages";
  echo '';

  # Pull all packages installed on the device
  for element in "${my_apks[@]}"; do

    # Get packages installed path
    my_path=$(adb shell pm path ${element} | awk -F ":" '{print $2}');

    # Pull the apk
    adb pull "${my_path}" 2> /dev/null;

    # Rename the base.apk to original package name
    mv base.apk "${element}.apk";
    echo " adbapksync: Pulling & Saving: ${element}.apk";
  done;

  # Restore current path
  cd "${currentdir}/";
}

# === ADB File / Dir Sync ===
function adbsync()
{
  # Usage
  if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo '';
    echo ' Usage: adbsync <local_path> <remote_path> [twoway](Folders & Files adb push syncer)';
    echo '';
    return;
  fi;

  # Variables
  local local_path=${1};
  local remote_path=${2};
  local params=${3};
  local currentdir=${PWD};
  IFS='';

  # Header
  echo '';
  echo " adbsync: Syncing \"${local_path}\" to \"${remote_path}\"";

  if [[ "${params}" == *'twoway'* ]]; then

    # List local folders for pulling
    cd "${local_path}/";
    find * -type d > /tmp/local_folders;

    # List remote folders
    adb shell "cd \"${remote_path}\"; find * -type d;" > /tmp/remote_folders;

    # Sort local & remote folders for comparison
    sort /tmp/local_folders -o /tmp/local_folders;
    sort /tmp/remote_folders -o /tmp/remote_folders;

    # Create pull folders
    touch /tmp/pull_folders;

    # Diff local & remote Folders
    diff /tmp/local_folders /tmp/remote_folders | grep ">" | awk -F "> " '{print$2}' > /tmp/pull_folders;

    echo '';
    # Create folders locally
    while read folder; do
      mkdir -p "${local_path}/${folder}";
      echo " adbsync: Pulled \"${local_path}/${folder}\"";
    done < /tmp/pull_folders;

    # Remove temporary files
    rm -rf /tmp/local_folders;
    rm -rf /tmp/remote_folders;
    rm -rf /tmp/pull_folders;

    # List local files for pushing
    cd "${local_path}/";
    find * -type f -exec stat --printf='%s %n\n' {} + > /tmp/local_files;

    # List remote files
    adb shell "cd \"${remote_path}\"; find * -type f -exec stat -c '%s %n' {} +;" > /tmp/remote_files;

    # Sort local & remote folders for comparison
    sort /tmp/local_files -o /tmp/local_files;
    sort /tmp/remote_files -o /tmp/remote_files;

    # Create pull folders
    touch /tmp/pull_files;

    # Diff local & remote files
    diff /tmp/local_files /tmp/remote_files | grep ">" | cut -f3- -d " " > /tmp/pull_files;

    echo '';
    # Create files locally
    while read files; do
      adb pull -a "${remote_path}/${files}" "${local_path}/${files}" 2> /dev/null;
      echo " adbsync: Pulled \"${remote_path}/${files}\"";
    done < /tmp/pull_files;

    # Remove temporary files
    rm -rf /tmp/local_files;
    rm -rf /tmp/remote_files;
    rm -rf /tmp/pull_files;

  fi;

  # List local folders for pushing
  cd "${local_path}/";
  find * -type d > /tmp/local_folders;

  # List remote folders
  adb shell "cd \"${remote_path}\"; find * -type d;" > /tmp/remote_folders;

  # Sort local & remote folders for comparison
  sort /tmp/local_folders -o /tmp/local_folders;
  sort /tmp/remote_folders -o /tmp/remote_folders;

  # Diff local & remote Folders
  diff /tmp/local_folders /tmp/remote_folders | grep "<" | awk -F "< " '{print$2}' > /tmp/push_folders;

  echo '';
  # Create folders remotely
  while read folder; do
    adb shell mkdir -p "${remote_path}/${folder}";
    echo " adbsync: Created \"${remote_path}/${folder}\"";
  done < /tmp/push_folders;

  # Remove temporary files
  rm -rf /tmp/local_folders;
  rm -rf /tmp/remote_folders;
  rm -rf /tmp/push_folders;

  # List local folders for removing
  cd "${local_path}/";
  find * -type d > /tmp/local_folders;

  # List remote folders
  adb shell "cd \"${remote_path}\"; find * -type d;" > /tmp/remote_folders;

  # Sort local & remote folders for comparison
  sort /tmp/local_folders -o /tmp/local_folders;
  sort /tmp/remote_folders -o /tmp/remote_folders;

  # Diff local & remote Folders
  diff /tmp/local_folders /tmp/remote_folders | grep ">" | awk -F "> " '{print$2}' > /tmp/remove_folders;

  # Remove folders remotely
  while read folder; do
    adb shell rm -rf "${remote_path}/${folder}";
    echo " adbsync: Removed \"${remote_path}/${folder}\"";
  done < /tmp/remove_folders;

  # Remove temporary files
  rm -rf /tmp/local_folders;
  rm -rf /tmp/remote_folders;
  rm -rf /tmp/remove_folders;

  # List local files for pushing
  cd "${local_path}/";
  find * -type f -exec stat --printf='%s %n\n' {} + > /tmp/local_files;

  # List remote files
  adb shell "cd \"${remote_path}\"; find * -type f -exec stat -c '%s %n' {} +;" > /tmp/remote_files;

  # Sort local & remote folders for comparison
  sort /tmp/local_files -o /tmp/local_files;
  sort /tmp/remote_files -o /tmp/remote_files;

  # Diff local & remote files
  diff /tmp/local_files /tmp/remote_files | grep "<" | cut -f3- -d " " > /tmp/push_files;

  echo '';
  # Create files remotely
  while read files; do
    adb push "${local_path}/${files}" "${remote_path}/${files}" 2> /dev/null;
    echo " adbsync: Pushed \"${remote_path}/${files}\"";
  done < /tmp/push_files;

  # Remove temporary files
  rm -rf /tmp/local_files;
  rm -rf /tmp/remote_files;
  rm -rf /tmp/push_files;

  # List local files for removing
  cd "${local_path}/";
  find * -type f -exec stat --printf='%s %n\n' {} +> /tmp/local_files;

  # List remote files
  adb shell "cd \"${remote_path}\"; find * -type f -exec stat -c '%s %n' {} +;" > /tmp/remote_files;

  # Sort local & remote folders for comparison
  sort /tmp/local_files -o /tmp/local_files;
  sort /tmp/remote_files -o /tmp/remote_files;

  # Diff local & remote files
  diff /tmp/local_files /tmp/remote_files | grep ">" | cut -f3- -d " " > /tmp/remove_files;

  # Remove files remotely
  while read files; do
    adb shell rm -rf "${remote_path}/${files}";
    echo " adbsync: Removed \"${remote_path}/${files}\"";
  done < /tmp/remove_files;

  # Remove temporary files
  rm -rf /tmp/local_files;
  rm -rf /tmp/remote_files;
  rm -rf /tmp/remove_files;

  # Restore current path
  cd "${currentdir}/";
}
