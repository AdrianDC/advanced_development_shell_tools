#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === ADB File Pusher ===
function adbpushfile()
{
  # Usage
  if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo '';
    echo ' Usage: adbpushfile <file_path> <file_target> (Push files through adb)';
    echo '';
    return;
  fi;

  # Variables
  local filepath=${1};
  local filetarget=${2};
  local filedir;

  # Append file name to paths
  if [ "${filetarget: -1}" = '/' ]; then
    filetarget="${filetarget}${filepath##*/}";
  fi;

  # Debug target file
  echo -e "\e[1;36m # ${filetarget}";
  echo -en '\e[1;33m | ';
  adb shell "ls -l '${filetarget}'";

  # Push file to target
  if [ -f "${filepath}" ]; then
    echo -en '\e[1;32m | ';
    adb push "${filepath}" "${filetarget}";

  # Create symlink on target
  elif [ -L "${filepath}" ]; then
    filedir=$(dirname "${filetarget}");
    filepath=$(readlink "${filepath}");
    echo -en '\e[1;32m | ';
    adb shell "mkdir -p '${filedir}'";
    adb shell "ln -fs '${filepath}' '${filetarget}'";
    adb shell "ls -l '${filetarget}'" | tr -s ' ' | cut -d' ' -f 9-;

  # Delete missing file
  else
    echo -en "\e[1;31m | Removing '${filetarget}' : ";
    adb shell "if [ -f '${filetarget}' ]; then rm '${filetarget}'; echo 'Done.'; else echo 'No such file on the target...'; fi;";
  fi;

  # Restore colours
  echo -e '\e[0m';
}

# === ADB Rooted File Pusher ===
function adbpu()
{
  # Usage: adbpu <file_path> <file_target> (Push files through rooted adb)

  # Push files through rooted adb
  adbro;
  adbpushfile "${@}";
}

# === ADB System File Listener / Installer ===
function adbif()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbif <command...> (Android modules build and install)';
    echo '';
    return;
  fi;

  # Variables
  local packages_arr=();
  local packages_res='';
  local repo_top;
  local ret;
  local tmp_file;
  local tmp_installs;

  # Execute input command
  tmp_file=$(mktemp);
  "${@}" | tee "${tmp_file}";
  ret=${PIPESTATUS[0]};

  # Find installed files
  repo_top=$(gettop 2> /dev/null);
  tmp_installs=$(grep -aoh '[^ ]*target/product/[^\/]*/system[^ ]*\|[^ ]*target/product/[^\/]*/root/[^ ]*' "${tmp_file}" \
               | sort \
               | uniq);

  # List installed files
  for file_path in ${tmp_installs[*]}; do
    if [[ ! "${file_path}" == *'/system.img' ]] &&
        [[ "${file_path}" == *'/system'* ]] &&
        [[ ! "${file_path}" == *'/NOTICE_FILES'* ]] ||
        [[ "${file_path}" == *'/root/'* ]]; then
      file_path=$(echo -n "${file_path}" | tail -1 \
                | sed 's/\x1B\[[0-9;]*[JKmsu]//g');
      if [ ! -f "${file_path}" ]; then
        file_path="${repo_top}/${file_path}";
      fi;
      if [ -f "${file_path}" ]; then
        packages_arr+=("${file_path}");
        packages_res+="${file_path} ";
      fi;
    fi;
  done;

  # Prepare public PACKAGES_RESULTS
  export PACKAGES_RESULTS="${packages_res}";

  # Push installed files
  if [ "${ret}" -eq 0 ]; then
    adbpf "${packages_arr[@]}";

  # Cleanup incomplete files
  else
    echo -e ' \e[1;31m-----------------------------------------------------------------------------';
    grep -i 'error:' "${tmp_file}";
    echo -e ' \e[1;31m-----------------------------------------------------------------------------\e[0m';
    rm -f "${packages_arr[@]}";
  fi;

  # End of process
  rm -f "${tmp_file}";
  echo '';

  # Result
  return "${ret}";
}

# === ADB System File Listener / Lister ===
function adbil()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbil <command...> (Modules build listener and lister)';
    echo '';
    return;
  fi;

  # Variables
  local packages_arr=();
  local packages_res='';
  local tmp_file;
  local tmp_installs;

  # Execute input command
  tmp_file=$(mktemp);
  "${@}" | tee "${tmp_file}";
  ret=${PIPESTATUS[0]};

  # Header
  echo '';

  # Find installed files
  tmp_installs=$(grep -aoh '[^ ]*target/product/[^\/]*/system[^ ]*\|[^ ]*target/product/[^\/]*/root/[^ ]*' "${tmp_file}" \
               | sort \
               | uniq);

  # List installed files
  for file_path in ${tmp_installs[*]}; do
    if [[ ! "${file_path}" == *'/system.img' ]] &&
        [[ "${file_path}" == *'/system'* ]] &&
        [[ ! "${file_path}" == *'/NOTICE_FILES'* ]] ||
        [[ "${file_path}" == *'/root/'* ]]; then
      file_path=$(echo -n "${file_path}" | tail -1 \
                | sed 's/\x1B\[[0-9;]*[JKmsu]//g');
      if [ ! -f "${file_path}" ] && [ ! "${file_path:0:1}" = '/' ]; then
        file_path=$(gettop)/${file_path};
      fi;
      if [ -f "${file_path}" ]; then
        packages_arr+=("${file_path}");
        packages_res+="${file_path} ";

        # List installed files
        if [ "${ret}" -eq 0 ]; then
          echo -e " \e[1;36m${file_path}\e[0m";
        fi;
      fi;
    fi;
  done;

  # Prepare public PACKAGES_RESULTS
  export PACKAGES_RESULTS="${packages_res}";

  # Cleanup incomplete files
  if [ "${ret}" -ne 0 ]; then
    echo -e ' \e[1;31m-----------------------------------------------------------------------------';
    grep -i 'error:' "${tmp_file}";
    echo -e ' \e[1;31m-----------------------------------------------------------------------------\e[0m';
    rm -f "${packages_arr[@]}";
  fi;

  # End of process
  rm -f "${tmp_file}";
  echo '';

  # Result
  return "${ret}";
}

# === ADB File Installer Helpers ===
function adbi()
{
  # Usage: adbi <command...> (Android modules build and rooted install)

  # Android modules build and rooted install
  adbro;
  adbif "${@}";
}

# === ADB File Pusher ===
function adbpf()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbpf <file_paths> (Advanced recursive adb files pusher)';
    echo '';
    return;
  fi;

  # Variables
  local filepath='';
  local filepathext='';
  local filepathtest='';
  local filetarget='';
  local systemprefix='';

  # Detect system in system structure
  if adb shell 'test -d /system/system; echo "${?}"' | grep -q '^0$'; then
    systemprefix='/system';
  elif adb shell 'test -d /mnt/system; echo "${?}"' | grep -q '^0$'; then
    systemprefix='/mnt/system';
  fi;

  # Input files
  if [ -z "${recursive_call}" ]; then
    echo '';
  fi;
  for filepath in "${@}"; do

    # Extract full paths
    if [ -L "$(pwd)/${filepath}" ]; then
      filepath=$(pwd)/${filepath};
    elif [ -L "${filepath}" ]; then
      filepath=${filepath};
    elif [ -e "${filepath}" ]; then
      filepath=$(readlink -f "${filepath}");
    fi;
    filepathtest=${filepath};
    filepathext=${filepathtest##*.};

    # Iterate sub-folders
    if [ -d "${filepath}" ]; then
      recursive_call=true;
      adbpf "${filepath}/"*;
      recursive_call=;

    # Handle files
    else

      # Detect file targets
      if [ "${filepathext}" = 'mk' ] || [ "${filepathext}" = 'py' ]; then
        continue;
      fi;
      if [[ "${filepathtest}" == *'proprietary/'* ]]; then
        filetarget=$(echo -n "${filepathtest}" | sed "s/.*proprietary\/\(.*\)/\/system\/\1/g");
        filepathtest=${filetarget};
      fi;
      if [[ "${filepathtest}" == *'vendor/'* ]]; then
        filetarget=$(echo -n "${filepathtest}" | sed "s/.*vendor\/\(.*\)/\/system\/vendor\/\1/g");
        filepathtest=${filetarget};
      fi;
      if [[ "${filepathtest}" == *'configs/'* ]]; then
        filetarget=$(echo -n "${filepathtest}" | sed "s/.*configs\/\(.*\)/\/system\/etc\/\1/g");
        filepathtest=${filetarget};
      fi;
      if [[ "${filepathtest}" == *'system/'* ]]; then
        filetarget=$(echo -n "${filepathtest}" | sed "s/.*\(system\/.*\)/\/\1/g");
        filepathtest=${filetarget};
      fi;
      if [[ "${filepathtest}" == *'/root/'* ]]; then
        filetarget=$(echo -n "${filepathtest}" | sed "s/.*\/root\/\(.*\)/\/\1/g");
        filepathtest=${filetarget};
      fi;
      if [[ "${filepathtest}" == "${filepath}" ]]; then
        if [[ "${filepathtest}" == *'.xml'* ]] || [[ "${filepathtest}" == *'.conf'* ]]; then
          filetarget=/system/etc/$(basename "${filepath}");
        elif [[ "${filepathtest}" == *'.so'* ]]; then
          filetarget=/system/lib/$(basename "${filepath}");
        else
          filetarget=$(echo -n "${filepath}" | sed "s/.*\(system.*\)/\/\1/g");
        fi;
      fi;

      # System prefix
      if [ "${filetarget:0:8}" = '/system/' ] && [ ! -z "${systemprefix}" ]; then
        filetarget="${systemprefix}${filetarget}";
      fi;

      # Push file
      adbpushfile "${filepath}" "${filetarget}";
    fi;
  done;
}

# === ADB Rooted File Pusher ===
function adbp()
{
  # Usage: adbp (Advanced recursive rooted adb files pusher)

  # Advanced recursive rooted adb files pusher
  adbro;
  adbpf "${@}";
}

# === ADB Packages Results Pusher ===
function adbppr()
{
  # Usage: adbppr (adb automated PACKAGES_RESULTS files pusher)

  # Variables
  local result;
  local results=();

  # Parse PACKAGES_RESULTS string to array
  for result in ${PACKAGES_RESULTS}; do
    results+=("${result}");
  done;

  # adb automated PACKAGES_RESULTS files pusher
  adbro;
  adbpf "${results[@]}";
}

# === ADB Sideload Helper ===
function adbside()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbside <file_zip> [boot_reboot] (adb sideload helper)';
    echo '';
    return;
  fi;

  # Variables
  local adb_cmd;
  local rebooted=;

  # Verify adb is ready
  adbready;

  # Initialize adb
  echo '';
  adb_cmd=$(adbcmd);
  ${adb_cmd} devices;

  # Reboot to recovery if needed
  if ! timeout -k 2 2 sh -c "${adb_cmd} devices | grep -q 'recovery\|sideload'" 2> /dev/null; then
    echo -e ' \e[1;33madbside: \e[1;37mRebooting to recovery\e[0m';
    ${adb_cmd} reboot recovery;
    rebooted=true;
  fi;

  # Wait for an adb recovery
  while true; do
    if timeout -k .5 .5 sh -c "${adb_cmd} devices | grep -q 'recovery\|sideload'" 2> /dev/null; then
      break;
    fi;
    echo -e ' \e[1;33madbside: \e[1;37mWaiting for recovery or sideload\e[0m';
    sleep 2;
  done;

  # Wait for an adb sideload
  while true; do
    if timeout -k .5 .5 sh -c "${adb_cmd} devices | grep -q 'sideload'" 2> /dev/null; then
      break;
    fi;

    # Start twrp sideload
    echo -e ' \e[1;33madbside: \e[1;37mWaiting for sideload\e[0m';
    ${adb_cmd} shell twrp sideload 2> /dev/null;
    sleep 2;
  done;

  # Sideload the file
  ${adb_cmd} sideload "${1}";

  # Wait for an adb recovery
  while true; do
    if timeout -k .5 .5 sh -c "${adb_cmd} devices | grep -q 'recovery\|unauthorized'" 2> /dev/null; then
      break;
    fi;
    echo -e ' \e[1;33madbside: \e[1;37mWaiting for recovery\e[0m';
    sleep 2;
  done;

  # Reboot to Android if requested or forced reboot to recovery
  if [ -z "${2}" ] && [ -z "${rebooted}" ] || [ "${2}" = 'false' ]; then
    echo -e ' \e[1;33madbside: \e[1;37mStaying in recovery\e[0m';
  else
    echo -e ' \e[1;33madbside: \e[1;37mRebooting to Android\e[0m';
    ${adb_cmd} reboot;
  fi;
  echo '';
}

# === ADB Sideload ROM with Addons Helper ===
function adbsiderom()
{
  # Usage
  if [ -z "${1}" ] || [ ! -f "${1}" ]; then
    echo '';
    echo ' Usage: adbsiderom <rom_zip_or_bootimage> <device> [boot_no_reboot] (adb sideload ROM with addons helper)';
    echo '';
    return;
  fi;

  # Variables
  local file_input=${1};
  local device=${2};
  local no_reboot=${3};
  local addons_path=${ADVANCED_DEVELOPMENT_SHELL_TOOLS_WORKSPACE:-${HOME}}/.bash_android.rom.addons;
  local name;
  local target_old;

  # Detect missing device input automatically
  if [ -z "${device}" ]; then
    file_input=$(readlink -f "${file_input}");
    for name in $(cd "${addons_path}/"; echo ''*); do
      if [[ "${file_input}" == *"${name}"* ]]; then
        device=${name};
        break;
      fi;
    done;
  fi;

  # Device not identified, present usage
  if [ -z "${device}" ]; then
    adbsiderom '';
    return;
  fi;

  # ROM addons folder
  if [ ! -d "${addons_path}/${device}" ]; then
    mkdir "${addons_path}";
    mkdir "${addons_path}/${device}";
    echo '';
    echo -e " \e[1;33madbsiderom: \e[1;37mFill the '${addons_path}/${device}/' folder with zip Addons to flash after the ROM zip\e[0m";
    diropen "${addons_path}/${device}";
    echo '';
    echo -n ' adbsiderom: Press [Enter] to continue... ';
    read -r;
  fi;

  # Launch adbside with ROM zip
  if [ "${file_input: -4}" = '.zip' ]; then
    echo '';
    echo -e " \e[1;33madbsiderom: \e[1;32mFlashing '$(basename "${file_input}")' [${device}]\e[0m";
    adbside "${file_input}" false;

  # Launch adbbootpush with bootimage img
  elif [ "${file_input: -4}" = '.img' ]; then
    echo '';
    echo -e " \e[1;33madbsiderom: \e[1;32mPushing '$(basename "${file_input}")' bootimage [${device}]\e[0m";
    target_old=${TARGET_PRODUCT};
    export TARGET_PRODUCT=rom_${device};
    adbbootpush "${file_input}";
    export TARGET_PRODUCT=${target_old};
    echo '';
  fi;

  # Launch adbside for addons zip files
  for file in "${addons_path}/${device}/"*'.zip'; do
    echo -e " \e[1;33madbsiderom: \e[1;32mFlashing '$(basename "${file}")' [${device}]\e[0m";
    adbside "${file}" false;
  done;

  # Reboot to Android if requested
  if [ -z "${no_reboot}" ]; then
    echo -e ' \e[1;33madbsiderom: \e[1;37mRebooting to Android\e[0m';
    $(adbcmd) shell reboot;
    echo '';
  fi;
}

# === ADB Wipe Helper ===
function adbwipe()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbwipe <data/system/cache/all> [boot_reboot] (adb wipe helper)';
    echo '';
    return;
  fi;

  # Variables
  local adb_cmd;
  local rebooted=;

  # Verify adb is ready
  adbready;

  # Initialize adb
  echo '';
  adb_cmd=$(adbcmd);
  ${adb_cmd} devices;

  # Reboot to recovery if needed
  if ! timeout -k 2 2 sh -c "${adb_cmd} devices | grep -q 'recovery'" 2> /dev/null; then
    echo -e ' \e[1;33madbwipdata: \e[1;37mRebooting to recovery\e[0m';
    ${adb_cmd} reboot recovery;
    rebooted=true;
  fi;

  # Wait for an adb recovery
  while true; do
    if timeout -k .5 .5 sh -c "${adb_cmd} devices | grep -q 'recovery'" 2> /dev/null; then
      break;
    fi;
    echo -e ' \e[1;33madbwipdata: \e[1;37mWaiting for recovery\e[0m';
    sleep 2;
  done;

  # Perform twrp wipe
  echo -e ' \e[1;33madbwipdata: \e[1;37mWipping data...\e[0m';
  echo '';
  if [ "${1}" = 'all' ] || [ "${1}" = 'system' ]; then
    ${adb_cmd} shell twrp wipe system 2>/dev/null;
    sleep 1;
  fi;
  if [ "${1}" = 'cache' ]; then
    ${adb_cmd} shell twrp wipe cache 2>/dev/null;
    sleep 1;
  fi;
  if [ "${1}" = 'all' ] || [ "${1}" = 'data' ]; then
    ${adb_cmd} shell twrp format data 2>/dev/null;
    sleep 1;
  fi;
  echo '';

  # Wait for an adb recovery
  while true; do
    if timeout -k .5 .5 sh -c "${adb_cmd} devices | grep -q 'recovery\|unauthorized'" 2> /dev/null; then
      break;
    fi;
    echo -e ' \e[1;33madbwipdata: \e[1;37mWaiting for recovery\e[0m';
    sleep 2;
  done;

  # Reboot to Android if requested or forced reboot to recovery
  if [ -z "${2}" ] && [ -z "${rebooted}" ] || [ "${2}" = 'false' ]; then
    echo -e ' \e[1;33madbwipdata: \e[1;37mStaying in recovery\e[0m';
  else
    echo -e ' \e[1;33madbwipdata: \e[1;37mRebooting to Android\e[0m';
    ${adb_cmd} reboot;
  fi;
  echo '';
}

# === ADB File Pusher and Installer ===
function adbpi()
{
  # Usage
  if [ -z "${1}" ] || [ ! -f "${1}" ]; then
    echo '';
    echo ' Usage: adbpi <file_path> (Automated file pusher and installer)';
    echo '';
    return;
  fi;

  # Variables
  local apkname;
  local filepath;
  local filetarget;

  # Set variables
  filepath=$(readlink -f "${1}");

  # Acquire root access
  sudo echo -n '';
  adbro;

  # Detect /system/ file
  if [[ "${filepath}" == *'/system/'* ]]; then

    # Push file to device
    echo '';
    filetarget=/system/${filepath#*/system/};
    adbpushfile "${filepath}" "${filetarget}";

    # Optimize .apk application
    if [ "${filetarget: -4}" = '.apk' ]; then
      apkname=$(aapt d xmltree "${filepath}" AndroidManifest.xml | grep -i 'package=');
      apkname=${apkname#*$'"'};
      apkname=${apkname%%$'"'*};
      if [ ! -z "${apkname}" ]; then
        adbu "${apkname}";
      else
        echo '';
      fi;
    fi;

  # Failed detection
  else
    echo '';
    echo " adbpi: '${filepath}' could not be handled";
    echo '';
  fi;
}

# === ADB Force Optimization ===
function adbu()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbu <package_name_or_file> (Force optimization of a package)';
    echo '';
    return;
  fi;

  # Variables
  local package=${1};
  local pid;

  # Parse input .apk file
  if [ -f "${package}" ] && [ "${package: -4}" = '.apk' ]; then
    package=$(aapt d xmltree "${package}" AndroidManifest.xml | grep -i 'package=');
    package=${package#*$'"'};
    package=${package%%$'"'*};
  fi;

  # Debug target file
  echo '';
  echo -e "\e[1;36m # '${package}' optimization";

  # Optimize application
  echo -en '\e[1;33m | Package optimizing... ';
  adbsu "pm force-dex-opt '${package}'";
  echo -e '\e[1;32mDone';

  # Killing application
  echo -en '\e[1;33m | Killing application... ';
  adbsu "pkill '${package}'";
  pid=$(adbsu 'ps' | grep "${package}" | awk '{ print $2 }');
  if [ -z "${pid}" ]; then
    pid=$(adbsu 'ps -A' | grep "${package}" | awk '{ print $2 }');
  fi;
  if [ ! -z "${pid}" ]; then
    adbsu "kill '${pid}'" > /dev/null;
  fi;
  echo -e '\e[1;32mDone';

  # Restore colours
  echo -e '\e[0m';
}

# === ADB Git Commit Pusher ===
function adbgitpf()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbgitpf <commit_sha1> (Push files through adb from commit)';
    echo '';
    return;
  fi;

  # Variables
  local file_path;
  local tmpfile;

  # Push files through adb from commit
  adbro;
  tmpfile=$(mktemp);
  git diff-tree --no-commit-id --name-status -r "${1}" >"${tmpfile}";
  while read -r line; do
    file_path=$(git rev-parse --show-toplevel)/$(echo "${line}" | awk '{ print $2 }');
    if [[ "${file_path}" == *'.mk'* ]]; then
      continue;
    fi;
    adbpf "${file_path}";
  done < "${tmpfile}";
  rm -f "${tmpfile}";
}

# === MultiROM Development File Pusher ===
function adbpmrom()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbpmrom <file> (MultiROM development file pusher)';
    echo '';
    return;
  fi;

  # Variables
  local filepath=${1};
  local filetarget;

  # Target file selection
  if [ ! -z "${2}" ]; then
    filetarget=/sdcard/multirom/${2}/${1};
  else
    filetarget=/sdcard/multirom/${1};
  fi;

  # Push file
  adbpushfile "${filepath}" "${filetarget}";
}

# === MultiROM Encryption File Pusher ===
function adbpmromenc()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbpmromenc <file> (MultiROM development encryption file pusher)';
    echo '';
    return;
  fi;

  # MultiROM encryption file pusher
  adbpmrom "${1}" enc;
}

# === ADB apk Installers ===
function adbapkinstall()
{
  # Usage: adbapkinstall (Install available apk files from current path)

  # Install all available apk files
  for file in *.apk; do
    echo "-- ${file} --";
    adb install -r "${file}";
  done;
}
