#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Git Branch Pusher ===
function gitbranchpusher()
{
  # Usage: gitbranchpusher [y/n/d/s] [remote_url] [branch] (Push to project specific branch)

  # Variables
  local project_dir;
  local repo_dir;
  local param_send=${1};
  local remote=${2};
  local project_branch=${3};
  local push_command;
  local remote_branch;
  local remote_head;
  local remote_name;
  local shallow_count;

  # Get project path
  project_dir=$(git rev-parse --show-toplevel 2>/dev/null);
  if [ -z "${project_dir}" ] || [ ! -d "${project_dir}" ]; then
    echo '';
    echo ' gitbranchpusher: Current project was not found...';
    echo '';
    return;
  fi;

  # Get repository path
  repo_dir=$(gettop);
  if [ -z "${repo_dir}" ] || [ ! -d "${repo_dir}" ]; then
    echo '';
    echo ' gitbranchpusher: Repository was not found';
    echo '';
    return;
  fi;

  # Project target
  project_dir=${project_dir#${repo_dir}/};
  if [ -z "${project_branch}" ]; then
    project_branch=${project_dir//\//_};
  fi;

  # Special branches
  if [ "${project_branch}" = '.repo_manifests' ]; then
    project_branch='repo_manifests';
  fi;

  # Target remote
  if [ -z "${remote}" ] && [ -f "$(gettop)/.repo/local_manifests/roomservice.xml" ]; then
    remote=$(grep --color=never "Project: '" "$(gettop)/.repo/local_manifests/roomservice.xml" \
           | sed "s/.* '\(.*\)' .*/\1/");
    if [ ! -z "${remote}" ]; then
      remote=${remote#* };
      remote=${remote% *};
    fi;
  fi;

  # Failed to detect target remote
  if [ -z "${remote}" ]; then
    echo '';
    echo -e " \e[1;31mgitbranchpusher: \e[1;37mProject url not provided by roomservice.xml\e[0m";
    echo '';
    return;
  fi;

  # Status information
  echo '';
  echo -e " \e[1;32mProject directory:\e[0m ${project_dir}";
  echo -e " \e[1;33mRepository path:\e[0m ${repo_dir}";
  echo -e " \e[1;37mTarget remote:\e[0m ${remote}";
  echo '';

  # Fetch existing remote branch
  if git fetch "${remote}" "${project_branch}" 2>/dev/null; then

    # Present diff statistics
    echo '';
    echo -e ' \e[1;31mSources content differences:\e[0m';
    git --no-pager diff --stat HEAD FETCH_HEAD;

    # Fetch until history base match
    remote_head=$(cut -f1 .git/FETCH_HEAD);
    if [ ! -z "${remote_head}" ] && ! git merge-base HEAD FETCH_HEAD >/dev/null; then
      echo '';
      shallow_count=0;
      remote_name=$(gitgetreporemote);
      remote_branch=$(gitgetrepobranch "${remote_name}");
      while ! git merge-base HEAD FETCH_HEAD >/dev/null; do
        shallow_count=$((shallow_count + 10));
        echo -en "\r\033[K \e[1;33mSearching common history with depth ${shallow_count}...\e[0m";
        git fetch --depth "${shallow_count}" "${remote}" "${project_branch}" >/dev/null 2>&1;
        git fetch --depth "${shallow_count}" "${remote_name}" "${remote_branch}" >/dev/null 2>&1;
      done;
      echo '';
    fi;

    # Present commits counts
    echo '';
    echo -en ' \e[1;33mgitstat: \e[1;37mLocal commits:\e[1;33m ';
    git rev-list --left-right HEAD...FETCH_HEAD | grep -c '^<' | xargs echo -n;
    echo -en ' \e[1;37m| Upstream commits:\e[1;33m ';
    git rev-list --left-right HEAD...FETCH_HEAD | grep -c '^>';
    echo -e '\e[0m';

  # Missing remote branch
  else

    # Present missing branch information
    echo -e " \e[1;31mError: Remote branch '${project_branch}' was not found...\e[0m";
    echo -e " \e[1;33mWarning: \e[1;37mPushing will create a new '${project_branch}' branch\e[0m";
    echo '';

  fi;

  # Push command
  push_command="git push -f ${remote} HEAD:refs/heads/${project_branch}";

  # Confirmation
  echo -en " \e[1;33mgitbranchpusher: \e[1;37m${push_command} [y/N/d/s] ?\e[0m ";
  if [ -z "${param_send}" ]; then
    notify-send "gitbranchpusher: Push ${project_dir} ?" 2> /dev/null;
    read -r -t 20 key;
  else
    key=${param_send};
    echo "${key}";
  fi;

  # Staging command
  if [ "${key}" = 's' ] || [ "${key}" = 'S' ]; then
    push_command="git push -f ${remote} HEAD:refs/heads/staging/${project_branch}";
    key='y';
  fi;

  # Delete command
  if [ "${key}" = 'd' ] || [ "${key}" = 'D' ]; then
    push_command="git push -f ${remote} :refs/heads/${project_branch}";
    key='y';
  fi;

  # Upload to remote
  if [ "${key}" = 'y' ] || [ "${key}" = 'Y' ]; then
    echo '';
    ${push_command};
  elif [ "${key}" = 'n' ] || [ "${key}" = 'N' ]; then
    echo -e ' \e[1;33mgitbranchpusher: \e[1;37mUpload ignored, consider uploading later...';
  else
    echo '';
    echo -e ' \e[1;33mgitbranchpusher: \e[1;37mUpload ignored after timeout, consider uploading later...';
  fi;
  echo '';
}

# === Android Project Paths ===
function androidprojectpaths()
{
  # Usage
  if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo '';
    echo ' Usage: androidprojectpaths <owner> <project_name> (Android project remote paths list)';
    echo '';
    return;
  fi;

  # Variables
  local paths_regex;

  # Android project remote paths list
  paths_regex=$(git ls-remote --heads "https://github.com/${1}/${2}.git" \
                  2> /dev/null \
              | sed 's/.*refs\/heads\///' \
              | grep -v 'local_manifests' \
              | sed 's/^\(.*\)$/\^\1\$\\\|/g' \
              | sed 's/_/[\/_]/g' \
              | tr -d '\n');
  paths_regex=${paths_regex%\\\|};

  # Detect available project paths
  if [ ! -z "${paths_regex}" ]; then
    grep --color=never "${paths_regex}" "$(gettop)/.repo/project.list";
  fi;
}

# === Android Project Patcher ===
function androidprojectpatcher()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: androidprojectpatcher <owner> <project_name> <email> [specific_path] (Android project patcher)';
    echo '';
    return 1;
  fi;

  # Variables
  local project_owner=${1};
  local project_name=${2};
  local project_email=${3};
  local project_specific_inputs=("${@:4}");
  local android_top;
  local project_count;
  local project_index;
  local project_path;
  local project_paths=();
  local project_repopick_file;
  local project_repopick_tag;
  local currentdir=${PWD};
  local result_buffer;
  local result_command;
  local result_repopick;
  local tmp_buffer;
  local tmp_list;
  local tmp_repopick;

  # ==========================================================
  # Load Android tools
  if [ -z "$(type -t hmm)" ]; then
    while [ ! -e './build/envsetup.sh' ]; do
      cd ../;
    done;
    source ./build/envsetup.sh;
    cd "${currentdir}/";
  fi;

  # ==========================================================
  # Detect projet repopick list
  project_repopick_file=$(mktemp);
  if [[ "${project_specific_inputs[0]}" == 'http'* ]]; then
    curl -fLs "${project_specific_inputs[0]}" > "${project_repopick_file}";
    project_specific_inputs=();
  else
    pushd "$(gettop)/.repo/manifests/" >/dev/null;
    project_repopick_tag=$(repo info . 2>&1 \
                         | grep -i --color=never 'Manifest branch:' \
                         | head -n 1\
                         | sed 's/.*: \(refs\/heads\/\|refs\/tags\/\|\)\(.*\)/\2/' \
                         | cut -d'-' -f2);
    popd >/dev/null;
    project_repopick_tag="repopick-lineage-sony8960-${project_repopick_tag}.md";
    curl -fLs "https://github.com/${project_owner}/${project_name}/raw/local_manifests/${project_repopick_tag}?date=$(date +%s)" > "${project_repopick_file}";
  fi;

  # Automated repopick list execution
  if [ -f "${project_repopick_file}" ]; then

    # Validate repopick availability
    if [ -z "$(type -t repopick)" ]; then
      while [ ! -e './build/envsetup.sh' ]; do
        cd ../;
      done;
      source ./build/envsetup.sh;
      cd "${currentdir}/";
    fi;

    # Run each repopick
    tmp_buffer=$(mktemp);
    while read -r tmp_repopick; do
      tmp_repopick=${tmp_repopick%;};
      echo '';
      echo -e " \e[1;37m=== [Repopick] ${tmp_repopick} ===\e[0m";
      echo '';
      eval "${tmp_repopick}" 2>&1 | tee -a "${tmp_buffer}";
    done < <(grep '^repopick' "${project_repopick_file}");

    # Validate repopick statuses
    if grep -aiq 'MERGED\|ABANDONED\|ERROR:\|: HTTP Error ' "${tmp_buffer}"; then
      echo '';
      echo -e ' \e[1;31m=== [Repopick] Errors detected ===\e[0m';

      # Repopick status outputs
      result_buffer=$(mktemp);
      grep -ai -B1 'MERGED\|ABANDONED\|ERROR:\|: HTTP Error ' "${tmp_buffer}" | sed 's/\.\.\.//g' \
          > "${result_buffer}";
      echo -e '\e[1;31m';
      cat "${result_buffer}";
      echo -en '\e[0m';
      echo '';
      echo -e "\e[1;37m Result stored in:\e[0m ${result_buffer}";
      echo '';

      # Repopick updates assistant
      result_command="sed -n 's/^Applying change number \(.*\)/\1/p' ${result_buffer} | xargs -n1 -I {} sed -i '/ {}/d'";
      result_repopick=$(find "$(getand)/Development/" -name "${project_repopick_tag}" -print -quit 2>/dev/null);
      if [ -z "${result_repopick}" ]; then
        result_repopick='<repopick_file>';
      fi;
      result_command="${result_command} ${result_repopick}";
      echo -e "\e[1;37m Repopick updates:\e[0m ${result_command}";
      echo '';
    fi;
    rm -f "${tmp_buffer}";
  fi;

  # Cleanup project repopick list
  rm -f "${project_repopick_file}";

  # ==========================================================
  # Automated key shortcut
  local key_input=;
  local key_automated_patch=;
  local key_automated_push=;
  if [[ "${project_specific_inputs[*]}" == 'a' ]] || \
      [[ "${project_specific_inputs[*]}" == 'y' ]] || \
      [[ "${project_specific_inputs[*]}" == 'n' ]]; then
    key_input=${project_specific_inputs[*]};
    project_specific_inputs=();
  fi;

  # ==========================================================
  # Detect '--sync' input
  if [ "${project_specific_inputs[*]}" = '--sync' ]; then
    androidprojectsync "${project_owner}" "${project_name}";
    return;
  fi;

  # ==========================================================
  # Detect '--ungraft' input
  if [ "${project_specific_inputs[*]}" = '--ungraft' ]; then
    androidprojectungraft "${project_owner}" "${project_name}";
    return;
  fi;

  # ==========================================================
  # Detect '--unshallow' input
  if [ "${project_specific_inputs[*]}" = '--unshallow' ]; then
    androidprojectunshallow "${project_owner}" "${project_name}";
    return;
  fi;

  # ==========================================================
  # Detect '--list' input
  if [ "${project_specific_inputs[*]}" = '--list' ]; then
    androidprojectpaths "${project_owner}" "${project_name}";
    return;
  fi;

  # ==========================================================
  # Detect '--foreach' input
  if [ "${project_specific_inputs[0]}" = '--foreach' ]; then
    androidprojectforeach "${project_owner}" "${project_name}" "${project_specific_inputs[@]:1}";
    return;
  fi;

  # ==========================================================
  # Extract specific projects paths
  if [ ! -z "${project_specific_inputs[*]}" ]; then
    android_top=$(gettop);
    for project_path in "${project_specific_inputs[@]}"; do
      project_path=$(readlink -f "${project_path}");
      project_paths+=("${project_path#${android_top}/}");
    done;
  fi;

  # Automated remote changes list detection
  if [ -z "${project_paths[*]}" ]; then
    tmp_list=$(mktemp);
    androidprojectpaths "${project_owner}" "${project_name}" > "${tmp_list}";
    mapfile -t project_paths < "${tmp_list}";
    rm -f "${tmp_list}";
  fi;

  # Array dimensions
  project_count=${#project_paths[@]};
  project_index=0;

  # ==========================================================
  # Repo root
  croot;

  # ==========================================================
  # Variables
  local commits_list=();
  local commits_result;
  local commits_todo;
  local git_revs_count_local;
  local git_revs_count_remote;
  local git_revs_count_remote_show;
  local project_branch;
  local project_github;
  local project_path;
  local remote_branch;
  local remote_marked;
  local remote_name;
  local shallow_count;
  local user_is_owner='';

  # Check current user rights
  if [ "$(git config --global user.email | tr -d "\'")" = "${project_email}" ]; then
    user_is_owner='true';
  fi;

  # Projects loader
  for project_path in "${project_paths[@]}"; do

    # Project selection
    project_path=${project_path%/};
    project_branch=${project_path//\//_};
    project_index=$((project_index + 1));
    echo '';
    echo -e " \e[1;37m=== [${project_index}/${project_count}] ${project_path} [${project_branch}] ===\e[0m";
    echo '';
    croot;

    # Ignore missing git projects
    if [ ! -d "${project_path}/.git" ]; then
      echo '  .git project not found, ignoring...';
      continue;
    fi;
    cd "${project_path}/";

    # Targets selection
    project_github="https://github.com/${project_owner}/${project_name}.git";

    # Fetch
    if ! git fetch "${project_github}" "${project_branch}"; then
      echo 'Remote project branch not found, ignoring...';
      continue;
    fi;

    # Detect patches marked projects
    if git log --committer='marker.commit' --reverse --format=format:%H FETCH_HEAD | grep -q '.'; then
      remote_marked='true';
    else
      remote_marked='';
    fi;

    # Fetch until history base match
    if ! git merge-base HEAD FETCH_HEAD >/dev/null && [ -z "${remote_marked}" ]; then
      echo '';
      shallow_count=0;
      remote_name=$(gitgetreporemote);
      remote_branch=$(gitgetrepobranch "${remote_name}");
      while ! git merge-base HEAD FETCH_HEAD >/dev/null; do
        shallow_count=$((shallow_count + 10));
        echo -en "\r\033[K  \e[1;33m> Searching common history with depth ${shallow_count}...\e[0m";
        git fetch --depth "${shallow_count}" "${remote_name}" "${remote_branch}" >/dev/null 2>&1;
        git fetch --depth "${shallow_count}" "${project_github}" "${project_branch}" >/dev/null 2>&1;
      done;
      echo '';
    fi;

    # Compare
    if [ ! -z "${remote_marked}" ]; then
      git_revs_count_local=0;
      git_revs_count_remote=$(git log --committer="radian.dc@gmail.com" --committer='marker.commit' --format=format:%H:%ae FETCH_HEAD | sed '/marker.commit/Q' | wc -l);
    else
      git_revs_count_local=$(git rev-list --left-right HEAD...FETCH_HEAD | grep -c '^<');
      git_revs_count_remote=$(git rev-list --left-right HEAD...FETCH_HEAD | grep -c '^>');
    fi;
    echo '';
    if [ ! -z "${git_revs_count_local}" ] && [ "${git_revs_count_local}" -eq 0 ]; then
      echo -e "  \e[1;32m> Differences: ${git_revs_count_local} ${git_revs_count_remote}\e[0m";
    else
      echo -e "  \e[1;31m> Differences: ${git_revs_count_local} ${git_revs_count_remote}\e[0m";
    fi;
    echo '';

    # Warn about projects without patches
    if [ "${git_revs_count_local}" -eq 0 ] && [ "${git_revs_count_remote}" -eq 0 ]; then
      echo -e "  \e[1;31m< No project patches detected...\e[0m";
      echo '';
    fi;

    # List patcher commits
    if [ "${git_revs_count_remote}" -ne 0 ]; then
      git_revs_count_remote_show=${git_revs_count_remote};
      if [ "${git_revs_count_remote_show}" -gt 200 ]; then
        git_revs_count_remote_show=200;
      fi;
      git --no-pager log --pretty=oneline --abbrev-commit -n "${git_revs_count_remote_show}" FETCH_HEAD;
      echo '';
    fi;

    # Handle unupdated projects
    if [ "${git_revs_count_local}" -ne 0 ] && [ "${git_revs_count_remote}" -ne 0 ]; then
      echo -e '  \e[1;37m> Commands: Y (Rebase on local history)';
      echo -e '              n (Use the remote project history)';
      echo -e '              i (Ignore this project'\''s sources)';
      if [ ! -z "${user_is_owner}" ] && [ -z "${remote_marked}" ]; then
        echo -e '              a (Automatically update all projects)';
      fi;
      echo -e '              l (Automatically patch all projects)';
      if [ ! -z "${user_is_owner}" ] && [ -z "${remote_marked}" ]; then
        echo -e '              p (Push local changes upstream)';
      fi;
      echo '';
      echo -en '  \e[1;33m> Choice to patch and update the project ? \e[0m';
      if [ -z "${key_input}" ]; then
        read -r -t 20 key;
      else
        key=${key_input};
        echo "${key}";
      fi;
      echo '';

      # Adapt patcher to key input
      if [ -z "${key}" ]; then
        key_input=;
        key_automated_patch=y;
        key_automated_push=;
      elif [ "${key}" = 'a' ] || [ "${key}" = 'A' ]; then
        key_input=a;
        key_automated_patch=y;
        key_automated_push=y;
      elif [ "${key}" = 'n' ] || [ "${key}" = 'N' ]; then
        key_input=;
        key_automated_patch=n;
        key_automated_push=n;
      elif [ "${key}" = 'i' ] || [ "${key}" = 'I' ]; then
        key_input=;
        key_automated_patch=i;
        key_automated_push=;
      elif [ "${key}" = 'l' ] || [ "${key}" = 'L' ]; then
        key_input=l;
        key_automated_patch=y;
        key_automated_push=n;
      elif [ "${key}" = 'p' ] || [ "${key}" = 'P' ]; then
        key_input=;
        key_automated_patch=n;
        key_automated_push=y;
      elif [ "${key}" = 'y' ] || [ "${key}" = 'Y' ]; then
        key_input=;
        key_automated_patch=y;
        key_automated_push=;
      fi;

      # Rebase the tree
      if [ "${key_automated_patch}" = 'y' ]; then

        # Abort last cherry-pick
        echo '';
        git cherry-pick --abort &> /dev/null;

        # Detect commits to pick - Detect own updated project
        readarray -t commits_list <<< "$(git log --committer="${project_email}" --committer='marker.commit' --reverse --format=format:%H HEAD)";
        if [ -z "${commits_list[*]}" ]; then

          # Detect commits to pick - Detect own cherry-picked commits
          readarray -t commits_list <<< "$(git log --committer="${project_email}" --committer='marker.commit' --reverse --format=format:%H FETCH_HEAD)";

        # Detect commits to pick - Detect own cherry-picked additional commits in an own updated project
        else
          readarray -t commits_list <<< "$(git log --format=format:'%H|%ce' FETCH_HEAD \
                                         | sed "s/|${project_email}//g" \
                                         | sed '/|/q' \
                                         | sed 's/|marker.commit//' \
                                         | sed '/|.*/d' \
                                         | tac)";
          if [ -z "${commits_list[*]}" ] || [ "${#commits_list[@]}" -gt "${git_revs_count_remote}" ]; then

            # Detect commits to pick - Detect own cherry-picked commits based on commits delta
            readarray -t commits_list <<< "$(git rev-list --reverse FETCH_HEAD~"${git_revs_count_remote}"..FETCH_HEAD)";

          fi;
        fi;

        # Pick all commits
        for sha1 in "${commits_list[@]}"; do
          git cherry-pick "${sha1}";
          commits_result=${?};

          # Failed update
          if [ ${commits_result} -ne 0 ] && [ ${commits_result} -ne 1 ] || ! git diff-index --ignore-submodules --quiet HEAD --; then
            commits_todo=${commits_list[*]};
            commits_todo=${commits_todo#*${sha1}};
            echo '';
            echo -e '  \e[1;31m< Automatic update failed...';
            echo "     Tried to add following commits: ${sha1} ${commits_todo}";
            echo -e '  \e[1;33m> Manually fix then push with :\e[0m';
            echo "     gitbranchpusher '${key_automated_patch}' '${project_github}' '${project_branch}';";
            echo '';
            commits_todo="git cherry-pick ${sha1} ${commits_todo}";
            ${commits_todo} 2>/dev/null;
            return 1;
          fi;

          # Detect marker commits and tag them
          if git --no-pager log -1 --pretty=format:"%ae" "${sha1}" | grep -q 'marker.commit'; then
            GIT_EDITOR="sed -i '/^#/d'" git commit --allow-empty;
            gitcamarker;
          fi;

        done;

        # Automatic push
        if [ ! -z "${user_is_owner}" ] && [ -z "${remote_marked}" ]; then
          gitbranchpusher "${key_automated_push}" "${project_github}" "${project_branch}";
        fi;

      # Only push the project
      elif [ "${key_automated_push}" = 'y' ]; then

        # Automatic push
        if [ ! -z "${user_is_owner}" ] && [ -z "${remote_marked}" ]; then
          gitbranchpusher "${key_automated_push}" "${project_github}" "${project_branch}";
        fi;

      # Project is ready to use
      elif [ ! "${key_automated_patch}" = 'i' ]; then
        git reset --hard FETCH_HEAD;
        gitsu;
      fi;

    # Handle unupdated remotes
    elif [ "${git_revs_count_local}" -ne 0 ]; then

      # Automatic push
      if [ ! -z "${user_is_owner}" ] && [ -z "${remote_marked}" ]; then
        gitbranchpusher "${key_automated_push}" "${project_github}" "${project_branch}";
      fi;

    # Project is ready to use
    else
      git reset --hard FETCH_HEAD;
      gitsu;
    fi;

  done;

  # ==========================================================
  # Return to current folder
  echo '';
  cd "${currentdir}";
  return 0;
}

# === Android Project Rebaser ===
function androidprojectrebaser()
{
  # Usage
  if [ -z "${1}" ] || [ -z "${3}" ]; then
    echo '';
    echo ' Usage: androidprojectrebaser <owner> <project_branch> <"project_paths::name::upstream::branch"> [specific_path] (Android project rebaser)';
    echo '';
    return;
  fi;

  # Variables
  local projects_owner=${1};
  local projects_branch=${2};
  local projects_paths=${3};
  local project_specific_inputs=("${@:4}");
  local android_top;
  local currentdir=${PWD};
  local project_path;
  local projects_specific=;

  # Automated key shortcut
  local key_automated=;
  if [[ "${projects_specific}" == 'y' ]] || [[ "${projects_specific}" == 'n' ]]; then
    key_automated=${projects_specific};
    projects_specific=;
  fi;

  # ==========================================================
  # Extract specific projects paths
  if [ ! -z "${project_specific_inputs[*]}" ]; then
    android_top=$(gettop);
    for project_path in "${project_specific_inputs[@]}"; do
      project_path=$(readlink -f "${project_path}");
      projects_specific="${projects_specific} ${project_path#${android_top}/}";
    done;
  fi;

  # Repo root
  if [ -z "$(type -t hmm)" ]; then
    while [ ! -e './build/envsetup.sh' ]; do
      cd ../;
    done;
    source ./build/envsetup.sh;
  fi;
  croot;

  # ==========================================================
  # Variables
  local commits_result;
  local git_revs_count_local;
  local git_revs_count_remote;
  local project_branch;
  local project_name;
  local project_path;
  local project_github;
  local project_upstream;
  local push_branch=${projects_branch};
  local push_command;
  local remote_branch;
  local remote_name;
  local shallow_count;

  # Projects loader
  for project in ${projects_paths}; do

    # Project string parsing
    project_path=${project%%::*};
    project_name=${project#*::};
    project_upstream=${project_name#*::};
    project_branch=${project_upstream#*::};
    project_name=${project_name%%::*};
    project_upstream=${project_upstream%%::*};

    # Jump to specific project
    if [ ! -z "${projects_specific}" ]; then
      if [[ ! "${projects_specific}" == *"${project_path%/}"* ]]; then
        continue;
      fi;
    fi;

    # Append upstream project name if needed
    if [ "${project_upstream: -1}" = '/' ]; then
      project_upstream=${project_upstream}${project_name};
    fi;

    # Without a branch as input, align with upstream
    if [ -z "${projects_branch}" ]; then
      push_branch=${project_branch};

    # Without a branch on project, use branch input
    elif [ -z "${project_branch}" ]; then
      project_branch=${projects_branch};
      push_branch=${projects_branch};
    fi;

    # Project introduction
    echo '';
    echo -e " \e[1;37m=== ${project_path} [${project_upstream} @${project_branch}] ===\e[0m";
    echo '';
    croot;

    # Ignore non-git projects
    if [ ! -d "${project_path}/.git" ]; then
      echo '  .git project not found, ignoring...';
      continue;
    fi;
    cd "${project_path}/";

    # Prepend GitHub if needed
    if [[ ! "${project_upstream}" = *'://'* ]]; then
      project_upstream="https://github.com/${project_upstream}";
    fi;

    # Targets selection
    project_github="https://github.com/${projects_owner}/${project_name}";

    # Fetch
    if ! git fetch "${project_upstream}" "${push_branch}"; then
      echo 'Remote project branch not found, ignoring...';
      continue;
    fi;

    # Fetch until history base match
    if ! git merge-base HEAD FETCH_HEAD >/dev/null; then
      echo '';
      shallow_count=0;
      remote_name=$(gitgetreporemote);
      remote_branch=$(gitgetrepobranch "${remote_name}");
      while ! git merge-base HEAD FETCH_HEAD >/dev/null; do
        shallow_count=$((shallow_count + 10));
        echo -en "\r\033[K  \e[1;33m> Searching common history with depth ${shallow_count}...\e[0m";
        git fetch --depth "${shallow_count}" "${remote_name}" "${remote_branch}" >/dev/null 2>&1;
        git fetch --depth "${shallow_count}" "${project_upstream}" "${push_branch}" >/dev/null 2>&1;
      done;
      echo '';
    fi;

    # Compare
    git_revs_count_local=$(git rev-list --left-right HEAD...FETCH_HEAD | grep -c '^<');
    git_revs_count_remote=$(git rev-list --left-right HEAD...FETCH_HEAD | grep -c '^>');
    echo '';
    if [ "${git_revs_count_remote}" -eq 0 ]; then
      echo -e "  \e[1;32m> Differences: ${git_revs_count_local} ${git_revs_count_remote}\e[0m";
    else
      echo -e "  \e[1;31m> Differences: ${git_revs_count_local} ${git_revs_count_remote}\e[0m";
    fi;
    echo '';

    # Warn about projects without patches
    if [ "${git_revs_count_local}" -eq 0 ] && [ "${git_revs_count_remote}" -eq 0 ]; then
      echo -e "  \e[1;33m< No project differences detected...\e[0m";
      echo '';
    fi;

    # Handle unupdated projects
    if [ "${git_revs_count_remote}" -ne 0 ]; then
      echo -e '  \e[1;37m> Commands: Y (Rebase on new changes)';
      echo -e '              n (Keep the current project sources)';
      echo -e '              a (Automatically rebase all projects)';
      echo -e '              l (Only preview all differences)';
      echo '';
      echo -en '  \e[1;33m> Choice to rebase the project ? \e[0m';
      if [ -z "${key_automated}" ]; then
        read -r -t 20 key;
        if [ "${key}" = 'a' ] || [ "${key}" = 'A' ]; then
          key_automated=y;
        elif [ "${key}" = 'l' ] || [ "${key}" = 'L' ]; then
          key=n;
          key_automated=n;
        fi;
      else
        key=${key_automated};
        echo "${key}";
      fi;

      # Rebase the tree
      if [ ! "${key}" = 'n' ] && [ ! "${key}" = 'N' ]; then
        echo '';
        git rebase --abort;
        git rebase FETCH_HEAD;
        commits_result=${?};

        # Build push command
        push_command="git push -f https://github.com/${projects_owner}/${project_name} HEAD:refs/heads/${push_branch}";

        # Failed rebase
        if [ ${commits_result} -ne 0 ] || ! git diff-index --ignore-submodules --quiet HEAD --; then
          echo '';
          echo -e '  \e[1;31m< Automatic rebase failed...';
          echo -e '  \e[1;33m> Manually fix then push with :\e[0m';
          echo "     ${push_command};";
          echo '';
          return 1;
        fi;

        # Push the tree
        push_command="git push -f https://github.com/${projects_owner}/${project_name} HEAD:refs/heads/${push_branch}";
        echo '';
        echo -en "  \e[1;33m> androidprojectrebaser: ${push_command} [y/a/N] ?\e[0m ";
        notify-send "androidprojectrebaser: Push ${project_path} ?" 2> /dev/null;
        if [ -z "${key_automated}" ]; then
          read -r -t 20 key;
          if [ "${key}" = 'a' ] || [ "${key}" = 'A' ]; then
            key=y;
            key_automated=y;
          fi;
        else
          key=${key_automated};
          echo "${key}";
        fi;

        # Push the tree
        echo '';
        if [[ "${key}" == 'y' ]] || [[ "${key}" == 'Y' ]]; then
          ${push_command};
        elif [ "${key}" = 'n' ] || [ "${key}" = 'N' ]; then
          echo '  < Upload ignored. Consider uploading later';
        else
          echo '  < Upload ignored after timeout... Consider uploading later';
        fi;

      fi;
    fi;

  done;

  # ==========================================================
  # Return to current folder
  echo '';
  cd "${currentdir}";
}

# === Android Project For Each Path ===
function androidprojectforeach()
{
  # Usage
  if [ -z "${1}" ] || [ -z "${2}" ] || [ -z "${3}" ]; then
    echo '';
    echo ' Usage: androidprojectforeach <owner> <project_name> <"commands"> (Android project paths commands runner)';
    echo '';
    return;
  fi;

  # Variables
  local project_path;

  # Android project remote paths list
  for project_path in $(androidprojectpaths "${1}" "${2}"); do

    # Access path
    croot;
    cd "${project_path}";

    # Information
    echo '';
    echo "[${project_path}]";

    # Run commands
    "${@:3}";

  done;

  # Return to repo root
  croot;
  echo '';
}

# === Android Project Sync ===
function androidprojectsync()
{
  # Usage
  if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo '';
    echo ' Usage: androidprojectsync <owner> <project_name> (Android project paths repo syncer)';
    echo '';
    return;
  fi;

  # Variables
  local branch;
  local project_path;
  local remote;

  # Android project remote paths list
  for project_path in $(androidprojectpaths "${1}" "${2}"); do

    # Access path
    croot;
    cd "${project_path}";

    # Information
    echo '';
    echo " androidproject: Syncing '${project_path}' path...";

    # Fetch and reset
    remote=$(gitgetreporemote);
    branch=$(gitgetrepobranch "${remote}");
    git fetch "${remote}" "${branch}" 2>&1;
    git reset --hard FETCH_HEAD;

  done;

  # Return to repo root
  croot;
  echo '';
}

# === Android Project Ungraft ===
function androidprojectungraft()
{
  # Usage
  if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo '';
    echo ' Usage: androidprojectungraft <owner> <project_name> (Android project paths ungrafter)';
    echo '';
    return;
  fi;

  # Variables
  local branch;
  local project_path;
  local remote;

  # Android project remote paths list
  for project_path in $(androidprojectpaths "${1}" "${2}"); do

    # Access path
    croot;
    cd "${project_path}" 2>/dev/null || continue;

    # Information
    echo '';
    echo " androidprojectungraft: Fetching '${project_path}' last 100 commits...";

    # Fetch and ungraft
    remote=$(gitgetreporemote);
    branch=$(gitgetreporemote "${remote}");
    git fetch --depth 100 "${remote}" "${branch}";

  done;

  # Return to repo root
  croot;
  echo '';
}

# === Android Project Unshallow ===
function androidprojectunshallow()
{
  # Usage
  if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo '';
    echo ' Usage: androidprojectunshallow <owner> <project_name> (Android project paths unshallower)';
    echo '';
    return;
  fi;

  # Variables
  local branch;
  local project_path;
  local remote;

  # Android project remote paths list
  for project_path in $(androidprojectpaths "${1}" "${2}"); do

    # Access path
    croot;
    cd "${project_path}" 2>/dev/null || continue;

    # Information
    echo '';
    echo " androidprojectunshallow: Checking '${project_path}' shallow status...";

    # Fetch and unshallow
    remote=$(gitgetreporemote);
    branch=$(gitgetrepobranch "${remote}");
    git fetch --unshallow "${remote}" "${branch}" 2>&1 \
	    | grep -v 'on a complete repository does not make sense';

  done;

  # Return to repo root
  croot;
  echo '';
}

# === ROM Auto Patcher ===
function rompatcher()
{
  # Usage: rompatcher (Helper menu access to *patcher functions)

  # Variables
  local cnt=0;
  local key;
  local line_function;
  local line_usage;
  local list_functions=('');
  local roomservice_xml;
  local search_patcher;

  # Reset inputs
  search_patcher='';

  # Detect the existence of roomservice.xml
  roomservice_xml=$(gettop)/.repo/local_manifests/roomservice.xml;
  if [ -f "${roomservice_xml}" ]; then
    search_patcher=$(grep --color=never "ROM Patcher: '" "${roomservice_xml}" \
                   | sed "s/.* '\(.*\)' .*/\1/");

    # Notify found rompatcher function
    if [ ! -z "${search_patcher}" ]; then
      echo '';
      echo -e  " \e[1;32mDetected rompatcher to use : '${search_patcher}'\e[0m ";
      echo '';
      ${search_patcher};
      echo '';
      return;
    fi;
  fi;

  # Function header
  echo '';
  echo -e " \e[1;37m[ Advanced Development Shell Tools - ROM Patchers ]\e[0m";
  echo '';

  # Display *patcher menu
  for line_function in $(typeset -F \
                       | grep --color=never 'patcher$' \
                       | cut -d' ' -f 3 \
                       | grep -v '^rompatcher$' \
                       | grep -v '^androidprojectpatcher$'); do

    # Parse usage
    line_usage=$(shtoolsfiles 'sources' \
               | xargs grep -a -m1 --color=never "Usage: ${line_function} ");
    if [ -z "${line_usage}" ]; then
      continue;
    fi;
    line_usage=${line_usage#*\(};
    line_usage=${line_usage%\)*};
    list_functions+=("${line_function}");

    # Item choice
    cnt=$((cnt + 1));
    echo -e "  \e[1;33m${cnt}: \e[1;37m${line_function} \e[1;32m[${line_usage}]\e[0m";

  done;
  echo '';

  # Request user input
  echo -n " > Command to run [1-${cnt}] : ";
  read -r key;
  echo '';

  # Execute requested function
  ${list_functions[${key}]} "${@}";
}

# === ROM Auto Rebaser ===
function romrebaser()
{
  # Usage: romrebaser (Helper menu access to *rebaser functions)

  # Variables
  local cnt=0;
  local key;
  local line_function;
  local line_usage;
  local list_functions=('');
  local search_rebaser;

  # Reset inputs
  key='';
  search_rebaser='';

  # Detect the existence of roomservice.xml
  roomservice_xml=$(gettop)/.repo/local_manifests/roomservice.xml;
  if [ -f "${roomservice_xml}" ]; then
    search_rebaser=$(grep --color=never "ROM Rebaser: '" "${roomservice_xml}" \
                   | sed "s/.* '\(.*\)' .*/\1/");

    # Notify found romrebaser function
    if [ ! -z "${search_rebaser}" ]; then
      echo '';
      echo -e  " \e[1;32mDetected romrebaser to use : '${search_rebaser}'\e[0m ";
    fi;
  fi;

  # Function header
  echo '';
  echo -e " \e[1;37m[ Advanced Development Shell Tools - ROM Rebasers ]\e[0m";
  echo '';

  # Display *rebaser menu
  for line_function in $(typeset -F \
                       | grep --color=never 'rebaser$' | cut -d' ' -f 3 \
                       | grep -v '^romrebaser$' \
                       | grep -v '^androidprojectrebaser$'); do

    # Parse usage
    line_usage=$(shtoolsfiles 'sources' \
               | xargs grep -a -m1 --color=never "Usage: ${line_function} ");
    if [ -z "${line_usage}" ]; then
      continue;
    fi;
    line_usage=${line_usage#*\(};
    line_usage=${line_usage%\)*};
    list_functions+=("${line_function}");

    # Item choice
    cnt=$((cnt + 1));
    if [ "${line_function}" = "${search_rebaser}" ]; then
      key=${cnt};
    fi;
    echo -e "  \e[1;33m${cnt}: \e[1;37m${line_function} \e[1;32m[${line_usage}]\e[0m";

  done;
  echo '';

  # Request user input
  echo -n " > Command to run [1-${cnt}] : ";
  if [ -z "${key}" ]; then
    read -r key;
  else
    echo "${key}";
  fi;
  echo '';

  # Execute requested function
  ${list_functions[${key}]} "${@}";
}
