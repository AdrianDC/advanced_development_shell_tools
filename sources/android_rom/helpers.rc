#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Libraries Hunter ===
function librarieshunter()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: librarieshunter <binariespath> (Libraries linkage analyzer)';
    echo '';
    return;
  fi;

  # Variables
  local FILES=${1};
  local FILE_NAME=;
  local FILE_REFERENCED=;
  local SYSTEM_PATH=;
  local LIB_ARCH=;
  local LIB_NAME=;
  local DIR_NAMES=;
  local DIR_COMMON_NAMES=;
  local DIR_VENDOR_NAMES=;

  # Scan the libraries
  echo '';
  echo -e " \e[1;31m=== Searching missing libraries in ${FILES} ===\e[0m";
  echo '';
  for FILE in $(find "${FILES}" -not -path "*.git/*" -not -path "*.repo/*" | sort);
  do
    FILE=$(readlink -f "${FILE}");
    if [ ! -e "${FILE}" ] || [ -d "${FILE}" ]; then
      continue;
    fi;

    # Internal references
    STRINGS=$(stringsgetall "${FILE}" \
            | grep "\\.so" \
            | sort -u -r \
            | tr '\n' ',');
    if [ ! -z "${STRINGS}" ]; then
      STRINGS=${STRINGS//,/ };
      echo -e "   \e[1;37m${FILE}:\e[0m";

      # Search missing references
      for LIB in ${STRINGS};
      do
        if [[ ! "${LIB}" == *'lib'*'.so' ]]; then continue; fi;
        if [[ "${LIB}" == *'%'* ]]; then continue; fi;

        LIB_NAME=$(basename "${LIB}");
        SYSTEM_PATH=${FILES%system\/*}system;
        LIB_ARCH=${FILES//vendor\//};
        LIB_ARCH=${LIB_ARCH/*system\/lib};
        LIB_ARCH=${LIB_ARCH%%\/*};
        DIR_COMMON_NAMES=${SYSTEM_PATH}/lib${LIB_ARCH};
        DIR_VENDOR_NAMES=${SYSTEM_PATH}/vendor/lib${LIB_ARCH};
        DIR_NAMES="${DIR_COMMON_NAMES} ${DIR_COMMON_NAMES}/*/ ${DIR_VENDOR_NAMES} ${DIR_VENDOR_NAMES}/*/";
        if [ -z "$(find "${DIR_NAMES}" -name "${LIB_NAME}")" ]; then
          echo -e "    \e[1;31m- Missing reference: \e[1;31m${LIB_NAME}\e[0m";
        fi;
      done;

      # Search unused library
      FILE_NAME=$(basename "${FILE}");
      FILE_REFERENCED=;
      for FILE_SUB in $(find "${FILES}" -not -path "*.git/*" -not -path "*.repo/*" | sort);
      do
        FILE_SUB=$(readlink -f "${FILE_SUB}");
        if [ -d "${FILE_SUB}" ] || [ "${FILE}" = "${FILE_SUB}" ]; then continue; fi;
        STRINGS_SUB=$(stringsgetall "${FILE_SUB}" \
                    | grep "${FILE_NAME}" \
                    | sort -u -r \
                    | tr '\n' ',');
        if [ ! -z "${STRINGS_SUB}" ]; then
          FILE_REFERENCED=true;
          break;
        fi;
      done;
      if [ -z "${FILE_REFERENCED}" ]; then
        echo -e "    \e[1;33m- Unused library: ${FILE_NAME}\e[0m";
      fi;
    fi;
  done;
  echo '';
}

# === Libraries Checker ===
function librarieschecker()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: librarieschecker <prebuilts_path> (Unreferenced libraries analyzer)';
    echo '';
    return;
  fi;

  # Variables
  local FILES_PATH=${1};
  local FILE_NAME=;

  # Scan the libraries
  echo '';
  echo -e " \e[1;31m=== Searching unreferenced libraries in ${FILES_PATH} ===\e[0m";
  echo '';
  for FILE in $(find "${FILES_PATH}" -not -path "*.git/*" -not -path "*.repo/*" | sort); do

    # Detect file and allow only library extensions
    FILE=$(readlink -f "${FILE}");
    if [ ! -e "${FILE}" ] || [ -d "${FILE}" ] || [ ! "${FILE: -3}" = '.so' ]; then
      continue;
    fi;

    # Get file name only
    FILE_NAME=$(basename "${FILE}");

    # Present the file being checked
    echo -en "\r\033[K  - Looking for '${FILE_NAME}'...";

    # Search missing references
    if ! grep -aiqr --exclude=\*.mk --exclude="${FILE_NAME}" "${FILE_NAME}" "${FILES_PATH}"; then
      echo -e "\r\033[K  \e[1;31m- Missing reference: \e[1;31m${FILE_NAME}\e[0m";
    fi;

  done;
  echo -e '\r\033[K';
}

# === Overlay Compare ===
function overlaycompare()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: overlaycompare <overlay_file_path> (Compare device overlays against sources)';
    echo '';
    return;
  fi;

  # Variables
  local source_path;
  local tmp_list;

  # Loop through files
  tmp_list=$(mktemp);
  find "${@}" -type f > "${tmp_list}";
  while IFS= read -r overlay_path; do

    # Launch paths compare on both paths
    source_path=$(echo "$(gettop)/${overlay_path}" \
                | sed 's/overlay\/common/overlay/' \
                | sed 's/overlay\/dictionaries/overlay/' \
                | sed 's/overlay[^\/]*\///');
    pathscompare "${overlay_path}" "${source_path}" --wait;

  done < "${tmp_list}";
  rm -f "${tmp_list}";
}
