#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Git Fetch Shortcuts ===
alias gitf='git fetch';
alias gitfor='gitremoteverify origin gitrao; gitfr origin';
alias gitfar='gitremoteverify $(githubusername) gitraa; gitfr $(githubusername)';
alias gitfprivr='gitfr private';

# === Git Fetch Validated Remote ===
function gitfu()
{
  # Usage: gitfu [remote] [branch] (Git fetch from validated remote)

  # Variables
  local remote;
  local branch;

  # Initialize variables
  remote=${1:-$(gitgetremote)};
  branch=${2:-$(gitgetbranch "${remote}")};

  # Header information
  echo '';
  echo -e " \e[1;32m=== gitfu - Fetching from '${remote}', branch '${branch}' ===\e[0m";
  echo '';

  # Fetch branch with tags from remote
  if [ "${3}" = '--tags' ]; then
    git fetch --tags "${remote}" "${branch}";

  # Fetch branch from remote
  else
    git fetch "${remote}" "${branch}";
  fi;
  echo '';
}

# === Git Fetch Reset ===
function gitfr()
{
  # Usage: gitfr [remote] [branch] (Git fetch and reset hard)

  # Fetch and reset hard
  gitfu "${1}" "${2}";
  git reset FETCH_HEAD --hard;
}

# === Git Fetch with Tags Reset ===
function gitftr()
{
  # Usage: gitftr [remote] [branch] (Git fetch with tags and reset hard)

  # Fetch with tags and reset hard
  git tag -l | xargs git tag -d >/dev/null;
  gitfu "${1}" "${2}" --tags;
  git reset FETCH_HEAD --hard;
  echo '';
  echo -en ' \e[1;33mgitftr: HEAD description: \e[1;37m';
  gittagdescribe;
  echo -e '\e[0m';
}

# === Git Full Url Fetch ===
function gitfurl()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitfurl <url> (Git fetch from full url)';
    echo '';
    return;
  fi;

  # Variables
  local url=${1};
  local branch;

  # Prepare url
  branch=${url};
  url=${url%/commits/*};
  url=${url%/tree/*};
  url=${url%/+/*};
  branch=${branch#*/commits/};
  branch=${branch#*/tree/};
  branch=${branch#*/+/};

  # Git fetch from full url
  git fetch "${url}" "${branch}";
}

# === Git Unshallow Project ===
function gitunshallow()
{
  # Usage: gitunshallow (Git fetch and unshallow project)

  # Variables
  local currentdir=${PWD};
  local branch;
  local remote;
  local submodule;
  local submodules;

  # Fetch and unshallow
  remote=$(gitgetreporemote);
  branch=$(gitgetrepobranch "${remote}");
  git fetch --unshallow "${remote}" "${branch}" 2>&1 \
    | grep -v 'on a complete repository does not make sense';

  # Fetch and unshallow submodules
  submodules=$(git submodule--helper list | cut -f 2);
  for submodule in ${submodules}; do
    cd "${currentdir}/${submodule}/";
    remote=$(gitgetreporemote);
    branch=$(gitgetbranch "${remote}");
    git fetch --unshallow "${remote}" "${branch}" 2>&1 \
      | grep -v 'on a complete repository does not make sense';
  done;

  # Restore current dir
  cd "${currentdir}/";
}
