#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Git Push Helpers ===
alias gitpf='git push -f';

# === Git Push Validated Remote ===
function gitpu()
{
  # Variables
  local branch='';
  local cmd;
  local commits_remote;
  local fetch_sha1;
  local input;
  local option;
  local params;
  local remote;
  local tags_diff='';
  local tags_mode='';

  # Tags option
  case "${1}" in

    # Tags option
    -t|--tags)
      tags_mode='true';
      shift;;

  esac;

  # Validate parameters
  params=("${@}");
  if [ "${#}" -le 0 ]; then
    input='';
  elif [ "${#}" -le 3 ]; then
    input=${params[$((${#}-1))]};
    params=("${params[@]:0:$((${#}-1))}");
  else
    input='-h';
  fi;
  option="${input}";

  # Validate options
  case "${input}" in

    # Help option
    -h|--help)
      echo '';
      echo "Usage: gitpu [remote] [branch] [-y/-n/-d/-f/-t/--tags] (Git push to validated remote)";
      echo '';
      return;;

    # Yes option
    -y|-Y)
      option='-y';;

    # No option
    -n|-N)
      option='-n';;

    # Delete option
    -d|-D)
      option='-d';;

    # Force option
    -f|-F)
      option='-f';;

    # No option or unknown option
    *)
      if [ ! -z "${3}" ]; then
        echo '';
        echo -e " \e[1;33mgitpu: \e[1;31mUnknown '${3}' option...\e[0m";
        echo '';
        return;
      fi;
      option='';
      params=("${@}");;

  esac;
  input=${option};

  # Variables detection
  remote=${params[0]:-$(gitgetremote)};
  if [ -z "${tags_mode}" ]; then
    branch=${params[1]:-$(gitgetbranch "${remote}")};
  fi;

  # Header information
  echo '';
  if [ -z "${tags_mode}" ]; then
    echo -e " \e[1;32m=== gitpu - Pushing branch '${branch}' to remote '${remote}' ===\e[0m";
  else
    echo -e " \e[1;32m=== gitpu - Pushing tags to remote '${remote}' ===\e[0m";
  fi;
  echo '';

  # Get remote stats
  if [ ! -z "${tags_mode}" ]; then
    LC_ALL=C git push -n --tags "${remote}" 2>&1 | grep -v 'failed to push some refs\|Updates were rejected';
    tags_diff=${PIPESTATUS[0]};
  else
    gitstat "${remote}" "${branch}" true;
    fetch_sha1=$(git rev-parse FETCH_HEAD 2>/dev/null | grep -v 'FETCH_HEAD');
  fi;

  # Analyse tags differences
  if [ ! -z "${tags_mode}" ]; then
    if [ "${tags_diff}" -eq 0 ]; then
      option='-t';
    else
      option='-T';
    fi;

  # Analyse existing branches
  elif [ ! -z "${fetch_sha1}" ]; then
    commits_remote=$(git rev-list --left-right HEAD...FETCH_HEAD | grep -c '^>');

  # Handle new branches
  else
    commits_remote=0;
    case "${input}" in
      -d) ;;
      *) option='-c';;
    esac;
  fi;

  # Validate force pushing
  case "${option}" in
    -d|-t)
      ;;
    -f)
      if [ "${commits_remote}" -ne 0 ]; then
        echo -e " \e[1;33mgitpu: \e[1;31m${commits_remote} commits will be lost on the remote.\e[0m";
        echo '';
      elif [ -z "${tags_mode}" ]; then
        option='-y';
      fi;;
    -T)
      echo -en " \e[1;33mgitpu: \e[1;31mOlder tags will be lost on the remote. Continue ? [Enter] \e[0m";
      read -r;
      echo '';;
    *)
      if [ "${commits_remote}" -ne 0 ]; then
        echo -en " \e[1;33mgitpu: \e[1;31m${commits_remote} commits will be lost on the remote. Continue ? [Enter] \e[0m";
        read -r;
        echo '';
        option='-f';
      fi;;
  esac;

  # Prefix
  echo -en ' \e[1;33mgitpu: ';

  # Push force command
  case "${option}" in

    # Delete push
    -d)
      cmd="git push -f ${remote} :refs/heads/${branch}";
      key='';
      echo -en "\e[0;31m${cmd} \e[1;31m# Delete: Y/n ? \e[0m";;

    # Force push
    -f)
      cmd="git push -f ${remote} HEAD:refs/heads/${branch}";
      case "${input}" in
        -f) key='y';;
        *) key='';;
      esac;
      echo -en "\e[0;31m${cmd} \e[1;31m# Rewrite: Y/n ? \e[0m";;

    # Creation push
    -c)
      cmd="git push ${remote} HEAD:refs/heads/${branch}";
      case "${input}" in
        -f|-y) key='y';;
        *) key='';;
      esac;
      echo -en "\e[0;32m${cmd} \e[1;33m# Create new branch: Y/n ? \e[0m";;

    # Regular push
    -y|-n|'')
      cmd="git push ${remote} HEAD:refs/heads/${branch}";
      key=${option:1};
      echo -en "\e[0;32m${cmd} \e[1;32m# Update: Y/n ? \e[0m";;

    # Tags push
    -t)
      cmd="git push --tags ${remote}";
      case "${input}" in
        -f) key='y';;
        *) key='';;
      esac;
      echo -en "\e[0;32m${cmd} \e[1;32m# Push tags: Y/n ? \e[0m";;

    # Tags force push
    -T)
      cmd="git push -f --tags ${remote}";
      case "${input}" in
        -f) key='y';;
        *) key='';;
      esac;
      echo -en "\e[0;31m${cmd} \e[1;31m# Rewrite tags: Y/n ? \e[0m";

  esac;

  # Push validation
  if [ -z "${key}" ]; then
    read -n1 -r key;
    echo '';
  else
    echo "${key}";
  fi;
  echo '';

  # Abort push
  if [[ "${key}" == 'n' ]] || [[ "${key}" == 'N' ]]; then
    return;
  fi;

  # Push to remote
  ${cmd};
  echo '';
}

# === Git Push Helpers ===
alias gitput='gitpu -t';

# === Git Full Url Push ===
function gitpurl()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitpurl <url> (Git pull to full url)';
    echo '';
    return;
  fi;

  # Variables
  local url=${1};
  local branch;

  # Prepare url
  branch=${url};
  url=${url%/commits/*};
  url=${url%/tree/*};
  branch=${branch#*/commits/};
  branch=${branch#*/tree/};

  # Git push to full url
  gitpu "${url}" "${branch}";
}
