#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Git Project Remote ===
function gitgetremote()
{
  # Usage: gitgetremote (Get git remote)

  # Variables
  local cnt;
  local key;
  local remote;
  local remote_url;
  local remotes=();
  local tmp_file;

  # Remotes access
  tmp_file=$(mktemp);
  git remote > "${tmp_file}";
  while read -r remote; do
    remotes+=("${remote}");
  done < "${tmp_file}";
  rm -f "${tmp_file}";

  # Unique remote result
  if [ "${#remotes[@]}" -eq 1 ]; then
    echo "${remotes[0]}";
    return;
  fi;

  # Remotes list
  >&2 echo '';
  >&2 echo -e ' \e[1;32m=== gitgetremote - Git Remote Selection ===';
  >&2 echo '';
  cnt=0;
  for remote in "${remotes[@]}"; do
    cnt=$((cnt + 1));
    remote_url=$(git config --get "remote.${remote}.url");
    >&2 echo -e " \e[1;33m[${cnt}] \e[1;37m${remote} - \e[0;33m${remote_url}";
  done;

  # Remote choice
  >&2 echo '';
  >&2 echo -en " \e[1;33mgitgetremote: \e[1;37mGit remote to use \e[1;32m[1-${cnt}] \e[1;33m:\e[0m ";
  if [ "${cnt}" -eq 1 ]; then
    >&2 echo '1';
    key='1';
  else
    exec 3<>/dev/tty;
    read -r -u 3 key;
    exec 3>&-;
  fi;
  >&2 echo '';

  # Remote selection
  if [ "${key}" -ge 1 ] && [ "${key}" -le "${cnt}" ]; then
    key=$((key - 1));
    remote=${remotes[${key}]};
  else
    remote='?';
  fi;

  # Output result
  echo "${remote}";
}

# === Git Project Branch ===
function gitgetbranch()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitgetbranch <remote> (Get git branch)';
    echo '';
    return;
  fi;

  # Variables
  local cnt;
  local branch;
  local branches=();
  local key;
  local remote=${1};
  local tmp_file;

  # Branches access
  tmp_file=$(mktemp);
  git branch -ar \
      | grep --color=never -v 'HEAD' \
      | grep --color=never -- "${remote}/" \
      | sed 's# *\(.* -> \|\)\([^ /]*\)/\([^ /]*\)#\3#' \
      | sed -E 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' \
      | sort \
      | uniq \
      > "${tmp_file}";
  while read -r branch; do
    branches+=("${branch}");
  done < "${tmp_file}";
  rm -f "${tmp_file}";

  # Branches list
  >&2 echo '';
  >&2 echo -e ' \e[1;32m=== gitgetbranch - Git Branch Selection ===';
  >&2 echo '';
  cnt=0;
  key=0;
  if [ "${#branches[@]}" -ge 1 ]; then
    >&2 echo -e " \e[1;33m[0] \e[1;37mManual branch input";
    >&2 echo '';
    for branch in "${branches[@]}"; do
      cnt=$((cnt + 1));
      >&2 echo -e " \e[1;33m[${cnt}] \e[1;37m${branch} - \e[0;33m${remote}";
    done;

    # Branch choice
    >&2 echo '';
    >&2 echo -en " \e[1;33mgitgetbranch: \e[1;37mSelect branch \e[1;32m[0-${cnt}] \e[1;37m/ Delete branch \e[1;31m[<0] \e[1;33m:\e[0m ";
    exec 3<>/dev/tty;
    read -r -u 3 key;
    exec 3>&-;
  fi;

  # Branch selection
  if [ "${key}" -ge 1 ] && [ "${key}" -le "${cnt}" ]; then
    >&2 echo '';
    key=$((key - 1));
    branch=${branches[${key}]};
  elif [ "${key}" -le -1 ] && [ "${key}" -ge "-${cnt}" ]; then
    key=$((-1 - key));
    branch=${branches[${key}]};
    >&2 echo -en " \e[1;33mgitgetbranch:\e[1;31m Delete local branch '${branch}' ? [Y/n] \e[0m";
    key='';
    read -r key;
    if [ ! "${key,,}" = 'n' ]; then
      git branch -d "${branch}" 2>&1 | grep -v 'branch .* not found.';
      git update-ref -d "refs/remotes/${remote}/${branch}";
    fi;
    >&2 echo '';
    gitgetbranch "${1}";
    return;
  elif [ "${key}" = '-0' ]; then
    key=$((-1 - key));
    branch=${branches[${key}]};
    >&2 echo -en " \e[1;33mgitgetbranch:\e[1;31m Delete all local branches ? [y/N] \e[0m";
    key='';
    read -r key;
    if [ "${key,,}" = 'y' ]; then
      for branch in "${branches[@]}"; do
        git branch -d "${branch}" 2>&1 | grep -v 'branch .* not found.';
        git update-ref -d "refs/remotes/${remote}/${branch}";
      done;
      >&2 echo -en " \e[1;33mgitgetbranch:\e[1;31m Fetch the remote again ? [b/t/N] \e[0m";
      key='';
      read -r key;
      if [ "${key,,}" = 'b' ]; then
        >&2 echo ''
        git fetch "${remote}" >/dev/null;
      elif [ "${key,,}" = 't' ]; then
        >&2 echo ''
        git tag -l | xargs -r git tag -d >/dev/null
        git fetch --tags "${remote}" >/dev/null;
      fi;
    fi;
    >&2 echo '';
    gitgetbranch "${1}";
    return;
  elif [ "${key}" -eq 0 ]; then
    >&2 echo -en ' \e[1;33mgitgetbranch:\e[1;37m Git remote branch input : \e[0m';
    read -r branch;
    >&2 echo '';
  else
    >&2 echo '';
    branch='?';
  fi;

  # Output result
  echo "${branch}";
}

# === Git Repo Remote ===
function gitgetreporemote()
{
  # Usage
  if [ ! -z "${1}" ]; then
    echo '';
    echo ' Usage: gitgetreporemote (Get git repo project remote)';
    echo '';
    return;
  fi;

  # Variables
  local branch;
  local branches;

  # Remotes detection
  branches=$(git 'for-each-ref' \
           | grep -i --color=never 'remotes' \
           | grep -v 'HEAD' \
           | sed 's/.*\/remotes\/\([^\/]*\/[^\/]*\).*/\1/');

  # Validate remotes
  for branch in ${branches}; do
    if git remote -v | cut -f 1 | grep -q "${branch%/*}"; then
      branch=${branch#*/};
      break;
    fi;
    branch='';
  done;

  # Detect remote from refs
  if [ -z "${remote}" ] || [[ "${remote}" == *'Manifest'* ]] || [[ "${remote}" == *'HEAD'* ]]; then
    remote=$(gitgetremote);
  fi;

  # Output result
  echo "${remote}";
}

# === Git Repo Branch ===
function gitgetrepobranch()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitgetrepobranch <remote> (Get git repo project branch)';
    echo '';
    return;
  fi;

  # Variables
  local branch='';
  local infos;
  local remote=${1};

  # Initialize variables
  infos=$(repo info . 2>&1);

  # Repo detection
  if [[ ! "${infos}" == *'repo to be installed'* ]] && [[ ! "${infos}" == *'sudo apt'* ]]; then
    branch=$(echo "${infos}" \
          | grep -i --color=never 'Current revision:' \
          | head -n 1 \
          | grep 'refs/' \
          | sed 's/.*: \(refs\/heads\/\|refs\/tags\/\|\)\(.*\)/\2/');
  fi;

  # Recent remotes
  if [ -z "${branch}" ] || [[ "${branch}" == *'Manifest'* ]]; then
    branch=$(git 'for-each-ref' --sort='-committerdate' refs/remotes/ \
           | grep --color=never "$(githubusername)\|origin\|xperia" \
           | head -n 1 \
           | sed 's/.*remotes\/[^\/]*\/\(.*\)/\1/');
  fi;

  # Detect branch from refs
  if [ -z "${branch}" ] || [[ "${branch}" == *'Manifest'* ]] || [[ "${branch}" == *'HEAD'* ]]; then
    branch=$(gitgetbranch "${remote}");
  fi;

  # Output result
  echo "${branch}";
}
