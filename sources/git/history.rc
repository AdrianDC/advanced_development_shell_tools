#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Git Log Helpers ===
alias gitlo='git log --pretty=oneline --abbrev-commit';
alias gitlod='git log --pretty=oneline --abbrev-commit --';
alias gitloo='git log --pretty=format:"%C(yellow)%h %Cred%ad %Creset%s" --date=short --all --';
alias gitlor='git log --pretty=format:"%C(yellow)%h %Cred%ad %Creset%s %Cgreen%d" --date=short --all --'
alias gitlosign='git log --show-signature';

# === Git Log Searcher ===
function gitlos()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitlos <path_or_.> ["search string input"] [search_max_count] (Search string in git history)';
    echo '';
    return;
  fi;

  # Variables
  local cnt;
  local input;
  local search_path;

  # Handle input values
  if [ -f "${1}" ] || [ -d "${1}" ]; then
    search_path=${1};
    input=${2};
    cnt=${3:-30};
  else
    search_path=.;
    input=${1};
    cnt=${2:-30};
  fi;

  # Search related commits
  echo '';
  echo -e " \e[1;37mSearching for ${input} in last ${cnt} commits...\e[0m";
  echo '';
  for sha1 in $(git log --max-count="${cnt}" --format=format:%H -- "${search_path}"); do
    if git show "${sha1}" | grep -iq "${input}"; then
      git --no-pager show -M --name-only --oneline "${sha1}";
      git --no-pager show -M "${sha1}" | grep -i "${input}";
      echo '';
    fi;
  done;
}

# === Git Logs From Commit Files ===
function gitlc()
{
  # Usage: gitlc [SHA1] (Show histories from a commit's files)

  # Variables
  local commit="${1:-HEAD}";
  local file_path;
  local tmp_list;

  # Acquire commit files list
  tmp_list=$(mktemp);
  git diff-tree --no-commit-id --name-only -r "${commit}" > "${tmp_list}";

  # Walk through commit files
  while read -r file_path; do
    echo '';
    echo -e " \e[1;37m${commit}\e[1;33m@\e[1;32m${file_path}\e[0m:";
    echo '';
    gitlo --max-count=5 -- "${file_path}";
  done < "${tmp_list}";
}

# === Git Diff Status ===
function gitdi()
{
  # Usage: gitdi [SHA1] (Show git differences status)

  # Show unmerged diffs
  git diff --name-status "${1:-HEAD}";
  git ls-files --others --exclude-standard | awk '{print "U       " $0}';
}

# === Git Diff Helpers ===
alias gitdiffw='git diff --color-words';
alias gitdiffc='git diff --color-words=.';

# === Git Diff Status SHA1 ===
function gitdfs()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: gitdfs <sha1commit> (git diff status of an SHA1)';
    echo '';
    return;
  fi;

  # Diff commits
  git diff-tree --no-commit-id --name-status -r "${1}";
}

# === Git Diff SHA1 On Path ===
function gitdf()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: gitdf <sha1commit> <filepath> (git diffs from an SHA1)';
    echo '';
    return;
  fi;

  # Diff commits with paths
  git diff "${1}^:${2}" "${1}:${2}";
}

# === Git Diff All ==
function gitdiffall()
{
  # Usage: gitdiffall (Show a git diff with all chars)

  # Show a git diff with all chars
  git diff --color --ws-error-highlight=context,new,old;
}

# === Git Commit Finder ===
function gitfindsha1()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: gitfindsha1 <remote/branch> <"title text to search"> (git search commit by title contents)';
    echo '';
    return;
  fi;

  # Search
  git log --pretty=oneline "${1}" \
    | grep --color=never "${2}" \
    | head -n 1 \
    | cut -f 1 -d ' ';
}
