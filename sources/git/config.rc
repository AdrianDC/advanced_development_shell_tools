#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === GitHub Username ===
function githubusername()
{
  # Usage: githubusername (GitHub username getter)

  # GitHub Credentials
  export GitEMail='user.name@gmail.com';
  export GitFullName='Full Name';
  export GitUserName='Username';

  # Create .bash_android.github.rc with the exports to override the credentials
  if [ -f "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_WORKSPACE:-${HOME}}/.bash_android.github.rc" ]; then
    source "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_WORKSPACE:-${HOME}}/.bash_android.github.rc";
  fi;

  # Return username
  echo "${GitUserName}";
}

# === Git Config User ===
function gitconfuser()
{
  # Variables
  local name=${1};
  local email=${2};

  # Usage and user input
  if [ -z "${name}" ] || [ -z "${email}" ]; then
    echo '';
    echo ' Usage: gitconfuser <"name"> <"email"> (Configure Git user and email)';
    echo '';
    echo -en ' \e[1;37m> User name:\e[0m ';
    read -r name;
    echo -en ' \e[1;37m> User email:\e[0m ';
    read -r email;
  fi;

  # Set user values
  if [ ! -z "${name}" ] && [ ! -z "${email}" ]; then
    git config --global user.name "${name}";
    git config --global user.email "${email}";
  fi;

  # Display option
  echo '';
  echo -n ' gitconfuser: user.name = ';
  git config --global --get user.name;
  echo -n ' gitconfuser: user.email = ';
  git config --global --get user.email;
  echo '';
}

# === Git Config Users ===
function gitu()
{
  # Usage: gitu (Add and switch between git users)

  # Variables
  local cnt=0;
  local git_email;
  local git_user;
  local key;
  local line_content;
  local line_enabled;
  local line_name;
  local line_email;
  local list_names=('');
  local list_emails=('');

  # Create .gitusers initial file
  if [ ! -f "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_WORKSPACE:-${HOME}}/.gitusers" ]; then
    echo -n '' > "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_WORKSPACE:-${HOME}}/.gitusers";
  fi;

  # Enable UI wrapper
  __shtoolsui 'enable';
  __shtoolsui 'start';

  # Function header
  echo '';
  echo -e " \e[1;37m[ Advanced Development Shell Tools - Git Users ]";
  echo '';

  # Display configuration item
  echo -e '  \e[1;33m0: \e[1;37mConfigure a new user';
  echo '';

  # Acquire current user
  git_email=$(git config --global --get user.email);
  git_user=$(git config --global --get user.name);

  # Display git users menu
  while read -r line_content; do

    # Parse users
    line_name=${line_content%\',*};
    line_name=${line_name#\'};
    line_email=${line_content#*,\'};
    line_email=${line_email%\'};
    list_names+=("'${line_name}'");
    list_emails+=("'${line_email}'");

    # Detect enabled line
    if [ "'${line_email}'" = "${git_email}" ] &&
        [ "'${line_name}'" = "${git_user}" ]; then
      line_enabled=' \e[1;33m(Active)';
    else
      line_enabled='';
    fi;

    # Item choice
    cnt=$((cnt + 1));
    echo -e "  \e[1;33m${cnt}: \e[1;37m${line_name} \e[1;32m<${line_email}>${line_enabled}";

  done < "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_WORKSPACE:-${HOME}}/.gitusers";
  echo '';

  # Request user input
  echo -en " \e[1;37m> Switch to an user [0-${cnt}]:\e[0m ";
  __shtoolsui 'input';
  echo '';

  # Disable UI wrapper
  __shtoolsui 'disable';

  # Keep current user
  if [ -z "${key}" ]; then
    gitconfuser "${git_user}" "${git_email}";

  # Add and configure requested user
  elif [ "${key}" -eq '0' ]; then
    echo -en ' \e[1;37m> User name:\e[0m ';
    read -r line_name;
    echo -en ' \e[1;37m> User email:\e[0m ';
    read -r line_email;
    if [ ! -z "${line_email}" ] && [ ! -z "${line_email}" ]; then
      echo "'${line_name}','${line_email}'" >> "${ADVANCED_DEVELOPMENT_SHELL_TOOLS_WORKSPACE:-${HOME}}/.gitusers";
      gitconfuser "'${line_name}'" "'${line_email}'";
    fi;

  # Configure requested user
  elif [ "${key}" -eq "${key}" ] 2> /dev/null && [ "${key}" -ge 1 ] && [ "${key}" -le "${cnt}" ]; then
    gitconfuser "${list_names[${key}]}" "${list_emails[${key}]}";
  fi;
}

# === Git Config Editor ===
function gitconfeditor()
{
  # Variables
  local editor=${1};

  # Usage and user input
  if [ -z "${editor}" ]; then
    echo '';
    echo ' Usage: gitconfeditor <app_name/default> (Configure Git editor application)';
    echo '';
    echo -en ' \e[1;37m> Editor:\e[0m ';
    read -r editor;
  fi;

  # Select option
  case "${editor}" in
    default)
      git config --global --unset core.editor;;
    notepad++)
      git config --global core.editor 'notepad++ -multiInst -notabbar -nosession -noPlugin';;
    nano|vim|*)
      git config --global core.editor "${editor}";;
    '')
      echo '';
      echo " Error: Option '${mode}' not recognized";;
  esac;

  # Display option
  echo '';
  echo -n ' gitconfeditor: core.editor = ';
  git config --global --get core.editor || echo '';
  echo '';
}

# === Git Config Merge Tool ===
function gitconfmergetool()
{
  # Variables
  local app_name=${1};

  # Usage and user input
  if [ -z "${app_name}" ]; then
    echo '';
    echo ' Usage: gitconfmergetool <app_name> (Configure Git merge tool handling)';
    echo '';
    echo -en ' \e[1;37m> App name:\e[0m ';
    read -r app_name;
  fi;

  # Set option
  if [ ! -z "${app_name}" ]; then
    git config --global merge.tool "${app_name}";
  fi;

  # Display option
  echo '';
  echo -n ' gitconfmergetool: merge.tool = ';
  git config --global --get merge.tool;
  echo '';
}

# === Git Config File CR/LF ===
function gitconffilecrlf()
{
  # Variables
  local mode=${1};
  local file_local=${2};
  local file_option;

  # Usage and user input
  if [ -z "${mode}" ]; then
    echo '';
    echo ' Usage: gitconffilecrlf <auto/detect/input/warn> [bool_local] (Configure Git file CR/LF EOL handling)';
    echo '';
    echo -en ' \e[1;37m> Mode:\e[0m ';
    read -r mode;
  fi;

  # Select file option
  if [ ! -z "${file_local}" ]; then
    file_option='--local';
  else
    file_option='--global';
  fi;

  # Select option
  case "${mode}" in
    auto)
      git config "${file_option}" core.autocrlf 'true';
      git config "${file_option}" core.safecrlf 'false';;
    detect)
      git config "${file_option}" core.autocrlf 'false';
      git config "${file_option}" core.safecrlf 'true';;
    input)
      git config "${file_option}" core.autocrlf 'input';
      git config "${file_option}" core.safecrlf 'false';;
    warn)
      git config "${file_option}" core.autocrlf 'false';
      git config "${file_option}" core.safecrlf 'false';;
    *)
      echo '';
      echo " Error: Option '${mode}' not recognized";;
  esac;

  # Display option
  echo '';
  echo -n ' gitconffilecrlf: core.autocrlf = ';
  git config "${file_option}" --get core.autocrlf;
  echo -n ' gitconffilecrlf: core.safecrlf = ';
  git config "${file_option}" --get core.safecrlf;
  echo '';
}

# === Git Config File Permissions ===
function gitconffileperms()
{
  # Variables
  local mode=${1};

  # Usage and user input
  if [ -z "${mode}" ]; then
    echo '';
    echo ' Usage: gitconffileperms <detect/ignore> (Configure Git file permissions handling)';
    echo '';
    echo -en ' \e[1;37m> Mode:\e[0m ';
    read -r mode;
  fi;

  # Select option
  case "${mode}" in
    detect)
      git config --global core.filemode 'true';;
    ignore)
      git config --global core.filemode 'false';;
    *)
      echo '';
      echo " Error: Option '${mode}' not recognized";;
  esac;

  # Display option
  echo '';
  echo -n ' gitconffileperms: core.filemode = ';
  git config --global --get core.filemode;
  echo '';
}

# === Git Config Colors ===
function gitconfcolors()
{
  # Variables
  local mode=${1};

  # Usage and user input
  if [ -z "${mode}" ]; then
    echo '';
    echo ' Usage: gitconfcolors <always/auto/never> (Configure Git colors handling)';
    echo '';
    echo -en ' \e[1;37m> Mode:\e[0m ';
    read -r mode;
  fi;

  # Select option
  case "${mode}" in
    always)
      git config --global color.ui 'always';;
    auto)
      git config --global color.ui 'true';;
    never)
      git config --global color.ui 'false';;
    *)
      echo '';
      echo " Error: Option '${mode}' not recognized";;
  esac;

  # Display option
  echo '';
  echo -n ' gitconfcolors: color.ui = ';
  git config --global --get color.ui;
  echo '';
}

# === Git Config Commit Stats ===
function gitconfcommitstats()
{
  # Variables
  local mode=${1};

  # Usage and user input
  if [ -z "${mode}" ]; then
    echo '';
    echo ' Usage: gitconfcommitstats <show/quick/hide> (Configure Git commits stats visibility)';
    echo '';
    echo -en ' \e[1;37m> Mode:\e[0m ';
    read -r mode;
  fi;

  # Select option
  case "${mode}" in
    hide)
      git config --global commit.status 'false';
      git config --global merge.stat 'false';
      git config --global status.showUntrackedFiles 'no';;
    quick)
      git config --global commit.status 'true';
      git config --global merge.stat 'true';
      git config --global status.showUntrackedFiles 'no';;
    show)
      git config --global commit.status 'true';
      git config --global merge.stat 'true';
      git config --global status.showUntrackedFiles 'normal';;
    *)
      echo '';
      echo " Error: Option '${mode}' not recognized";;
  esac;

  # Display option
  echo '';
  echo -n ' gitconfcommitstats: commit.status = ';
  git config --global --get commit.status;
  echo -n ' gitconfcommitstats: merge.stat = ';
  git config --global --get merge.stat;
  echo -n ' gitconfcommitstats: status.showUntrackedFiles = ';
  git config --global --get status.showUntrackedFiles;
  echo '';
}

# === Git Config Pager ===
function gitconfpager()
{
  # Variables
  local mode=${1};

  # Usage and user input
  if [ -z "${mode}" ]; then
    echo '';
    echo ' Usage: gitconfpager <less/more/none> (Configure Git pager handling)';
    echo '';
    echo -en ' \e[1;37m> Mode:\e[0m ';
    read -r mode;
  fi;

  # Select option
  case "${mode}" in
    none)
      git config --global core.pager '';;
    less|more)
      git config --global core.pager "${mode}";;
    *)
      echo '';
      echo " Error: Option '${mode}' not recognized";;
  esac;

  # Display option
  echo '';
  echo -n ' gitconfpager: core.pager = ';
  git config --global --get core.pager;
  echo '';
}

# === Git Config Credentials ===
function gitconfcredentials()
{
  # Variables
  local mode=${1};

  # Usage and user input
  if [ -z "${mode}" ]; then
    echo '';
    echo ' Usage: gitconfcredentials <cache/cache --timeout=X/store/wincred> (Configure Git credentials handling)';
    echo '';
    echo -en ' \e[1;37m> Mode:\e[0m ';
    read -r mode;
  fi;

  # Select option
  case "${mode}" in
    cache|'cache --timeout='*|store|wincred)
      git config --global credential.helper "${mode}";;
    *)
      echo '';
      echo " Error: Option '${mode}' not recognized";;
  esac;

  # Display option
  echo '';
  echo -n ' gitconfcredentials: credential.helper = ';
  git config --global --get credential.helper;
  echo '';
}

# === Git Config GPG Key ===
function gitconfgpgkey()
{
  # Variables
  local mode=${1};

  # Usage and user input
  if [ -z "${mode}" ]; then
    echo '';
    echo ' Usage: gitconfgpgkey <gpg_key_id> (Configure Git GPG signing key)';
    echo '';
    echo -en ' \e[1;37m> Mode:\e[0m ';
    read -r mode;
  fi;

  # Set option
  if [ ! -z "${mode}" ]; then
    git config --global user.signingkey "${mode}";
  fi;

  # Display option
  echo '';
  echo -n ' gitconfgpgkey: user.signingkey = ';
  git config --global --get user.signingkey;
  echo '';
}

# === Git Config Conflicts Repeat ===
function gitconfconflictsrepeat()
{
  # Variables
  local mode=${1};

  # Usage and user input
  if [ -z "${mode}" ]; then
    echo '';
    echo ' Usage: gitconfconflictsrepeat <enable/disable> (Configure Git conflicts repeated handling)';
    echo '';
    echo -en ' \e[1;37m> Mode:\e[0m ';
    read -r mode;
  fi;

  # Select option
  case "${mode}" in
    enable)
      git config --global rerere.enabled 'true';;
    disable)
      git config --global rerere.enabled 'false';;
    *)
      echo '';
      echo " Error: Option '${mode}' not recognized";;
  esac;

  # Display option
  echo '';
  echo -n ' gitconfconflictsrepeat: rerere.enabled = ';
  git config --global --get rerere.enabled;
  echo '';
}

# === Git Config Diff Renames ===
function gitconfdiffrenames()
{
  # Variables
  local mode=${1};

  # Usage and user input
  if [ -z "${mode}" ]; then
    echo '';
    echo ' Usage: gitconfdiffrenames <basic/detect/ignore> (Configure Git diff renames handling)';
    echo '';
    echo -en ' \e[1;37m> Mode:\e[0m ';
    read -r mode;
  fi;

  # Select option
  case "${mode}" in
    disable)
      git config --global diff.renames 'false';;
    detect)
      git config --global diff.renames 'copies';;
    ignore)
      git config --global diff.renames 'false';;
    *)
      echo '';
      echo " Error: Option '${mode}' not recognized";;
  esac;

  # Display option
  echo '';
  echo -n ' gitconfdiffrenames: diff.renames = ';
  git config --global --get diff.renames;
  echo '';
}

# === Git Config GPG Signature ===
function gitconfgpgsignature()
{
  # Variables
  local mode=${1};

  # Usage and user input
  if [ -z "${mode}" ]; then
    echo '';
    echo ' Usage: gitconfgpgsignature <enable/disable> (Configure Git GPG signature usage)';
    echo '';
    echo -en ' \e[1;37m> Mode:\e[0m ';
    read -r mode;
  fi;

  # Select option
  case "${mode}" in
    enable)
      git config --global commit.gpgsign 'true';;
    disable)
      git config --global commit.gpgsign 'false';;
    *)
      echo '';
      echo " Error: Option '${mode}' not recognized";;
  esac;

  # Display option
  echo '';
  echo -n ' gitconfgpgsignature: commit.gpgsign = ';
  git config --global --get commit.gpgsign;
  echo '';
}

# === Git Config Helpers ===
alias gpglist='gpg --list-secret-keys --keyid-format LONG';
alias gpgsilent='echo "no-tty" >> ~/.gnupg/gpg.conf';
alias githi='git update-index --assume-unchanged';
alias gitsh='git update-index --no-assume-unchanged';

# === Git GPG Parameter ===
function gitgpgparam()
{
  # Usage: gitgpgparam (Returns the GPG signature flag if enabled)

  # Returns the GPG signature flag if enabled
  if [ "$(git config --global --get commit.gpgsign)" = 'true' ]; then
    echo '-S';
  fi;
}

# === Git Filtered Helper ===
function gitfilter()
{
  # Usage: gitfilter <parameters> (Use git commands with filters)

  # Use git commands with filters
  function git() { "$(command -v git)" -c core.fileMode=false -c core.autocrlf=true "${@}"; };
  if [ "${1:0:3}" = 'git' ]; then
    "${@}";
  else
    git "${@}";
  fi;
  unset -f git;
}

# === Git Unfiltered Helper ===
function gitnofilter()
{
  # Usage: gitnofilter <parameters> (Use git commands without filters)

  # Use git commands without filters
  function git() { "$(command -v git)" -c core.fileMode=true -c core.autocrlf=false "${@}"; };
  if [ "${1:0:3}" = 'git' ]; then
    "${@}";
  else
    git "${@}";
  fi;
  unset -f git;
}
