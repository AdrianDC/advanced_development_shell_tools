#!/bin/bash
#
# Copyright 2015-2019 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Standalone Source Helper ===
# source <(curl -Ls1 https://github.com/AdrianDC/advanced_development_shell_tools/raw/master/sources/git/config.rc)
# source <(curl -Ls1 https://github.com/AdrianDC/advanced_development_shell_tools/raw/master/sources/git/cleaners.rc)

# === Git Stash Helpers ===
alias gits='git stash';
alias gitsp='git stash -p';
alias gitspop='git stash pop';

# === Git Stash Untracked ===
function gitsu()
{
  # Usage: gitsu (Git stash with untracked files)

  # Stash differences
  git stash;

  # Stash untracked files
  git stash -u >/dev/null 2>&1 ||
    git ls-files --exclude-standard --others -z | xargs -0 rm -f;
}

# === Git Clean Tags ===
function gitcleantags()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitcleantags <branch_to_keep> (Cleanup unrequired git tags)';
    echo '';
    return;
  fi;

  # Variables
  local branch_keep=${1};

  # Delete tags
  git tag | grep -v "${branch_keep}" | xargs git tag -d;
}

# === Git One Branch Keeper ===
function gitonebranch()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitonebranch <remote> (Git remove non-default remote branches)';
    echo '';
    return;
  fi;

  # Variables
  local remote=${1};

  # Fetch remotes
  git fetch "${remote}";
  git fetch "${remote}" refs/heads/*:refs/heads/*;
  git fetch "${remote}" refs/tags/*:refs/tags/*;

  # Remove branches
  git branch -r | sed "s/${remote}\/\(.*\)/\1/" \
                | grep -v "HEAD" \
                | grep -v "$(git rev-parse --abbrev-ref HEAD)" \
                | sed 's/\x1b\[[0-9;]*m//g' \
                | xargs -n1 -I {} sh -c "echo -n \" Removing branch {} : \"; git push ${remote} :refs/heads/{};";

  # Remove tags
  git tag -l | sed 's/\x1b\[[0-9;]*m//g' \
             | xargs -n1 -I {} sh -c "echo -n \" Removing tag {} : \"; git push ${remote} :refs/tags/{}; echo -n \"  \"; git tag -d {};";
}

# === Git Untracked Paths Cleaner ===
function gitignoreclean()
{
  # Usage: gitignoreclean [bool_dry_run] (Cleanup untracked paths from Git .gitignore)

  # Variables
  local dry_run="${1}";
  local gitignore_file;
  local gitignore_files;
  local gitignore_item;
  local gitignore_items;
  local gitignore_line;
  local gitignore_path;

  # Create temporary files
  gitignore_items=$(mktemp);
  gitignore_files=$(mktemp);

  # Travel through .gitignore paths
  LC_ALL=C find ./ -name .gitignore | sort > "${gitignore_files}";
  while read -r gitignore_file; do

    # Acquire folder path
    gitignore_path="${gitignore_file#./}";
    gitignore_path="${gitignore_path#.gitignore}";
    gitignore_path="${gitignore_path%/*}";
    if [ ! -z "${gitignore_path}" ]; then
      gitignore_path="${gitignore_path}/";
    fi;

    # Read .gitignore files
    while read -r gitignore_line; do

      # Ignore empty or commented lines
      if [ -z "${gitignore_line}" ] || [ "${gitignore_line:0:1}" = '#' ]; then
        continue;
      fi;

      # Expand paths
      if [ "${gitignore_line: -1}" = '/' ]; then
        LC_ALL=C find "${gitignore_path:-./}" -name "${gitignore_line%/}" -type d | sort > "${gitignore_items}";
      else
        LC_ALL=C find "${gitignore_path:-./}" -name "${gitignore_line}" | sort > "${gitignore_items}";
      fi;
      while read -r gitignore_item; do

        # Remove folders contents
        if [ -d "${gitignore_item}" ]; then
          gitignore_item=${gitignore_item%/};
          if [ ! -z "$(ls -A "${gitignore_item}")" ]; then
            echo "gitignoreclean: Removing folder contents '${gitignore_item}'";
            if [ ! -z "${dry_run}" ]; then
              find "${gitignore_item}/" -mindepth 1 -print;
            else
              find "${gitignore_item}/" -mindepth 1 -delete;
            fi;
          fi;
          echo "gitignoreclean: Removing folder '${gitignore_item}'";
          if [ -z "${dry_run}" ]; then
            rm -rf "${gitignore_item}";
          fi;

        # Remove files
        elif [ -f "${gitignore_item}" ]; then
          echo "gitignoreclean: Removing file '${gitignore_item}'";
          if [ -z "${dry_run}" ]; then
            rm -f "${gitignore_item}";
          fi;
        fi;

      done < "${gitignore_items}";
    done < "${gitignore_file}";
  done < "${gitignore_files}";

  # Cleanup
  rm -f "${gitignore_items}";
  rm -f "${gitignore_files}";
}
