#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Git Stash Helpers ===
alias gits='git stash';
alias gitsp='git stash -p';
alias gitspop='git stash pop';

# === Git Stash Untracked ===
function gitsu()
{
  # Usage: gitsu (Git stash with untracked files)

  # Stash differences
  git stash;

  # Stash untracked files
  git stash -u >/dev/null 2>&1 ||
    git ls-files --exclude-standard --others -z | xargs -0 rm -f;
}

# === Git Clean Tags ===
function gitcleantags()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitcleantags <branch_to_keep> (Cleanup unrequired git tags)';
    echo '';
    return;
  fi;

  # Variables
  local branch_keep=${1};

  # Delete tags
  git tag | grep -v "${branch_keep}" | xargs git tag -d;
}

# === Git One Branch Keeper ===
function gitonebranch()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitonebranch <remote> (Git remove non-default remote branches)';
    echo '';
    return;
  fi;

  # Variables
  local remote=${1};

  # Fetch remotes
  git fetch "${remote}";
  git fetch "${remote}" refs/heads/*:refs/heads/*;
  git fetch "${remote}" refs/tags/*:refs/tags/*;

  # Remove branches
  git branch -r | sed "s/${remote}\/\(.*\)/\1/" \
                | grep -v "HEAD" \
                | grep -v "$(git rev-parse --abbrev-ref HEAD)" \
                | sed 's/\x1b\[[0-9;]*m//g' \
                | xargs -n1 -I {} sh -c "echo -n \" Removing branch {} : \"; git push ${remote} :refs/heads/{};";

  # Remove tags
  git tag -l | sed 's/\x1b\[[0-9;]*m//g' \
             | xargs -n1 -I {} sh -c "echo -n \" Removing tag {} : \"; git push ${remote} :refs/tags/{}; echo -n \"  \"; git tag -d {};";
}

# === Git Untracked Paths Cleaner ===
function gitignoreclean()
{
  # Usage: gitignoreclean [bool_dry_run] (Cleanup untracked paths from Git .gitignore)

  # Variables
  local dry_run="${1}";
  local gitignore_exclusions;
  local gitignore_file;
  local gitignore_files;
  local gitignore_item;
  local gitignore_items;
  local gitignore_level;
  local gitignore_line;
  local gitignore_negated;
  local gitignore_parameters;
  local gitignore_path;

  # Create temporary files
  gitignore_items=$(mktemp);
  gitignore_files=$(mktemp);
  gitignore_negated=$(mktemp);

  # Travel through .gitignore paths
  LC_ALL=C find ./ -name .gitignore ! -path './.git/*' ! -path './.repo/*' | sort > "${gitignore_files}";
  while read -r gitignore_file; do

    # Acquire folder path
    gitignore_path="${gitignore_file#.gitignore}";
    gitignore_path="${gitignore_path%/*}";
    if [ -z "${gitignore_path}" ]; then
      gitignore_path='./';
    elif [ ! "${gitignore_path: -1}" = '/' ]; then
      gitignore_path="${gitignore_path}/";
    fi;

    # Access folder path
    pushd "${gitignore_path}" > /dev/null;

    # Parse negated strings
    gitignore_exclusions=();
    grep '^!' ./.gitignore | cut -c 2- > "${gitignore_negated}";
    while read -r gitignore_line; do
      if [ "${gitignore_line: -1}" = '/' ]; then
        gitignore_line="${gitignore_line%/}";
      fi;
      if [ "${gitignore_line:0:1}" = '/' ]; then
        gitignore_line="${gitignore_line#/}";
      fi;
      gitignore_exclusions+=(! -path "./${gitignore_line}");
    done < "${gitignore_negated}";

    # Read .gitignore file
    while read -r gitignore_line; do

      # Ignore empty, negated or commented lines
      if [ -z "${gitignore_line}" ] || [ "${gitignore_line:0:1}" = '#' ] || [ "${gitignore_line:0:1}" = '!' ]; then
        continue;
      fi;

      # Prepare parameters
      gitignore_parameters=(-mindepth 1);

      # Detect root
      if [ "${gitignore_line:0:1}" = '/' ]; then
        gitignore_line=${gitignore_line#/};
        gitignore_level=$(echo "${gitignore_line%/}" | tr -cd '/' | wc -c)
        gitignore_parameters+=(-maxdepth "$((gitignore_level + 1))");
      fi;

      # Detect folders
      if [ "${gitignore_line: -1}" = '/' ]; then
        gitignore_line=${gitignore_line%/};
        gitignore_parameters+=(-type d);
      fi;

      # Path criteria
      if [ -z "${gitignore_line##*/*}" ]; then
        gitignore_parameters+=(-path "*/${gitignore_line}");

      # Name criteria
      else
        gitignore_parameters+=(-name "${gitignore_line}");
      fi

      # Expand paths
      LC_ALL=C find ./ "${gitignore_parameters[@]}" ! -path '*/.git/*' ! -name '.gitignore' "${gitignore_exclusions[@]}" | sort > "${gitignore_items}";

      # Read found items
      while read -r gitignore_item; do
        gitignore_item=${gitignore_item#./};

        # Remove folders contents
        if [ -d "./${gitignore_item}" ]; then
          gitignore_item=${gitignore_item%/};
          if [ ! -z "$(ls -A "./${gitignore_item}")" ]; then
            echo -e " \e[1;33mgitignoreclean: \e[1;32mRemoving contents: \e[1;36m${gitignore_path}${gitignore_item} \e[1;37m[${gitignore_line} @${gitignore_path}]\e[0m";
            if [ ! -z "${dry_run}" ]; then
              find "./${gitignore_item}/" -mindepth 1 ! -path '*/.git/*' ! -name '.gitignore' -print;
            else
              find "./${gitignore_item}/" -mindepth 1 ! -path '*/.git/*' ! -name '.gitignore' -delete;
            fi;
          fi;
          echo -e " \e[1;33mgitignoreclean: \e[1;32mRemoving folder: \e[1;36m${gitignore_path}${gitignore_item} \e[1;37m[${gitignore_line} @${gitignore_path}]\e[0m";
          if [ -z "${dry_run}" ]; then
            find './' -name "${gitignore_item}" -mindepth 1 -maxdepth 1 ! -name '.gitignore' -exec rm -rf {} \;;
          fi;

        # Remove files
        elif [ -f "./${gitignore_item}" ]; then
          echo -e " \e[1;33mgitignoreclean: \e[1;32mRemoving file: \e[1;36m${gitignore_path}${gitignore_item} \e[1;37m[${gitignore_line} @${gitignore_path}]\e[0m";
          if [ -z "${dry_run}" ]; then
            find './' -name "${gitignore_item}" -mindepth 1 -maxdepth 1 ! -name '.gitignore' -exec rm -f {} \;;
          fi;
        fi;

      done < "${gitignore_items}";
    done < ./.gitignore;

    # Restore path
    popd > /dev/null;

  done < "${gitignore_files}";

  # Cleanup
  rm -f "${gitignore_items}";
  rm -f "${gitignore_files}";
}
