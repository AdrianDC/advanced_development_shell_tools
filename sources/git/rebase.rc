#!/bin/bash
#
# Copyright 2015-2020 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Git Rebase Helpers ===
alias gitra='git rebase --abort';
alias gitrc='git rebase --continue';
alias gitre='git rebase --edit-todo';
alias gitrs='git rebase --skip';

# === Git Rebase From Commit ===
function gitrf()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitrf <sha1> (Git rebase from a given commit)';
    echo '';
    return;
  fi;

  # Git rebase from a given commit
  git rebase "${1}^" -i;
}

# === Git Rebase Commits ===
function gitr()
{
  # Usage: gitr [count] (Git rebase the last commits)

  # Git rebase the last commits
  git rebase "HEAD~${1:-5}" -i;
}

# === Git Rebase All Commits ===
function gitrall()
{
  # Usage: gitrall (Git rebase all commits)

  # Git rebase all commits
  git rebase -i HEAD~$(($(git rev-list HEAD | wc -l) - 1));
}

# === Git Rebase And Edit From Commit ===
function gitrfedit()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitrfedit <sha1> (Git rebase and edit from a given commit)';
    echo '';
    return;
  fi;

  # Git rebase and edit from a given commit
  GIT_SEQUENCE_EDITOR="sed -i -e 's/pick/edit/g'" git rebase "${1}" -i;
}

# === Git Rebase And Edit Commits ===
function gitredit()
{
  # Usage: gitredit [count] (Git rebase and edit the last commits)

  # Git rebase and edit the last commits
  GIT_SEQUENCE_EDITOR="sed -i -e 's/pick/edit/g'" git rebase "HEAD~${1:-5}" -i;
}

# === Git Rebase Local Commits ===
function gitrbl()
{
  # Usage: gitrbl [remote] [branch] (Git rebase all local commits)

  # Variables
  local branch;
  local commits_count;
  local remote;

  # Get remote and branch
  remote=${1:-$(gitgetremote)};
  branch=${2:-$(gitgetbranch "${remote}")};

  # Get local commits count
  echo '';
  gitstat "${remote}" "${branch}";

  # Rebase local commits
  commits_count=$(git rev-list --left-right HEAD...FETCH_HEAD | grep -c '^<' | xargs echo -n);
  git rebase -i HEAD~"${commits_count}";
  echo '';
}

# === Git Rebase Over Remote Branch ===
function gitrb()
{
  # Usage: gitrb [remote] [branch] (Git rebase over remote branch)

  # Variables
  local branch;
  local remote;

  # Get remote and branch
  remote=${1:-$(gitgetremote)};
  branch=${2:-$(gitgetbranch "${remote}")};

  # Get local commits count
  echo '';
  gitstat "${remote}" "${branch}";

  # Rebase commits
  git rebase FETCH_HEAD;
  echo '';
}

# === Git Rebase Over Origin Branch ===
alias gitrbo='gitrb origin';
