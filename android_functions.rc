#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2016
# ======================================

# === Repo shortcuts ===
function reposypb()
{
  repo forall -c 'echo "Syncing project ${REPO_PROJECT}"; \
                  while true; do \
                    timeout 15 repo sync -j1 --current-branch --detach -f --force-broken --force-sync -c --no-clone-bundle --no-tags .; \
                    if [ $? -eq 0 ]; then \
                      echo "";
                      echo " Project ${REPO_PROJECT} : Fallback to old branch"; \
                      git fetch --quiet ${REPO_REMOTE} cm-13.0; \
                      git reset --hard FETCH_HEAD; \
                      break;
                    fi; \
                  done;';
}
function reposyp()
{
  repo forall -c 'echo "Syncing project ${REPO_PROJECT}"; \
                  while true; do \
                    timeout 15 repo sync -j1 --current-branch --detach -f --force-broken --force-sync -c --no-clone-bundle --no-tags .; \
                    if [ $? -eq 0 ]; then break; fi; \
                  done;';
}
alias repolx='nano .repo/local_manifests/updates.sh; .repo/local_manifests/updates.sh';
alias repop='repopick';

function reposyl()
{
  local currentdir=${PWD}; repor;
  if [ ! -z "$1" ] && [ -d "$1" ] && [ ! -z "$2" ] && [ -d "$2" ]; then
    cd "./$1";
    git fetch "$2/$1";
    reposy .;
  fi;
  cd "$currentdir";
}

function repounshallow()
{
  repo forall -c 'gitbranch=${REPO_RREV##*/}; \
    echo ""; echo "Unshallowing project ${REPO_PROJECT} [${REPO_REMOTE}/${gitbranch}]"; \
    git fetch --unshallow ${REPO_REMOTE};';
}
function repothis()
{
  export currentdir=${PWD};
  repo forall -c ' \
    if [ "$currentdir" = "$(pwd)" ]; then \
      echo " Current project: ${REPO_PROJECT} [${REPO_REMOTE}/${REPO_RREV##*/}]"; \
    fi;';
}


function repoupdate()
{
  repo --version;
  echo "";
  if [ ! -d ~/bin ]; then mkdir ~/bin; fi;
  curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo;
  chmod a+x ~/bin/repo;
  echo "";
  repo --version;
}
function .repoupdate()
{
  cd .repo/repo/;
  git log --pretty=oneline -10;
  echo "";
  git fetch origin stable;
  git reset --hard origin/stable;
  echo "";
  git branch -vv;
  echo "";
  git log --pretty=oneline -10;
  cd ../../;
}

# === Android builds ===
function makesep()
{
  cwd=$(pwd);
  repor;
  export USE_NINJA=false;
  if [ -d ./system/sepolicy ]; then
    mmm -B -j$(grep -c ^processor /proc/cpuinfo) ./system/sepolicy/ | tee $LogFile;
  else
    mmm -B -j$(grep -c ^processor /proc/cpuinfo) ./external/sepolicy/ | tee $LogFile;
  fi;
  export USE_NINJA=;
  cd $cwd;
}
function mmmall() { mmm $1 $(find -maxdepth 3 -name 'Android.mk' -printf '%h\n' | grep -v 'test' | uniq -u | sort -u); }

# === Repo mmm Lister ===
function mmml()
{
  logfile=${ANDROID_DEV_DRIVE}/Scripts/script_logs.txt;
  rm -f $logfile;
  mmm -B $@ | tee $logfile;
  InstallLog=$(grep -a "target/product/.*/system" $logfile | sort | uniq);
  for FilePath in ${InstallLog[*]}; do
    if [[ "$FilePath" =~ "/system" && ! "$FilePath" =~ "/NOTICE_FILES" ]]; then
      FilePath=$(printf "$FilePath" | tail -1 \
               | sed "s/\x1B\[[0-9;]*[JKmsu]//g" \
               | sed "s/.*\/\([^\[]*.zip\).*/\1/g");
      if [ -f "$FilePath" ]; then
        printf " \e[1;36m$FilePath\e[0m";
      fi;
    fi;
  done;
  echo "";
  echo "";
}

# === ADB Commit Pusher
function adbpc()
{
  tmpfile=$(mktemp);
  git show --oneline --name-status | tail -n +2 > $tmpfile;
  adbr;
  while read line; do
    mode=$(echo $line | cut -c 1);
    file=$(echo $line | cut -c 3-);
    case $mode in
      A|M)
        adbpf $file;;
      D)
        if [[ "$file" =~ "proprietary" ]]; then
          file=$(printf "$file" | sed "s/.*proprietary\(.*\)/\/system\1/g");
        else
          file=$(printf "$file" | sed "s/.*\(system.*\)/\/\1/g");
        fi;
        echo -e " \e[1;36mDeleting $file...\e[0m";
        printf "   ";
        adb shell rm $file;
        echo "";;
      *);;
   esac;
  done < $tmpfile;
  rm $tmpfile;
}

# === Research shortcuts ===
function highlight() { perl -pe "s/$1/\e[1;0;31m$&\e[0m/ig"; }
function grepb()
{
  GREP_COLORS='fn=1;1' grep -air --exclude={*.o,*.a,*.cmd,*.ko} --exclude-dir="\.git" --exclude-dir="\.repo" "$*" .;
}
function grepbs()
{
  GREP_COLORS='fn=1;1';
  for file in $(find . -type f -not -path "*.git/*" -not -path "*.repo/*" | sort); do
    if [ -f "$file" ]; then
      found=$(strings $(readlink -f $file) | grep -ai "$*");
      if [ ! -z "$found" ]; then
        echo -e "\e[1;31m$file :\e[0m $found";
      fi;
    fi;
  done;
}
function grepbn()
{
  grep -ailr --color=never --exclude={*.o,*.a,*.cmd,*.ko} --exclude-dir="\.git" --exclude-dir="\.repo" "$*" .;
}
function gck()
{
  GREP_COLORS='fn=1;1';
  for file in $(find . -name "Kconfig" -o -name "Makefile" -not -path "*.git/*" -not -path "*.repo/*" | sort); do
    found=$(strings $(readlink -f $file) | grep -ai "$*");
    if [ ! -z "$found" ]; then
      echo -e "\e[1;31m$file :\e[0m $found";
    fi;
  done;
}
function gca()
{
  GREP_COLORS='fn=1;1';
  for file in $(find . -name "*.mk" -not -path "*.git/*" -not -path "*.repo/*" | sort); do
    found=$(strings $(readlink -f $file) | grep -ai "$*");
    if [ ! -z "$found" ]; then
      echo -e "\e[1;31m$file :\e[0m $found";
    fi;
  done;
}
alias grepi='grep -i';
alias g='grepb';
alias gs='grepbs';
alias gn='grepbn';
function glc() { GREP_COLORS='fn=1;1' grep --include \*.c --include \*.cpp --include \*.h -anr '.\{80,\}' .; }
function glj() { GREP_COLORS='fn=1;1' grep --include \*.java -anr '.\{100,\}' .; }
function gle() { GREP_COLORS='fn=1;1' grep --include \*.c --include \*.cpp --include \*.h  --include \*.java -anr '.* $' .; }

# === ZIP Signer ===
function zipsign()
{
  local cwd=$(pwd);
  if [ ! -z "$1" ]; then  
    for file in $@; do
      path="$(readlink -f $file)";
      cdscripts;
      $(getscripts)/android_sign_zip.sh "$path" "inline";
      cd $cwd;
    done;
  else
    cdscripts;
    $(getscripts)/android_sign_zip.sh "" "inline";
    cd $cwd;
  fi;
}

# === Updates Helpers ===
function twrpbluekernel()
{
  local cwd=$(pwd);
  cdtwrp;
  repor;

  local devicetree=$(totwrp)/device/sony/hayabusa;
  cp -v $(tocm13)/out/target/product/hayabusa/kernel $devicetree/prebuilts/kernel;
  cd $devicetree;
  git reset;
  git add -Av;
  cd ../../../;
  echo "";

  local devicetree=$(totwrp)/device/sony/mint;
  cp -v $(tocm13)/out/target/product/mint/kernel $devicetree/prebuilts/kernel;
  cd $devicetree;
  git reset;
  git add -Av;
  cd ../../../;
  echo "";

  local devicetree=$(totwrp)/device/sony/tsubasa;
  cp -v $(tocm13)/out/target/product/tsubasa/kernel $devicetree/prebuilts/kernel;
  cd $devicetree;
  git reset;
  git add -Av;
  cd ../../../;
  echo "";

  cd $cwd;
}

# === Kernel Helpers ===
function meldtwo()
{
  read -e var1;
  if [ ! -z "$var1" ]; then var2=$var1; fi;
  meld $1/$var2 $2/$var2;
}

# === Terminal Shortcuts ===
function termsp()
{
  ROM=$(getine $1 CM-13.0);
  gnome-terminal \
    --tab --title="Repo" --working-directory="${ANDROID_DEV_DRIVE}/$ROM/" \
    --tab --title="Device" --working-directory="${ANDROID_DEV_DRIVE}/$ROM/device/sony/huashan/" \
    --tab --title="Kernel" --working-directory="${ANDROID_DEV_DRIVE}/$ROM/kernel/sony/msm8960t/" \
    --tab --title="Vendor" --working-directory="${ANDROID_DEV_DRIVE}/$ROM/vendor/sony/" \
    --tab --title="Desktop" --working-directory="$(xdg-user-dir DESKTOP)";
}
function rmempty()
{
  find . -depth -empty -not -name \*.nomedia -print;
  printf "  \e[1;31mDelete empty files and folders (y/N) ?\e[0m ";
  read key;
  if [[ "$key" == "y" || "$key" == "Y" ]]; then
    find . -depth -empty -not -name \*.nomedia -delete;
  fi;
}

# === Zip AutoPackAndSign ===
function autozipsign()
{
  name=$(echo "$1" | sed 's/\///g');
  rm $name.zip;
  cd $name/;
  rm -f META-INF/CERT.RSA;
  rm -f META-INF/CERT.SF;
  rm -f META-INF/MANIFEST.MF;
  rm -rf META-INF/com/android;
  zip ../$name.zip * -r;
  cd ..;
  if [ -z "$2" ]; then
    zipsign $name.zip;
  fi;
  adb sideload $name.zip
}

# === Log Cleaner ===
function logcl() { cat $1 | sed 's/0x[[:xdigit:]]\{8,8\}/0xaddress/g' | tr -d '\015' > $1.clean; }

# === ADB Tests ===
function adbfb() { adbr; adbs mv $1 $1.temp; }
function adbfr() { adbr; adbs mv $1.temp $1; }

# === Kill and Log Debug ===
function adblk()
{
  printf "Process name : ";
  if [ ! -z "$1" ]; then
    name="$1"; echo "";
  else
    read name;
  fi;
  echo -e \\033c; clear;
  adbs ps | grep -i $name;
  adb logcat -c;
  adb shell pkill -f $name;
  adbs ps | grep -i $name;
  printf "" >adb.log;
  adb logcat | tee -a adb.log;
}

# === Shared assets ===
function getine() { if [ ! -z "$1" ]; then echo $1; else echo $2; fi; }

# === Backtracing shortcuts ===
alias adebug='repor; repos; adbr; \
              adb shell setprop debug.db.uid 100000; \
              adb forward tcp:5039 tcp:5039; \
              gdbclient /system/bin/mediaserver :5039 1141';
#alias ad2li='addr2line -f -e /media/adriandc/AndroidDev/CM-13.0/out/target/product/huashan/symbols/system/lib/libc.so';

# === WIP shortcuts ===
function meldk() { printf " Subpath : "; read a; meld ./$a $1/$a; }
alias permme='UserName="$(whoami)"; sudo chown -cRv $UserName:$UserName ./';
alias touchall='find . -mindepth 1 -exec touch {} \;';
alias dlog='path=$(xdg-user-dir DESKTOP); xargs log.$(date).log';
function dupl() { cat $1 | sort | uniq -cd; }
alias lsmk='ls -1 | sed "s/\(.*\)/    utils\/\1 \\\/"';
function gitkdev()
{
  chromium-browser https://github.com/CyanogenMod/android_kernel_sony_msm/blob/cm-13.0/$1;
  chromium-browser https://github.com/CyanogenMod/android_kernel_google_msm/blob/cm-13.0/$1;
  chromium-browser https://github.com/CyanogenMod/android_kernel_sony_msm8960t/blob/cm-12.1/$1;
}

function meldt() { meld $1 ../msm8960t/$1; }
function adbkillsetup() { adb root; adb wait-for-device; while [ 1 ]; do adb shell kill $(adb shell ps | grep setup | awk '{ print $2 }'); done; }
function adbtinymix() { adb shell /system/bin/tinymix; }

# === Apps shortcuts ===
function adbu() { echo ""; echo " [ Launching '$1' ]"; echo ""; \
                  echo "    Optimizing..."; adb $2 shell pm force-dex-opt $1; \
                  echo "    Killing..."; adb $2 shell pkill $1; echo ""; }
function ntf() { notify-send "$*"; }

# === Git vars ===
gituserdefault='AdrianDC';
gitremotedefault='AdrianDC';
gitreviewdefault='github';
gitrebasedefault=25;

# === Git commits ===
alias gitc='git commit -S';
alias gitcs='git commit -S -s';
alias gitca='git commit -S --amend';
alias gitcae='git commit -S --amend --no-edit';
alias gitcauthor='git commit -S --amend --no-edit --author="$(git config --global --get user.name) <$(git config --global --get user.email)>"';
alias gitcid='scp -p -P 29418 $gituserdefault@review.cyanogenmod.org:hooks/commit-msg .git/hooks/; chmod u+x ./.git/hooks/commit-msg; git commit --amend --no-edit; git commit --amend';
alias gitcidh='scp -p http://review.cyanogenmod.org:hooks/commit-msg .git/hooks/; chmod u+x ./.git/hooks/commit-msg; git commit --amend --no-edit; git commit --amend';
alias gitrevert='git revert -S --no-edit';

# === Git commit with infos ===
function gitcci()
{
  clear; url=$1;
  if [[ $url =~ 'github' && ! $url =~ '.patch' ]]; then url='$url.patch'; fi;
  file=$(mktemp);
  curl -s $url 2>nul >"$file";

  local line_subject=$(($(sed -n "1,/Subject:/=" "$file" | tail -1)+1));
  local line_messageend=$(($(sed -n "1,/---/=" "$file" | tail -1)-1));
  local subject=$(grep "Subject: " "$file" | tail -1 | cut -c10-);

  cat $file;
  git add -Ap;
  git commit \
    -m "$subject"$'\n'"$(sed -n "${line_subject},${line_messageend}p" "$file")" \
    --date="$(grep "Date:" "$file" | tail -1) \
    --author="$(grep "Author:" "$file" | tail -1);

  rm "$file";
}

# === Git pushing ===
function gitpu()
{
  remote=$(getine $1 gitremotedefault);
  if [ ! -z "$2" ]; then
    branch=$2;
  else
    branch=$(repogetbranch);
  fi;
  echo "";
  command="git push -f $remote HEAD:refs/heads/$branch";
  printf "  $command [Enter] ? "; read key;
  echo "";
  git fetch $remote $branch;
  $command;
  echo "";
}
alias gitpa='gitpu $gitremotedefault';
alias gitpa14='gitpu $gitremotedefault cm-14.1';
alias gitpa6='gitpu $gitremotedefault aosp-6.0';
alias gitpaa6='gitpu $gitremotedefault android-6.0';
alias gitpala='gitpu $gitremotedefault LA.UM.5.5_rb1.10';
alias gitpam='gitpu $gitremotedefault multirom';
alias gitpama='gitpu $gitremotedefault master';
alias gitpamm='gitpu $gitremotedefault marshmallow';
alias gitpan='gitpu $gitremotedefault nougat';
alias gitpat='gitpu $gitremotedefault twrp';
alias gitpp='gitpu project master';
alias gitpx='gitpu xperia';
function gitpacaf() { branch=$(getine $1 "LA.AF.1.2.1");
                      git push -f -u https://github.com/AdrianDC/android_kernel_sony_msm8x60.git HEAD:refs/heads/$branch; }
alias gitpb='gitpu backup';
alias gitpaicp='gitpu aicp mm6.0';
alias gitpold='gitpu old';

function gitpo() { command="git push origin $(getine $1 $(repogetbranch))"; \
                   echo ""; printf " \e[1;31mTarget: \e[0m";
                   git remote -v | grep origin | head -1 | cut -f2 | cut -d' ' -f1;
                   echo -e " \e[1;37mCommand: $command\e[0m"; printf "    > Proceed with origin push (y/N) ? "; read key; \
                   if [[ "$key" == "y" || "$key" == "Y" ]]; then echo ""; $command; fi; echo ""; }
alias gitpf='git push -f';
function gitck() { branch=$(getine $1 $(repogetbranch)); git fetch github $branch >/dev/null; git diff HEAD github/$branch; }
function gitcn() { branch=$(getine $1 $(repogetbranch)); git fetch github $branch; git diff HEAD github/$branch; }

# === Git push helpers ===
function gitpamrom()
{
  git cherry-pick 3526e39dae113144667350f7babbd80d494a5756;
  git cherry-pick 4590f1ad4f1bdadce3f5d1d2af6c4c2c6a0867f8;
  git cherry-pick 271719c6d4353ba210c69f1cdaf03464b56988c5;
  git cherry-pick 9587bac59e9a17bd3631cab64173ca99edeeb549;
  gitpa multirom;
  git reset --hard HEAD~4;
}

# === Git resetting ===
alias gitrh='git reset FETCH_HEAD --hard';
alias githd='git reset HEAD --hard';
alias gitcl='git reset HEAD --hard; git stash -u';
alias gitro='git reset HEAD^ --hard';
alias gitsl='git reset HEAD^; gitap; gitcae';
alias gitrl='git revert HEAD -n; git commit -m "Revert"; git reset HEAD^; git add -p';
alias gitri='git reset HEAD^';
alias gitrt='git reset --hard';

# === Git rebasing ===
function gitr() { git rebase HEAD~$(getine $1 $gitrebasedefault) -i; }
function gitredit() { GIT_SEQUENCE_EDITOR="sed -i -e 's/pick/edit/g'" git rebase HEAD~$(getine $1 $gitrebasedefault) -i; }
function gitrfedit() { GIT_SEQUENCE_EDITOR="sed -i -e 's/pick/edit/g'" git rebase $1 -i; }
function gitrf() { git rebase $1^ -i; }
alias gitra='git rebase --abort';
alias gitrc='git rebase --continue';
alias gitre='git rebase --edit-todo';
alias gitrs='git rebase --skip';
function gitrb()  { branch=$(getine $1 $(repogetbranch)); git fetch github $branch; git rebase github/$branch; }
function gitrbo() { branch=$(getine $1 $(repogetbranch)); git fetch origin $branch; git rebase origin/$branch; }
function gitrbs() { branch=$(getine $1 $(repogetbranch)); git fetch source $branch; git rebase source/$branch; }
function gitrbm() { branch=$(getine $1 LA.AF.1.2.1_rb1.6); git fetch mifl $branch; git rebase mifl/$branch; }
function gitrbad() { branch=$(getine $1 $(repogetbranch)); git fetch AdrianDC $branch; git rebase AdrianDC/$branch; }
function gitrbma() { branch=$(getine $1 cm-13.0); git fetch ADC $branch; git rebase ADC/$branch; }

# === Git branch ===
function gitbc() { branch=$(getine $1 $(repogetbranch)); review=$(getine $2 $gitreviewdefault);
                   git fetch $review $branch; git branch $branch --track $review/$branch; git checkout $branch; }
function gitbt() { branch=$(getine $1 $(repogetbranch)); git branch $branch; git checkout $branch; }
alias gitbd='git branch -D';
alias gitbv='git fetch $gitreviewdefault $(git rev-parse --abbrev-ref HEAD); git branch -vv';
function gitbvv() { branch=$(getine $1 $(repogetbranch));
                    git fetch origin $branch;
                    git branch tempbck;
                    git branch -D $branch;
                    git branch $branch --track origin/$branch;
                    git checkout $branch;
                    git reset --hard tempbck;
                    git branch -D tempbck;
                    echo ""; gitbv; }
alias gitrv='git remote -v';
function gitremoteset()
{
  git remote add $1 $2 2> /dev/null;
  git remote set-url $1 $2;
  git remote -v | grep $1;
}
function gitremoteadaptset()
{
  local repository='CyanogenMod';
  local remote='origin';
  if [ ! -z "$1" ]; then remote="$1"; fi;
  if [ ! -z "$2" ]; then repository="$2"; fi;
  local target=$(git remote -v \
               | grep -i github \
               | head -n 1 \
               | awk '{ print $2 }');
  if [ -z "$target" ]; then
    local project=$(git remote -v \
                 | grep -v -i github \
                 | head -n 1 \
                 | awk '{ print $2 }' \
                 | sed 's/.*\.com\///' \
                 | sed 's/platform/android/' \
                 | sed 's/\//_/g');
    echo $project;
    target='http://github.com/'$repository'/'$project;
  fi;
  echo $target;
  target=$(echo $target \
         | sed "s/\(http:\/\/\|https:\/\/\|git:\/\/\)\(.*\)\/[^\/]*\/\(.*\)/http:\/\/\2\/$repository\/\3/");
  if [ ! -z "$3" ]; then
    target=$(echo "$target" | sed "s/$3//");
  fi;
  gitremoteset $remote $target;
}
function gitraa()  { gitremoteadaptset 'AdrianDC' 'AdrianDC' ''; }
function gitrao()  { gitremoteadaptset 'origin' 'CyanogenMod' ''; }
function gitraoo() { gitremoteadaptset 'origin' "$1" ''; }
function gitraot() { gitremoteadaptset 'origin' 'TheMuppets' ''; }
function gitraos() { gitremoteadaptset 'origin' 'sonyxperiadev'; }
function gitrat()  { gitremoteadaptset 'twrp' 'TeamWin' ''; }
function gitrai()  { gitremoteadaptset 'aicp' 'AICP' 'android_'; }
alias gitraau='git remote set-url AdrianDC';
alias gitraou='git remote set-url origin';
function gitrab()  { gitremoteset backup https://github.com/AdrianDC/android_development_backup.git; }
function gitradb() { gitremoteset backup https://github.com/AdrianDC/device-sony-dora-bringup.git; }
function gitrah()  { gitremoteset backup https://github.com/AdrianDC/aosp_development_msm8960.git; }
function gitras()  { gitremoteset backup https://github.com/AdrianDC/aosp_development_msm8996.git; }
alias gitch='git checkout';
alias gitbaclean='git fetch $gitremotedefault; git branch -r | grep $gitremotedefault | sed "s/$gitremotedefault\/\(.*\)/\1/g" | xargs -L 1 git push $gitremotedefault --delete';

# === Git adds ===
alias gitaa='git add . -Av';
alias gitap='git add -p';
alias gitaap='git add . -Ap';
alias gitacf='gitap; gitcae; gitpf';

# === Git cherry-picks ===
alias gitcp='git cherry-pick';
alias gitcpc='git reset; git cherry-pick --continue';
alias g='gedit';
function gitcpf() { git fetch $1; git cherry-pick FETCH_HEAD; }
function gitcpl() { while [ 1 ]; do echo ""; printf " Commit : "; read commit; gitcp $commit; done; echo ""; }
function gitcpa() { a="$1"; b="$2"; if [ -z "$b" ] && [ -z "${a##*[!0-9]*}" ]; then b="$a"; a=""; fi;
                    git fetch $gitremotedefault $(getine $b $(repogetbranch)); git cherry-pick FETCH_HEAD~$(getine $a 0); }
function gitcpal()
{
  if [ -z "$2" ]; then
    echo "usage: gitcpal branch commitcount";
    return;
  fi;
  git cherry-pick --abort;
  git fetch $gitremotedefault $(getine $1 $(repogetbranch));
  git cherry-pick $2^..FETCH_HEAD;
}
function gitfcp() { git fetch $1 $2; git cherry-pick FETCH_HEAD; }
function gitcpr()
{
  git show $1 --no-color | sed "s/$2/$3/g" | patch;
}
function gitcpd()
{
  if [ -z "$3" ]; then
    echo " Usage: gitcpd from_folder to_folder commit_sha1";
    return;
  fi;

  git cherry-pick $3;
  for file in $(git diff-tree --no-commit-id --name-only -r $3); do
    file_target=$(echo $file | sed "s/$1/$2/");
    cp -v $file $file_target;
    git add -v $file_target;
  done;
}
alias gitclone="git clone --single-branch -b cm-13.0";
function gitclonedevice()
{
  if [ -z "$1" ]; then
    echo " Usage: gitclonedevice brand_codename";
  else
    gitclone https://github.com/CyanogenMod/android_device_$1;
  fi;
}
function gitcpaicp()
{
  git fetch aicp mm6.0;
  git reset --hard aicp/mm6.0;
  git fetch origin cm-13.0;
  echo "";
  echo -e "  \e[1;34m\e[4;34mBranch : origin/cm-13.0\e[0m";
  git log --pretty=oneline -n 6 origin/cm-13.0;
  echo "";
  echo -e "  \e[1;34m\e[4;34mBranch : aicp/mm6.0\e[0m";
  git log --pretty=oneline -n 6 aicp/mm6.0;
  echo "";
  printf "  \e[1;34m\e[4;34mNumber of commits :\e[0m ";
  read cnt;
  git cherry-pick FETCH_HEAD~$cnt..FETCH_HEAD;
  echo "";
  printf "  \e[1;34m\e[4;34mPress Enter to diff with origin/cm-13.0 :\e[0m ";
  read key;
  git diff HEAD origin/cm-13.0;
  echo "";
  headsha1=$(git log --max-count=1 --format=format:%H -- .);
  for i in `seq $(($cnt-1)) -1 0`; do
    echo -e " \e[1;34m\e[4;34m===[ $headsha1~$i ]===\e[0m";
    echo '';
    git reset --hard $headsha1~$i;
    git show HEAD;
    gitstat aicp mm6.0;
    gitpushreview http://gerrit.aicp-rom.com AICP for mm6.0;
    gitpushreview http://gerrit.aicp-rom.com AICP heads mm6.0;
    echo "";
  done;
}

# === GitHub Url Cherry-Pick ===
function gitcpu()
{
  if [ -z "$1" ]; then
    echo " Usage: gitcpu githuburltocommit [branch]";
    return;
  fi;

  link="$1";
  project="$(echo "$link" \
           | sed 's/.*\(github.com\/.*\)\/commit\/.*/http:\/\/\1/')";
  commit="$(echo "$link" \
          | sed 's/.*\/commit\/\(.*\)/\1/')";

  if [ ! -z "$2" ]; then
    branch="$2";
  else
    branch="cm-13.0";
  fi;

  if [ -z "$project" ] || [ -z "$commit" ]; then
    echo " Error: Not a GitHub commit url '$link'";
    return;
  fi;

  git fetch $project $branch;
  echo "";
  git show $commit --oneline --stat;
  echo "";
  git cherry-pick $commit;
}

# === GitHub Url Apply Test ===
function gitcpupt()
{
  if [ ! -z "$2" ] && [ ! -z "$3" ]; then
    echo "$2";
    curl $1.patch \
        | sed "s/$2/$3/" \
        | git apply -v --index;
  elif [ ! -z "$1" ]; then
    curl $1.patch \
        | git apply -v --index;
  else
    git am --continue;
  fi;
}

# === Git stash ===
alias gits='git stash';
alias gitsp='git stash -p';
alias gitsu='git stash -u';
alias gitspop='git stash pop';

# === Git tools ===
alias gitd='git diff';
function gitdi()
{
  git diff --name-status;
  git ls-files --others --exclude-standard | awk '{print "U       " $0}';
}
alias gitlo='git log --pretty=oneline';
alias gitloo='git log --pretty=format:"%C(yellow)%h %Cred%ad %Creset%s" --date=short --all --';
alias gitshow='git show --name-status;';
alias gitshf='git show --pretty=full;';
alias gitlc='git show --name-only --oneline';
alias gitdfs='git diff-tree --no-commit-id --name-status -r';
function gitdf()
{
  if [ -z "$2" ]; then
    echo " Usage: gitdf sha1commit filepath";
    return;
  fi;
  git diff $1^:$2 $1:$2;
}

function gitsf() { echo ""; for i in `seq 1 $(getine $1 1)`; do
                     gitlc HEAD~$(($i-1)); echo ""; done; }
function gitsfd() { echo ""; for i in $(git log --format=format:%H -- $(getine $1)); do
                      gitlc $i; echo ""; printf " > Press Enter... "; read key; done; }
alias gitmt='git mergetool';
function gitme()
{
  path=$(timeout 1 git mergetool 2>/dev/null \
       | head -n 2 \
       | tail -1);
  if [ -f "$path" ]; then
    gedit "$path";
    echo '';
    printf "${path} ? [Enter] ";
    read;
    echo '';
    git add "$path";
  else
    echo " '$path' not found...";
  fi;
}
function gitmte()
{
  git diff --name-only | uniq;
  echo "";
  for file in $(git diff --name-only | uniq); do
    printf " - $file : ";
    gedit $file;
    printf "Done ? [Enter / Ctrl+C] ";
    read;
    git add $file;
  done;
}
alias githi='git update-index --assume-unchanged';
alias gitsh='git update-index --no-assume-unchanged';
alias gitlod='git log --pretty=oneline --';
function gitloc() { path=$(xdg-user-dir DESKTOP);
                    git log --pretty=oneline --no-merges HEAD -- . | tee $path/gitloc$1.full.log;
                    cat $path/gitloc$1.full.log | cut -c 42-| sort | tee $path/gitloc$1.comp.log; }
function gitlos()
{
  if [ ! -z "$2" ]; then cnt=$2; else cnt=30; fi;
  echo -e " \e[1;37mSearching for $1 in last $cnt commits...\e[0m";
  echo "";
  for sha1 in $(git log --max-count=$cnt --format=format:%H -- .); do
    if [ ! -z "$(git show $sha1 | grep -i "$1")" ]; then
      git show --name-only --oneline $sha1; echo "";
    fi;
  done;
}
function gite() { gedit $1; printf "Done ? [Enter] "; read; git add $1; }
alias gitrerere='git config --global rerere.enabled';
alias gitdiffpermhide='git config core.filemode false';
alias gitdiffpermshow='git config core.filemode true';
alias gpglist='gpg --list-secret-keys --keyid-format LONG';
alias gpgsilent='echo "no-tty" >> ~/.gnupg/gpg.conf';
alias gpgenable='git config --global commit.gpgsign true';
alias gpgdisable='git config --global commit.gpgsign false';
alias gpgsigning='git config --global user.signingkey';
alias gitshowsg='git config --global alias.logs "log --show-signature"';
alias gitpwstore='git config --global credential.helper store';
alias gitfix='rm -fv .git/COMMIT_EDITMSG*; rm -fv .git/.COMMIT_EDITMSG.swp';

# === Git mergers ===
function gitmerges()
{
  if [ ! -z "$2" ]; then cnt=$2; else cnt=30; fi;
  echo "";
  echo -e " \e[1;37mSearching mergeable commits in $1 tree...\e[0m";
  echo "";
  git rev-list $1 --reverse --pretty=oneline -- . \
    | tail -n $cnt \
    | while read line;
  do
    sha1=$(echo $line | cut -c -40);
    title=$(echo $line | cut -c 42-);
    if [ -z "$(git rev-list HEAD --pretty=oneline -- . \
       | grep -i "$title")" ]; then
      echo -e " \e[1;31m$sha1 : \e[1;37m$title\e[0m";
      git cherry-pick $sha1;
      git reset --hard HEAD;
      echo "";
    fi;
  done;
}

# === Git repos / folders comparator ===
function gitlodc()
{
  dirlog=$(getine $3 ".");
  if [ -z "$2" ]; then
    echo " Usage: gitlodc repo_one_path repo_two_path sub_folder [sort]";
    return;
  fi;

  dircur=$(pwd);
  tmpdir=$(mktemp -d);
  cd "$1";
  gitlod "$dirlog" | cut -d' ' -f2- > "$tmpdir/gitdir1.log";
  if [ -z "$4" ]; then
    sort "$tmpdir/gitdir1.log" -o "$tmpdir/gitdir1.log";
  fi;
  cd "$2";
  gitlod "$dirlog" | cut -d' ' -f2- > "$tmpdir/gitdir2.log";
  if [ -z "$4" ]; then
    sort "$tmpdir/gitdir2.log" -o "$tmpdir/gitdir2.log";
  fi;
  meld "$tmpdir/gitdir1.log" "$tmpdir/gitdir2.log";
  rm -rf "$tmpdir";
  cd "$dircur";
}

# === Git kernels meld  ===
function gitkmeld()
{
  subdir=$(getine $2 "");
  if [ -z "$1" ]; then
    echo " Usage: gitkmeld second_kernel_path sub_folder";
    return;
  fi;

  meld ./$subdir/ $1/$subdir/;
}

# === Git killers ===
function gitonebranch()
{
  git fetch AdrianDC;
  git fetch AdrianDC refs/heads/*:refs/heads/*;
  git fetch AdrianDC refs/tags/*:refs/tags/*;
  git branch -r | sed 's/AdrianDC\/\(.*\)/\1/' \
                | grep -v "HEAD" \
                | grep -v $(git rev-parse --abbrev-ref HEAD) \
                | xargs -I {} sh -c 'printf " Removing branch {} : "; git push AdrianDC :{};';
  git tag -l | xargs -I {} sh -c 'printf " Removing tag {} : "; git push AdrianDC :{}; printf "  "; git tag -d {};';
}

# === Compilations ===
alias kernelcfg='make ARCH=arm CROSS_COMPILE=arm-linux-androideabi- cm_viskan_huashan_defconfig; \
                 cp -fv ./.config ./arch/arm/configs/cm_viskan_huashan_defconfig; rm -f ./.config';
alias kernelcln='rm ';

# === Linux Commands ===
function gohibernate() { \
                         sudo swapon -a; \
                         sudo swapon -s; \
                         sudo pm-hibernate; \
                       }

# === Linux Functions ===
function mtpmountdisable()
{
  gsettings set org.cinnamon.desktop.media-handling automount-open false;
  gsettings set org.cinnamon.desktop.media-handling automount false;
}

# === Debug builds ===
function kernelmassbuilder()
{
  CurHead=3bb6504b937f9cd4828a78c45c0194752f67d37e;
  Counter=760;

  while [ $Counter -ge 0 ]; do
    echo $Counter
    git reset --hard $CurHead~$Counter;
    kerzip $Counter;
    Counter=$((Counter - 10));
  done;
}

# === BACKUP : Git patchs ===
function gitacp()
{
  clear; url=$1; echo $url;
  #url="http://kernel.opensuse.org/cgit/kernel/patch/?id=620e5050827008ab207a8dfcc44cb79f07f1942c";
  if [[ ! $url =~ '.patch' ]]; then url='$url.patch'; fi;
  curl -s $url 2>nul > /tmp/bash_android_tmp.patch;
  git apply --stat "/tmp/bash_android_tmp.patch";
  git am --abort;
  git am -3 "/tmp/bash_android_tmp.patch";
}

# === BACKUP : gerrit-cherry-pick ===
alias gerrit-cherry-pick='if ! hash gerrit-cherry-pick 2>/dev/null; then \
                            curl -Lo ~/bin/gerrit-cherry-pick http://review.cyanogenmod.org/tools/bin/gerrit-cherry-pick; \
                            chmod +x ~/bin/gerrit-cherry-pick; \
                          fi; \
                          gerrit-cherry-pick';

# find . -type f | cut -c 2- | xargs adb shell ls -l

