# ======================================
#   Developed by Adrian DC - 2015-2016
# ======================================

# === Clear Screen ===
alias cls='echo -e \\033c; clear';

# === Clipboard ===
function toclip() { xclip -selection c; }

# === Repo shortcuts ===
function repor()
{
  local repodir=${PWD};
  while [[ "${repodir}" != '/' && ! -d "${repodir}/.repo" ]]; do
    repodir=$(readlink -f "${repodir}/..");
  done;
  if [ -d "${repodir}/.repo" ]; then
    cd ${repodir};
  fi;
}
function repos()
{
  local currentdir=${PWD}; repor;
  if [ -f ./build/envsetup.sh ]; then
    local device=$(getine "$1" "huashan");
    source ./build/envsetup.sh; croot;
    breakfast $device;
  else
    echo "Android Repo not found...";
  fi;
  cd "$currentdir";
}
function reposaosp()
{
  local currentdir=${PWD}; repor;
  if [ -f ./build/envsetup.sh ]; then
    local device=$(getine "$1" "huashan");
    source ./build/envsetup.sh; croot;
    lunch aosp_${device}-userdebug;
  else
    echo "Android Repo not found...";
  fi;
  cd "$currentdir";
}
alias repolx='nano .repo/local_manifests/updates.sh; .repo/local_manifests/updates.sh';
alias reposi='repo sync .';
alias reposy='repo sync -j$(grep -c ^processor /proc/cpuinfo) --current-branch --detach -f --force-broken --force-sync -c --no-clone-bundle --no-tags';
function reposycl()
{
  repo forall -c 'echo "Cleaning project ${REPO_PROJECT}"; \
                  git rebase --abort >/dev/null 2>&1; \
                  git stash -u >/dev/null 2>&1; \
                  git reset --hard HEAD >/dev/null 2>&1;';
  repo sync -j$(grep -c ^processor /proc/cpuinfo) --current-branch --detach -f --force-broken --force-sync -c --no-clone-bundle --no-tags;
}
alias repop='repopick';
function repocache()
{
  local currentdir=$(pwd);
  repor;
  if [ ! -z "$1" ]; then ./prebuilts/misc/linux-x86/ccache/ccache -M $1; fi;
  watch -n 1 -d "./prebuilts/misc/linux-x86/ccache/ccache" -s;
  cd $currentdir;
}
alias repocleancache='if [ ! -z "$CCACHE_DIR" ]; then rm -rfv "$CCACHE_DIR/"*; fi';
function reposyl()
{
  local currentdir=${PWD}; repor;
  if [ ! -z "$1" ] && [ -d "$1" ] && [ ! -z "$2" ] && [ -d "$2" ]; then
    cd "./$1";
    git fetch "$2/$1";
    reposy .;
  fi;
  cd "$currentdir";
}
function repounshallow()
{
  repo forall -c 'gitbranch=${REPO_RREV##*/}; \
    echo ""; echo "Unshallowing project ${REPO_PROJECT} [${REPO_REMOTE}/${gitbranch}]"; \
    git fetch --unshallow ${REPO_REMOTE};';
}
function repothis()
{
  export currentdir=${PWD};
  repo forall -c ' \
    if [ "$currentdir" = "$(pwd)" ]; then \
      echo " Current project: ${REPO_PROJECT} [${REPO_REMOTE}/${REPO_RREV##*/}]"; \
    fi;';
}

# === Repo TWRP ===
repotwrp()
{
  export CurDir=${PWD};

  # Phone huashan
  PhoneName="huashan";
  if [ ! -z "$1" ]; then
    PhoneName="$1";
  fi;

  if [ -z "$2" ]; then

    # Sources Sync
    repo sync --current-branch --detach --force-broken --force-sync --no-clone-bundle --no-tags;

    # Clean
    make clean;

  fi;

  # Make recovery
  source ./build/envsetup.sh;
  breakfast $PhoneName;
  make -j$(grep -c ^processor /proc/cpuinfo) recoveryimage;
  echo "";

  # Make releases
  echo "  [ Making release files ]";
  echo "";
  TWRPVersion=$(grep TW_VERSION_STR bootable/recovery/variables.h | sed 's/.*\"\(.*\)\".*/\1/' | cut -c 1-5);
  TWRPImg=./out/target/product/$PhoneName/recovery.img;
  OutBoot="twrp-$TWRPVersion-rX-boot-${PhoneName}.img";
  OutFOTA="twrp-$TWRPVersion-rX-fota-${PhoneName}.zip";
  OutTWRP="twrp.img";
  TargetDir="$(xdg-user-dir DESKTOP)";

  if [ -f "$TargetDir/$OutTWRP" ]; then rm -f "$TargetDir/$OutTWRP"; fi;
  if [ -f "$TargetDir/$OutBoot" ]; then rm "$TargetDir/$OutBoot"; fi;
  if [ -f "$TargetDir/$OutFOTA" ]; then rm "$TargetDir/$OutFOTA"; fi;
  if [ -f "$TargetDir/$OutFOTA.unsigned.zip" ]; then rm "$TargetDir/$OutFOTA.unsigned.zip"; fi;
  cp "$TWRPImg" "$TargetDir/$OutTWRP";
  cp "$TWRPImg" "$TargetDir/$OutBoot";
  cp "$bash_android_twrp_fota_zip" "$TargetDir/$OutFOTA.unsigned.zip";
  zip -j -g "$TargetDir/$OutFOTA.unsigned.zip" "$TargetDir/$OutTWRP";
  java -jar "$bash_android_sign_apk_dir/signapk-cm121.jar" \
       -w "$bash_android_sign_apk_dir/testkey.x509.pem" \
       "$bash_android_sign_apk_dir/testkey.pk8" \
       "$TargetDir/$OutFOTA.unsigned.zip" \
       "$TargetDir/$OutFOTA";
  rm -f "$TargetDir/$OutFOTA.unsigned.zip";
  rm -f "$TargetDir/$OutTWRP";
  echo "";
  echo -e " \e[1;37mPackage File:\e[0m $TargetDir/$OutFOTA";
  echo "";

  # Flash new image
  echo "";
  echo "  [ Install TWRP on the '$PhoneName' ]";
  echo "";
  printf "  Flash TWRP to FOTA (Y/n) ? ";
  read key;
  if [[ "$key" != "n" && "$key" != "N" ]] && [ -f $TWRPImg ]; then
    echo "";
    adb root;
    timeout 5 adb wait-for-device;
    adb push $TWRPImg /tmp/twrp.img;
    if [ ! -z "$(adb shell 'ls /system/bin/dd 2> /dev/null')" ]; then
      adb shell /system/bin/dd if=/tmp/twrp.img of=/dev/block/platform/msm_sdcc.1/by-name/FOTAKernel;
    else
      adb shell /sbin/dd if=/tmp/twrp.img of=/dev/block/platform/msm_sdcc.1/by-name/FOTAKernel;
    fi;
    adb reboot recovery;
  fi;
  echo "";
  cd ${CurDir};
}

# === Repo MultiROM ===
repomrom()
{
  export CurDir=${PWD};

  # Phone huashan
  PhoneName="huashan";

  # Device selection
  if [ ! -z "$2" ]; then
    PhoneName="$2";
  fi;

  # Sources Sync
  if [[ ! "$1" =~ "nosync" ]]; then
    # Sources Sync
    repo sync --current-branch --detach --force-broken --force-sync --no-clone-bundle --no-tags;

    # MutiROM submodules
    cd ./system/extras/multirom/;
    git submodule update --init;
    git submodule update --force;
    cd ./../../../;
  fi;

  # Clean
  if [[ ! "$1" =~ "noclean" ]]; then
    make clean;
  fi;

  # Kernels building
  if [[ "$1" =~ "kfetch" ]]; then
    cd ./kernel/sony/msm8960t/;
    git fetch AdrianDC "$3";
    git reset --hard FETCH_HEAD;
    git cherry-pick c1e3c40963f9126a9672ee724880c43b3a0aea9c;
    git cherry-pick 6715415a35153fd64d73b117f0f40d00db53ea35;
    cd ./../../../;
  fi;

  # Make recovery
  source ./build/envsetup.sh;
  breakfast $PhoneName;
  if [[ "$1" =~ "nokexec" ]]; then
    make -j$(grep -c ^processor /proc/cpuinfo) recoveryimage multirom trampoline multirom_zip; # multirom_uninstaller;
  elif [[ "$1" =~ "kernel" ]]; then
    make -j$(grep -c ^processor /proc/cpuinfo) multirom_kernel_zip;
  else
    make -j$(grep -c ^processor /proc/cpuinfo) recoveryimage multirom trampoline multirom_zip multirom_kernel_zip; # multirom_uninstaller;
  fi;
  echo "";

  # Make releases
  echo "  [ Making release files ]";
  echo "";
  DateTag=$(date +'%Y%m%d');
  FileInstall="multirom-$DateTag-v33x-UNOFFICIAL-${PhoneName}.zip";
  OutInstall="multirom-$DateTag-v33x-${PhoneName}.zip";
  FileKernel="multirom_kernel-$DateTag-v33x-UNOFFICIAL-${PhoneName}.zip";
  if [ ! -z "$3" ]; then
    OutKernel="kernel-$DateTag-${PhoneName}-$3.zip";
  else
    OutKernel="kernel-$DateTag-${PhoneName}.zip";
  fi;
  # FileUninstall="multirom-$DateTag-uninstaller-${PhoneName}.zip";
  FileRecovery="multirom-$DateTag-recovery-${PhoneName}.zip";
  # FileImage="multirom-$DateTag-boot-image.img";
  BuildDir=./out/target/product/$PhoneName;
  TargetDir="$(xdg-user-dir DESKTOP)";

  if [[ ! "$1" =~ "kernel" ]] && [ -f "$BuildDir/$FileInstall" ]; then
    if [ -f "$TargetDir/$OutInstall" ]; then rm -f "$TargetDir/$OutInstall"; fi;
    cp "$BuildDir/$FileInstall" "$TargetDir/$OutInstall.unsigned.zip";
    java -jar "$bash_android_sign_apk_dir/signapk-cm121.jar" \
        -w "$bash_android_sign_apk_dir/testkey.x509.pem" \
        "$bash_android_sign_apk_dir/testkey.pk8" \
        "$TargetDir/$OutInstall.unsigned.zip" \
        "$TargetDir/$OutInstall";
    rm -f "$TargetDir/$OutInstall.unsigned.zip";
  fi;

  if [ -f "$BuildDir/$FileKernel" ]; then
    if [ -f "$TargetDir/$OutKernel" ]; then rm -f "$TargetDir/$OutKernel"; fi;
    cp "$BuildDir/$FileKernel" "$TargetDir/$OutKernel.unsigned.zip";
    java -jar "$bash_android_sign_apk_dir/signapk-cm121.jar" \
        -w "$bash_android_sign_apk_dir/testkey.x509.pem" \
        "$bash_android_sign_apk_dir/testkey.pk8" \
        "$TargetDir/$OutKernel.unsigned.zip" \
        "$TargetDir/$OutKernel";
    rm -f "$TargetDir/$OutKernel.unsigned.zip";
  fi;

  # if [[ ! "$1" =~ "kernel" ]] && [ -f "$BuildDir/multirom_uninstaller.zip" ]; then
  #   if [ -f "$TargetDir/$FileUninstall" ]; then rm -f "$TargetDir/$FileUninstall"; fi;
  #   cp "$BuildDir/multirom_uninstaller.zip" "$TargetDir/$FileUninstall.unsigned.zip";
  #   java -jar "$bash_android_sign_apk_dir/signapk-cm121.jar" \
  #        -w "$bash_android_sign_apk_dir/testkey.x509.pem" \
  #        "$bash_android_sign_apk_dir/testkey.pk8" \
  #        "$TargetDir/$FileUninstall.unsigned.zip" \
  #        "$TargetDir/$FileUninstall";
  #   rm -f "$TargetDir/$FileUninstall.unsigned.zip";
  # fi;

  if [[ ! "$1" =~ "kernel" ]] && [ -f "$BuildDir/recovery.img" ]; then
    cp "$BuildDir/recovery.img" "$TargetDir/twrp.img";
    if [ -f "$TargetDir/$FileRecovery" ]; then rm -f "$TargetDir/$FileRecovery"; fi;
    cp "$bash_android_twrp_fota_zip" "$TargetDir/$FileRecovery.unsigned.zip";
    zip -j -g "$TargetDir/$FileRecovery.unsigned.zip" "$TargetDir/twrp.img";
    java -jar "$bash_android_sign_apk_dir/signapk-cm121.jar" \
        -w "$bash_android_sign_apk_dir/testkey.x509.pem" \
        "$bash_android_sign_apk_dir/testkey.pk8" \
        "$TargetDir/$FileRecovery.unsigned.zip" \
        "$TargetDir/$FileRecovery";
    rm -f "$TargetDir/$FileRecovery.unsigned.zip";
    rm -f "$TargetDir/twrp.img";
  fi;

  echo "";
  if [[ ! "$1" =~ "kernel" ]]; then
    # echo -e " \e[1;37mBootimage File:\e[0m $FileImage";
    echo -e " \e[1;37mInstaller File:\e[0m $OutInstall";
    # echo -e " \e[1;37mUninstaller File:\e[0m $FileUninstall";
    echo -e " \e[1;37mRecovery File:\e[0m $FileRecovery";
  fi;
  echo -e " \e[1;37mKernel File:\e[0m $OutKernel";
  echo "";

  # Flash new image
  echo "";
  echo "  [ Install Recovery on the '$PhoneName' ]";
  echo "";
  printf "  Flash Recovery to FOTA (Y/n) ? ";
  read key;
  if [[ "$key" != "n" && "$key" != "N" ]] && [ -f $TWRPImg ]; then
    echo "";
    adb root;
    timeout 5 adb wait-for-device;
    adb push "$BuildDir/recovery.img" /tmp/twrp.img;
    if [ ! -z "$(adb shell 'ls /system/bin/dd 2> /dev/null')" ]; then
      adb shell /system/bin/dd if=/tmp/twrp.img of=/dev/block/platform/msm_sdcc.1/by-name/FOTAKernel;
    else
      adb shell /sbin/dd if=/tmp/twrp.img of=/dev/block/platform/msm_sdcc.1/by-name/FOTAKernel;
    fi;
    adb reboot recovery;
  fi;
  echo "";
  cd ${CurDir};
}
function repomromk()
{
  repomrom noclean,kernel,$1;
}

# === ADB shortcuts ===
function adbr()
{
  timeout 5 adb $1 wait-for-devices;
  timeout 5 adb $1 root; sleep 2;
  timeout 5 adb $1 wait-for-devices;
  timeout 5 adb $1 remount; sleep 1;
  timeout 5 adb $1 wait-for-devices;
}
function adbro()
{
  local rootaccess=$(adb shell whoami);
  local systemacess=$(adb shell mount | grep system | grep rw);
  if [ "${rootaccess:0:4}" != 'root' ] || [ -z "$systemacess" ]; then
    adbr;
  fi;
}
alias adbco='adb connect 192.168.1.111:5555';
alias adbs='adb shell';
alias adbpo='adb shell reboot -p';
alias adbre='adb reboot';
function adbrh() { adb $1 shell setprop ctl.restart zygote; }
alias adbrr='adb reboot recovery';
alias adbw='adb wait-for-device';
alias adbrb='adb reboot bootloader';
alias adbscr='adb shell screencap /sdcard/screenshot.png; adb pull /sdcard/screenshot.png';
alias adbfotaf='adb root; adbs dd if=/dev/zero of=/dev/block/mmcblk0p11';

# === Android file editor ===
function adbedit()
{
  if [ -z "$1" ]; then echo ' Usage : adbedit filepath'; return; fi;

  adbro;
  path="$1";
  name=$(basename "$1");
  adb pull "$path";
  gedit "$name";
  adb push "$name" "$path";
  rm "$name";
}

# === Android binaries updates ===
function adbupdate()
{
  adb version;
  wget -O - https://skia.googlesource.com/skia/+archive/cd048d18e0b81338c1a04b9749a00444597df394/platform_tools/android/bin/linux.tar.gz | tar -zxvf - adb;
  sudo mv adb /usr/bin/adb;
  sudo chmod +x /usr/bin/adb;
  adb version;
}
function repoupdate()
{
  repo --version;
  echo "";
  if [ ! -d ~/bin ]; then mkdir ~/bin; fi;
  curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo;
  chmod a+x ~/bin/repo;
  echo "";
  repo --version;
}
function .repoupdate()
{
  cd .repo/repo/;
  git log --pretty=oneline -10;
  echo "";
  git fetch origin stable;
  git reset --hard origin/stable;
  echo "";
  git branch -vv;
  echo "";
  git log --pretty=oneline -10;
  cd ../../;
}

# === Android builds ===
function makesep()
{
  cwd=$(pwd);
  repor;
  mmm -B -j$(grep -c ^processor /proc/cpuinfo) ./external/sepolicy/ | tee $LogFile;
  cd $cwd;
}
function makedefconf()
{
  export ARCH=arm;
  export SUBARCH=arm;
  export KCONFIG_NOTIMESTAMP=true;

  DEFCONFIG_PATH=./arch/arm/configs/;
  if [ ! -z "$1" ] && [ -f "$DEFCONFIG_PATH/$1" ]; then
    DEFCONFIG_FILE="$1";
  else
    DEFCONFIG_FILE="cm_viskan_huashan_defconfig";
  fi;

  if [ ! -z "$1" ] && [ ! -f "$DEFCONFIG_PATH/$1" ]; then
    make ${DEFCONFIG_FILE};
    meld ./.config ${DEFCONFIG_PATH}/${DEFCONFIG_FILE};
  else
    make ${DEFCONFIG_FILE}
    make menuconfig;
    make savedefconfig;
    meld ./defconfig ${DEFCONFIG_PATH}/${DEFCONFIG_FILE};
    rm ./defconfig;
  fi;

  make mrproper;
}
function mmmall() { mmm $1 $(find -maxdepth 3 -name 'Android.mk' -printf '%h\n' | grep -v 'test' | uniq -u | sort -u); }

# === Fastboot shortcuts ===
function fboot()
{
  sudo adb reboot bootloader;
  if [ ! -z "$1" ]; then
    sudo fastboot flash boot "$1";
  else
    sudo fastboot flash boot boot.img;
  fi;
  sudo fastboot reboot;
}
function fbooto()
{
  sudo adb reboot bootloader;
  if [ ! -z "$1" ]; then
    sudo fastboot flash boot "$1";
  else
    sudo fastboot flash boot boot.img;
  fi;
}

# === ADB Pushes ===
function adbpf()
{
  if [ ! -z "$1" ]; then
    for filepath in $@; do
      filepath=$(readlink -f "$filepath");
      if [ -d "$filepath" ]; then
        adbpf "$filepath/"*;
      else
        if [[ "$filepath" =~ "proprietary" ]]; then
          file=$(printf "$filepath" | sed "s/.*proprietary\(.*\)/\/system\1/g");
        else
          file=$(printf "$filepath" | sed "s/.*\(system.*\)/\/\1/g");
        fi;
        echo ""; echo -e " \e[1;36m$file:\e[0m";
        printf "  "; adb shell ls -l "$file" | cut -c 30-;
        printf "   "; adb push "$filepath" "$file";
      fi;
    done;
    echo "";
  fi;
}
alias adbp='adbro; adbpf';

# === ADB Commit Pusher
function adbpc()
{
  tmpfile=$(mktemp);
  git show --oneline --name-status | tail -n +2 > $tmpfile;
  adbr;
  while read line; do
    mode=$(echo $line | cut -c 1);
    file=$(echo $line | cut -c 3-);
    case $mode in
      A|M)
        adbpf $file;;
      D)
        if [[ "$file" =~ "proprietary" ]]; then
          file=$(printf "$file" | sed "s/.*proprietary\(.*\)/\/system\1/g");
        else
          file=$(printf "$file" | sed "s/.*\(system.*\)/\/\1/g");
        fi;
        echo -e " \e[1;36mDeleting $file...\e[0m";
        printf "   ";
        adb shell rm $file;
        echo "";;
      *);;
   esac
  done < $tmpfile;
  rm $tmpfile;
}

# === Research shortcuts ===
function highlight() { perl -pe "s/$1/\e[1;0;31m$&\e[0m/ig"; }
function grepb() { GREP_COLORS='fn=1;1' grep -air --exclude={*.o,*.a,*.cmd,*.ko} --exclude-dir="\.git" --exclude-dir="\.repo" "$*" .; }
function grepbs() { GREP_COLORS='fn=1;1'; for file in $(find . -not -path "*.git/*" -not -path "*.repo/*" | sort);
                    do found=$(strings $(readlink -f $file) | grep -ai "$*"); if [ ! -z "$found" ]; then echo -e "\e[1;31m$file :\e[0m $found"; fi; done; }
function grepbn() { grep -ailr --color=never --exclude={*.o,*.a,*.cmd,*.ko} --exclude-dir="\.git" --exclude-dir="\.repo" "$*" .; }
function gck()
{
  GREP_COLORS='fn=1;1';
  for file in $(find . -name "Kconfig" -o -name "Makefile" -not -path "*.git/*" -not -path "*.repo/*" | sort);
  do
    found=$(strings $(readlink -f $file) | grep -ai "$*");
    if [ ! -z "$found" ]; then
      echo -e "\e[1;31m$file :\e[0m $found";
    fi;
  done;
}
function gca()
{
  GREP_COLORS='fn=1;1';
  for file in $(find . -name "Android.mk" -not -path "*.git/*" -not -path "*.repo/*" | sort);
  do
    found=$(strings $(readlink -f $file) | grep -ai "$*");
    if [ ! -z "$found" ]; then
      echo -e "\e[1;31m$file :\e[0m $found";
    fi;
  done;
}
alias grepi='grep -i';
alias g='grepb';
alias gs='grepbs';
alias gn='grepbn';
function glc() { GREP_COLORS='fn=1;1' grep --include \*.c --include \*.cpp --include \*.h -anr '.\{80,\}' .; }
function glj() { GREP_COLORS='fn=1;1' grep --include \*.java -anr '.\{100,\}' .; }
function gle() { GREP_COLORS='fn=1;1' grep --include \*.c --include \*.cpp --include \*.h  --include \*.java -anr '.* $' .; }

# === Paths Shortcuts ===
function cdspdev()     { cd $(echo "$(pwd)" | sed 's/\(.*\)Android\([^/]*\/[^/]*\).*/\1Android\2\/device\/sony\/huashan/g'); }
function cdspker()     { cd $(echo "$(pwd)" | sed 's/\(.*\)Android\([^/]*\/[^/]*\).*/\1Android\2\/kernel\/sony\/msm8960t/g'); }
function cdspven()     { cd $(echo "$(pwd)" | sed 's/\(.*\)Android\([^/]*\/[^/]*\).*/\1Android\2\/vendor\/sony/g'); }
function cdspout()     { cd $(echo "$(pwd)" | sed 's/\(.*\)Android\([^/]*\/[^/]*\).*/\1Android\2\/out\/target\/product\/huashan/g'); }
function toaospcaf()   { echo "$(pwd)/$1" | sed 's/\(.*\)Android[^/]*\/[^/]*\(.*\)/\1AndroidDev\/AOSP-CAF-6.0\2/g'; }
function toaosprro()   { echo "$(pwd)/$1" | sed 's/\(.*\)Android[^/]*\/[^/]*\(.*\)/\1AndroidDev\/AOSP-RRO-6.0\2/g'; }
function tocm12()      { echo "$(pwd)/$1" | sed 's/\(.*\)Android[^/]*\/[^/]*\(.*\)/\1AndroidDev\/CyanogenMod\2/g'; }
function tocm13()      { echo "$(pwd)/$1" | sed 's/\(.*\)Android[^/]*\/[^/]*\(.*\)/\1AndroidDev\/CM-13.0\2/g'; }
function getand()      { echo "/media/adriandc/AndroidDev"; }
function getbash()     { echo $(getand)/Bash; }
function getscripts()  { echo $(getand)/Scripts; }
function cdand()       { cd $(getand); }
function cdaospcaf()   { cd $(toaospcaf $1); }
function cdaosprro()   { cd $(toaosprro $1); }
function cdcm12()      { cd $(tocm12 $1); }
function cdcm13()      { cd $(tocm13 $1); }
function cdgh12()      { cd $(getand)/Paths/gerrit-huashan-12.1; }
function cdgh13()      { cd $(getand)/Paths/gerrit-huashan-13.0; }
function cdbash()      { cd $(getbash); }
function cdscripts()   { cd $(getscripts); }
function cdserver()    { cd $(getand)/Server; }
function cdmultirom()  { cd $(getand)/MultiROM; }
function cdtwrp()      { cd $(getand)/TWRP; }
function cddesk()      { cd "$(xdg-user-dir DESKTOP)"; }
function impaospcaf()  { rsync -arv --delete --delete-after $(toaospcaf $1) ./$1 ; }
function impaosprro()  { rsync -arv --delete --delete-after $(toaosprro $1) ./$1 ; }
function impcm12()     { rsync -arv --delete --delete-after $(tocm12 $1) ./$1 ; }
function impcm13()     { rsync -arv --delete --delete-after $(tocm13 $1) ./$1 ; }
function meldaospcaf() { meld ./$1 $(toaospcaf $1); }
function meldaosprro() { meld ./$1 $(toaosprro $1); }
function meldcm12()    { meld ./$1 $(tocm12 $1); }
function meldcm13()    { meld ./$1 $(tocm13 $1); }
function reporoomserv()
{
  cwd=$(pwd);
  repor;
  mkdir -p .repo/local_manifests/;
  gedit .repo/local_manifests/roomservice.xml .repo/manifest.xml;
  cd "$cwd";
}
function cmsw()
{
  cwd=$(pwd);
  if [[ "$cwd" =~ "CyanogenMod" ]]; then
    cd $(printf "$cwd" | sed 's/\(.*\)CyanogenMod\(.*\)/\1CM-13.0\2/g');
  else
    cd $(printf "$cwd" | sed 's/\(.*\)CM-13.0\(.*\)/\1CyanogenMod\2/g');
  fi;
}

# === File Uploader ===
function devupl()
{
  local cwd=$(pwd);
  if [ -f "$1" ]; then
    path=$(readlink -f "$1");
  else
    path="$1";
  fi;
  cdscripts;
  $(getscripts)/android_server_upload.sh "$path" "Development";
  cd $cwd;
}

# === Kernel Helpers ===
function meldtwo()
{
  read -e var1;
  if [ ! -z "$var1" ]; then var2=$var1; fi;
  meld $1/$var2 $2/$var2;
}

# === Terminal Shortcuts ===
function termsp()
{
  DevDir=/media/adriandc/AndroidDev;
  ROM=$(getine $1 CM-13.0);
  gnome-terminal \
    --tab --title="Repo" --working-directory="$DevDir/$ROM/" \
    --tab --title="Device" --working-directory="$DevDir/$ROM/device/sony/huashan/" \
    --tab --title="Kernel" --working-directory="$DevDir/$ROM/kernel/sony/msm8960t/" \
    --tab --title="Vendor" --working-directory="$DevDir/$ROM/vendor/sony/" \
    --tab --title="Desktop" --working-directory="$(xdg-user-dir DESKTOP)";
}
function rmempty()
{
  find . -depth -empty -not -name \*.nomedia -print;
  printf "  \e[1;31mDelete empty files and folders (y/N) ?\e[0m ";
  read key;
  if [[ "$key" == "y" || "$key" == "Y" ]]; then
    find . -depth -empty -not -name \*.nomedia -delete;
  fi;
}

# === Hastebin ===
haste()
{
  # Based upon https://github.com/seejohnrun/haste-client
  # Usage : command | haste or haste file
  if [ ! -z "$1" ] && [ -f "$1" ]; then
    tmp="$1";
    cat "$tmp";
  else
    tmp=$(mktemp);
    cat | tee $tmp;
  fi;
  echo "";
  url=$(curl -X POST -s --data-binary "@$tmp" http://hastebin.com/documents \
      | awk -F '"' '{ print "http://hastebin.com/"$4; }');
  echo "$url";
  xdg-open "$url" &
  echo "";
  rm $tmp;
}

# === Debug shortcuts ===
function sepaud() { cat $1 | grep denied; cat $1 | grep denied | audit2allow -p sepolicy; }
function adbl() { while [ 1 ]; do cls; printf "" >adb.log; adb $1 logcat -v threadtime *:V -C | tee -a adb.log;
                  echo ""; if [ -z "$2" ]; then printf "Press Enter to continue... "; read key; else sleep 10; fi; done; }
alias adblb='while [ 1 ]; do cls; printf "" >adb.log; adb logcat -v audit2allow *:V | tee -a adb.log;
             echo ""; printf "Press Enter to continue... "; read key; done';
alias adblc='adb logcat -c; adbl';
alias adbk='adbr; printf "" >kmsg; adb shell cat /proc/kmsg | tee -a kmsg';
alias adbdm='adbr; printf "" >dmesg; adb shell dmesg | tee -a dmesg';
alias adbkd='printf "" >kmsg; adb shell cat /proc/kmsg | tee -a kmsg';
alias adbkl='cls; adbr; printf "" >last_kmsg; adb shell cat /proc/last_kmsg | tee -a last_kmsg';
alias adbkld='cls; printf "" >last_kmsg; adb shell cat /proc/last_kmsg | tee -a last_kmsg';
alias adbse='adbr; printf "" >kmsg; adb shell cat /proc/kmsg | tee -a kmsg; sepaud kmsg';
alias adbdumpsensors='adb shell dumpsys sensorservice';
alias adbsel='adbkl; sepaud kmsg';
alias adblf='adb logcat -v audit2allow';
alias adblh='adb logcat -b events -b main -b radio | highlight';
alias adbintents='adb shell dumpsys package r > intents.txt';
function adblcln() { cat $1 | cut -c 32- | tee $1.clean; }
function adbkcln() { cat $1 | cut -c 15- | tee $1.clean; }
alias adblkl='adb root; adb wait-for-device; adb shell killall zigote; adbl';
function adbpk() { pid=$(adb shell ps | grep mediaserver | awk '{ print $2 }');
                   adb root; adb wait-for-device;
                   adb logcat -c;
                   adb shell kill $pid;
                   adb shell ps | grep mediaserver;
                   sleep 2; adbl; }
function adbms() { pid=$(adb shell ps | grep mediaserver | awk '{ print $2 }');
                   adb root; adb wait-for-device;
                   adb logcat -c;
                   adb shell kill $pid;
                   pid=$(adb shell ps | grep mediaserver | awk '{ print $2 }');
                   adb shell strace -p $pid; }
function adbst()
{
  if [ -z "$2" ]; then adb wait-for-device; adb root; adb wait-for-device; fi;
  adb shell ps | grep $1;
  pid=$(adb shell ps | grep $1 | awk '{ print $2 }');
  adb shell strace -p ${pid};
}
function adbkp()
{
  adb wait-for-device; adb root; adb wait-for-device;
  adb shell ps | grep $1;
  pid=$(adb shell ps | grep $1 | awk '{ print $2 }');
  adb shell kill ${pid};
}
function adbcl() { filename=$(getine $1 adb.log);
                   cat "$filename" | cut -c 32- | sed -E "s/[0-9]{8}/00000000/g" > "$filename.cut.log"; }
function adblibs() { adb shell grep -air "$1" $(getine $2 /system/lib/); }
alias ndkstack='ndk-stack -sym /media/adriandc/AndroidDev/CM-13.0/out/target/product/huashan/symbols -dump';
function adbwtch() { adbr; while [ 1 ]; do adb shell cat "$1"; done; }
alias adbservices='adb shell service list';
alias adbsl='adb shell ls -l';
alias adbsc='adb shell cat';
alias isdone='notify-send "Process execution finished !"';
function adbgitpf()
{
  tmpfile=$(mktemp);
  git diff-tree --no-commit-id --name-status -r $1 >"$tmpfile";
  while read line
  do
    status=$(echo "$line" | awk '{ print $1 }');
    file=$(echo "$line" | awk '{ print $2 }');
    if [[ "$status" =~ "D" || "$file" =~ ".mk" ]]; then
      continue;
    fi;
    adbpf "$file";
  done <$tmpfile;
  rm -f $tmpfile;
}

# === Git helpers ===
function foreachdir()
{
  bashfolder="/media/adriandc/AndroidDev/Bash";
  source "$bashfolder/bash_android.rc";
  source "$bashfolder/bash_huashan.rc";
  dircur=$(pwd);
  listdir=$(find "$dircur" -maxdepth 1 -type d | sort);
  for directory in $listdir
  do
    if [[ ! "$directory" == "$dircur" ]] && [ -d "$directory" ]; then
      cd "$directory";
      echo "";
      echo " === $(basename $directory) ===";
      echo "";
      $@
    fi;
  done;
  echo "";
  cd "$dircur";
}

# === Log Cleaner ===
function logcl() { cat $1 | sed 's/0x[[:xdigit:]]\{8,8\}/0xaddress/g' | tr -d '\015' > $1.clean; }

# === ADB Tests ===
function adbfb() { adbr; adbs mv $1 $1.temp; }
function adbfr() { adbr; adbs mv $1.temp $1; }

# === Kill and Log Debug ===
function adblk()
{
  printf "Process name : ";
  if [ ! -z "$1" ]; then
    name="$1"; echo "";
  else
    read name;
  fi;
  echo -e \\033c; clear;
  adbs ps | grep -i $name;
  adb logcat -c;
  adb shell pkill -f $name;
  adbs ps | grep -i $name;
  printf "" >adb.log;
  adb logcat | tee -a adb.log;
}

# === Shared assets ===
function getine() { if [ ! -z "$1" ]; then printf $1; else printf $2; fi; }

# === Backtracing shortcuts ===
alias adebug='repor; repos; adbr; \
              adb shell setprop debug.db.uid 100000; \
              adb forward tcp:5039 tcp:5039; \
              gdbclient /system/bin/mediaserver :5039 1141';
alias ad2li='addr2line -f -e /media/adriandc/AndroidDev/CM-13.0/out/target/product/huashan/symbols/system/lib/libc.so';

# === WIP shortcuts ===
alias meldh='meld /media/adriandc/AndroidDev/CM-13.0/device/sony/huashan /media/adriandc/AndroidDev/Paths/gerrit-huashan';
alias meldkx='meld /media/adriandc/AndroidDev/CM-13.0/kernel/sony/msm8960t /media/adriandc/AndroidDev/Files/GitHub/msm8x60';
function meldk() { printf " Subpath : "; read a; meld ./$a $1/$a; }
alias permme='UserName="$(whoami)"; sudo chown -cRv $UserName:$UserName ./';
alias touchall='find . -mindepth 1 -exec touch {} \;';
alias dlog='path=$(xdg-user-dir DESKTOP); xargs log.$(date).log';
function dupl() { cat $1 | sort | uniq -cd; }
alias lsmk='ls -1 | sed "s/\(.*\)/    utils\/\1 \\\/"';
function gitkdev()
{
  chromium-browser https://github.com/CyanogenMod/android_kernel_sony_msm/blob/cm-13.0/$1;
  chromium-browser https://github.com/CyanogenMod/android_kernel_google_msm/blob/cm-13.0/$1;
  chromium-browser https://github.com/CyanogenMod/android_kernel_sony_msm8960t/blob/cm-12.1/$1;
}
function adbinputs()
{
  #grep . /sys/class/input/event*/device/name
  #adbs hexdump -C /dev/input/event7
  echo "";
  echo "adb shell cat /proc/bus/input/devices";
  echo "";
  adb shell "cat /proc/bus/input/devices";
}
function meldt() { meld $1 ../msm8960t/$1; }
function adbkillsetup() { adb root; adb wait-for-device; while [ 1 ]; do adb shell kill $(adb shell ps | grep setup | awk '{ print $2 }'); done; }
function adbtinymix() { adb shell /system/bin/tinymix; }

# === Apps shortcuts ===
function adbu() { echo ""; echo " [ Launching '$1' ]"; echo ""; \
                  echo "    Optimizing..."; adb $2 shell pm force-dex-opt $1; \
                  echo "    Killing..."; adb $2 shell pkill $1; echo ""; }
function ntf() { notify-send "$*"; }

# === Build installs ===
alias adbconfirm='if [ ! -z "$confirm" ]; then printf " Press Enter to continue..."; read key; echo ""; fi';
function adbif()
{
  logfile=/media/adriandc/AndroidDev/Scripts/script_logs.txt;
  rm -f $logfile;
  $@ | tee $logfile;
  echo $PhoneName;
  InstallLog=$(grep -a "target/product/.*/system" $logfile | sort | uniq);
  echo "";
  adbconfirm;
  for FilePath in ${InstallLog[*]}
  do
    if [[ "$FilePath" =~ "/system" && ! "$FilePath" =~ "/NOTICE_FILES" ]]; then
      FilePath=$(printf "$FilePath" | tail -1 \
               | sed "s/\x1B\[[0-9;]*[JKmsu]//g" \
               | sed "s/.*\/\([^\[]*.zip\).*/\1/g");
      if [ -f "$FilePath" ]; then
        adbpf "$FilePath";
      fi;
    fi;
  done;
  echo "";
  confirm="";
}
function adbiv()
{
  logfile=/media/adriandc/AndroidDev/Scripts/script_logs.txt;
  $@ | tee $logfile;
  Proprietary=$(grep -a "Binary.*proprietary/.*" $logfile \
              | sed "s/.* b\/\(.*proprietary\/.*\) .*/\1/g" \
              | sort | uniq);
  echo "";
  for FilePath in ${Proprietary[*]}
  do
    if [ -f "$FilePath" ]; then
      FileTarget=$(echo $FilePath \
                 | sed "s/.*proprietary\/\(.*\)/\/system\/\1/g");
      if [ -f "$FileTarget" ]; then
        printf "$FileTarget: ";
        adb push $FilePath $FileTarget;
      fi;
    fi;
  done;
  echo "";
  confirm="";
}
alias adbi='adbr; confirm=""; adbif';
alias adbii='confirm=""; adbif';
alias adbic='adbr; confirm="true"; adbif';

# === Build paths ===
export bash_android_flashable_zip=$bash_android_dir/android_files/flashable_template.zip;
export bash_kernel_template_zip=$bash_android_dir/android_files/kernel_template.zip;
export bash_android_twrp_fota_zip=$bash_android_dir/android_files/twrp_fota_template.zip;
export bash_android_sign_apk_dir=$bash_android_dir/android_signapk;

# === Build TWRP ===
function mktwrp()
{
  CurDir=$(pwd);
  TmpDir=$(mktemp -d);
  BuildParams="$@";
  LogFile="$TmpDir/mmm_logs.txt";
  OutFile="TWRP-"$(date +'%Y%m%d-%H%M')"-$(basename $(readlink -f $1))-${PhoneName}.zip";
  TargetFile="$(xdg-user-dir DESKTOP)/$OutFile";

  if [ -z "$BuildParams" ]; then
    BuildParams=".";
  fi;

  echo "";
  mka recoveryimage;

  if [ -f ]; then
    cp "$FilePath" "$TmpDir/$FileTarget";
    FilesList="$FilesList ./$FileTarget";
  fi;

  cd "$TmpDir/";
  cp "$bash_android_flashable_zip" "$TmpDir/$OutFile.unsigned.zip";
  zip -g "$TmpDir/$OutFile.unsigned.zip" $FilesList;
  java -jar "$bash_android_sign_apk_dir/signapk-cm121.jar" \
       -w "$bash_android_sign_apk_dir/testkey.x509.pem" \
       "$bash_android_sign_apk_dir/testkey.pk8" \
       "$TmpDir/$OutFile.unsigned.zip" \
       "$TmpDir/$OutFile";
  rm -f "$TmpDir/$OutFile.unsigned.zip";
  cp "$TmpDir/$OutFile" "$TargetFile";
  echo "";
  echo -e " \e[1;37mPackage File:\e[0m $TargetFile";
  echo "";

  rm -rf "$TmpDir";
  cd "$CurDir";
}

# === Git vars ===
gituserdefault='AdrianDC';
gitremotedefault='AdrianDC';
gitreviewdefault='github';
gitrebasedefault=25;

# === Git commits ===
alias gitc='git commit';
alias gitcs='git commit -s';
alias gitca='git commit --amend';
alias gitcae='git commit --amend --no-edit';
alias gitcid='scp -p -P 29418 $gituserdefault@review.cyanogenmod.org:hooks/commit-msg .git/hooks/; chmod u+x ./.git/hooks/commit-msg; gitca';
alias gitrev='git revert';

# === Git commit with infos ===
function gitcci()
{
  clear; url=$1;
  if [[ $url =~ 'github' && ! $url =~ '.patch' ]]; then url='$url.patch'; fi;
  file=$(mktemp);
  curl -s $url 2>nul >"$file";

  local line_subject=$(($(sed -n "1,/Subject:/=" "$file" | tail -1)+1));
  local line_messageend=$(($(sed -n "1,/---/=" "$file" | tail -1)-1));
  local subject=$(grep "Subject: " "$file" | tail -1 | cut -c10-);

  cat $file;
  git add -Ap;
  git commit \
    -m "$subject"$'\n'"$(sed -n "${line_subject},${line_messageend}p" "$file")" \
    --date="$(grep "Date:" "$file" | tail -1) \
    --author="$(grep "Author:" "$file" | tail -1);

  rm "$file";
}

# === Git assets ===
function gitfetchtreset() { git fetch $(getine $1 $gitremotedefault) $(getine $2 $(repogetbranch)); git reset FETCH_HEAD --hard; }
function gitfetchtcheckout() { remote=$(getine $1 $gitremotedefault); branch=$(getine $2 $(repogetbranch)); git fetch $remote $branch; git checkout $remote/$branch; }

# === Git fetching ===
alias gitf='git fetch';
alias gitfmr='git fetch origin; git reset origin/master';
alias gitfs='git fetch origin; git reset origin/$(git rev-parse --abbrev-ref HEAD); git stash';
alias gitfsu='git fetch origin; git reset origin/$(git rev-parse --abbrev-ref HEAD); git stash -p';
alias gitfgr='gitfetchtreset github';
alias gitfir='gitfetchtreset aicp lp5.1';
alias gitfor='gitfetchtreset origin';
alias gitfar='gitfetchtreset $gitremotedefault';
alias gitfsr='gitfetchtreset source';
alias gitfgc='gitfetchtcheckout github';
alias gitfard='gitfetchtreset ADC';
function gitfdr() { git fetch "$1"; git reset --hard FETCH_HEAD; }
function gitfkl() { git fetch git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git linux-3.4.y; }

# === Repo Branch ===
function repogetbranch()
{
  local branch='cm-13.0';
  local infos=$(repo info . 2>&1);
  if [[ ! "$infos" =~ 'repo to be installed' ]]; then
    branch=$(echo "$infos" \
          | grep -i 'Manifest branch' \
          | head -n 1 \
          | sed 's/.*\/heads\/\(.*\)/\1/');
  fi;
  echo "$branch";
}

# === Git pushing ===
function gitpu()
{
  remote=$(getine $1 gitremotedefault);
  if [ ! -z "$2" ]; then
    branch=$2;
  else
    branch=$(repogetbranch);
  fi;
  echo "";
  command="git push -f $remote HEAD:refs/heads/$branch";
  printf "  $command [Enter] ? "; read key;
  echo "";
  git fetch $remote $branch;
  $command;
  echo "";
}
alias gitpa='gitpu $gitremotedefault';
alias gitpa6='gitpu $gitremotedefault aosp-6.0';
alias gitpaa6='gitpu $gitremotedefault android-6.0';
function gitpacaf() { branch=$(getine $1 "LA.AF.1.2.1");
                      git push -f -u https://github.com/AdrianDC/android_kernel_sony_msm8x60.git HEAD:refs/heads/$branch; }
alias gitpb='gitpu backup';
alias gitpold='gitpu old';

function gitpo() { command="git push origin $(getine $1 $(repogetbranch))"; \
                   echo ""; printf " \e[1;31mTarget: \e[0m";
                   git remote -v | grep origin | head -1 | cut -f2 | cut -d' ' -f1;
                   echo -e " \e[1;37mCommand: $command\e[0m"; printf "    > Proceed with origin push (y/N) ? "; read key; \
                   if [[ "$key" == "y" || "$key" == "Y" ]]; then echo ""; $command; fi; echo ""; }
alias gitpf='git push -f';
function gitck() { branch=$(getine $1 $(repogetbranch)); git fetch github $branch >/dev/null; git diff HEAD github/$branch; }
function gitcn() { branch=$(getine $1 $(repogetbranch)); git fetch github $branch; git diff HEAD github/$branch; }

# === Git push helpers ===
function gitpamrom()
{
  git cherry-pick 3526e39dae113144667350f7babbd80d494a5756;
  git cherry-pick 4590f1ad4f1bdadce3f5d1d2af6c4c2c6a0867f8;
  git cherry-pick 271719c6d4353ba210c69f1cdaf03464b56988c5;
  git cherry-pick 9587bac59e9a17bd3631cab64173ca99edeeb549;
  gitpa multirom;
  git reset --hard HEAD~4;
}

# === Git resetting ===
alias gitrh='git reset FETCH_HEAD --hard';
alias githd='git reset HEAD --hard';
alias gitcl='git reset HEAD --hard; git stash -u';
alias gitro='git reset HEAD^ --hard';
alias gitsl='git reset HEAD^; gitap; gitcae';
alias gitrl='git revert HEAD -n; git commit -m "Revert"; git reset HEAD^; git add -p';
alias gitri='git reset HEAD^';
alias gitrt='git reset --hard';

# === Git rebasing ===
function gitr() { git rebase HEAD~$(getine $1 $gitrebasedefault) -i; }
function gitrf() { git rebase $1^ -i; }
alias gitra='git rebase --abort';
alias gitrc='git rebase --continue';
alias gitre='git rebase --edit-todo';
alias gitrs='git rebase --skip';
function gitrb()  { branch=$(getine $1 $(repogetbranch)); git fetch github $branch; git rebase github/$branch; }
function gitrbo() { branch=$(getine $1 $(repogetbranch)); git fetch origin $branch; git rebase origin/$branch; }
function gitrbm() { branch=$(getine $1 LA.AF.1.2.1_rb1.6); git fetch mifl $branch; git rebase mifl/$branch; }
function gitrbad() { branch=$(getine $1 $(repogetbranch)); git fetch AdrianDC $branch; git rebase AdrianDC/$branch; }
function gitrbma() { branch=$(getine $1 cm-13.0); git fetch ADC $branch; git rebase ADC/$branch; }

# === Git branch ===
function gitbc() { branch=$(getine $1 $(repogetbranch)); review=$(getine $2 $gitreviewdefault);
                   git fetch $review $branch; git branch $branch --track $review/$branch; git checkout $branch; }
function gitbt() { branch=$(getine $1 $(repogetbranch)); git branch $branch; git checkout $branch; }
alias gitbd='git branch -D';
alias gitbv='git fetch $gitreviewdefault $(git rev-parse --abbrev-ref HEAD); git branch -vv';
function gitbvv() { branch=$(getine $1 $(repogetbranch));
                    git fetch origin $branch;
                    git branch tempbck;
                    git branch -D $branch;
                    git branch $branch --track origin/$branch;
                    git checkout $branch;
                    git reset --hard tempbck;
                    git branch -D tempbck;
                    echo ""; gitbv; }
alias gitrv='git remote -v';
function gitraa() { git remote add AdrianDC $(git remote -v | head -n 1 | awk '{ print $2 }'); }
alias gitch='git checkout';
alias gitbaclean='git fetch $gitremotedefault; git branch -r | grep $gitremotedefault | sed "s/$gitremotedefault\/\(.*\)/\1/g" | xargs -L 1 git push $gitremotedefault --delete';

# === Git adds ===
alias gitaa='git add . -Av';
alias gitap='git add -p';
alias gitaap='git add . -Ap';
alias gitacf='gitap; gitcae; gitpf';

# === Git cherry-picks ===
alias gitcp='git cherry-pick';
alias gitcpc='git reset; git cherry-pick --continue';
alias g='git cherry-pick';
function gitcpl() { while [ 1 ]; do echo ""; printf " Commit : "; read commit; gitcp $commit; done; echo ""; }
function gitcpa() { a="$1"; b="$2"; if [ -z "$b" ] && [ -z "${a##*[!0-9]*}" ]; then b="$a"; a=""; fi;
                    git fetch $gitremotedefault $(getine $b $(repogetbranch)); git cherry-pick FETCH_HEAD~$(getine $a 0); }
function gitcpal()
{
  if [ -z "$2" ]; then
    echo "usage: gitcpal branch commitcount";
    return;
  fi;
  git cherry-pick --abort;
  git fetch $gitremotedefault $(getine $1 $(repogetbranch));
  git cherry-pick $2^..FETCH_HEAD;
}
function gitfcp() { git fetch $1 $2; git cherry-pick FETCH_HEAD; }

# === Git stash ===
alias gits='git stash';
alias gitsp='git stash -p';
alias gitsu='git stash -u';
alias gitspop='git stash pop';

# === Git review ===
function gitpushreview() { if [[ "$2" != "." ]]; then projectpath="$1/$2" ; else projectpath="$1"; fi;
                           projectname=$(git remote -v | grep $2 | tail -1 | cut -f 2 | sed "s/.*\/\([^.]*\).* .*/\1/");
                           command="git push $projectpath/$projectname HEAD:refs/$(getine $3 for)/$(getine $4 $(repogetbranch))";
                           echo ""; echo " $command"; printf "  > Proceed with review upload (y/N) ? "; read key;
                           if [[ "$key" == "y" || "$key" == "Y" ]]; then
                             echo ""; printf "  > Are you sure (y/N) ? "; read key;
                             if [[ "$key" == "y" || "$key" == "Y" ]]; then echo ""; $command; fi;
                           fi; echo ""; }
alias gitpr='gitpushreview ssh://$gituserdefault@review.cyanogenmod.org:29418 CyanogenMod for';
alias gitpg='gitpushreview ssh://$gituserdefault@review.cyanogenmod.org:29418 CyanogenMod heads';
alias gitprh='gitpushreview http://review.cyanogenmod.org CyanogenMod for';
alias gitpgh='gitpushreview http://review.cyanogenmod.org CyanogenMod heads';
alias gitpraicp='gitpushreview ssh://AdrianDC@gerrit.aicp-rom.com:29418 AICP for';
alias gitpraicpl='gitpushreview ssh://AdrianDC@gerrit.aicp-rom.com:29418 AICP for lp5.1';
alias gitprhaicp='gitpushreview http://gerrit.aicp-rom.com AICP for';
alias gitpr7='gitpushreview ssh://$gituserdefault@review.msm7x30.org:29418 LegacyXperia for';
alias gitpr7h='gitpushreview http://review.msm7x30.org LegacyXperia for';
alias gitpromni='gitpushreview ssh://$gituserdefault@gerrit.omnirom.org:29418 . for';
alias gitpromnih='gitpushreview http://gerrit.omnirom.org . for';
alias gitprrro='gitpushreview ssh://$gituserdefault@blazingphoenix.in:29418 . for marshmallow';
alias gitprrroh='gitpushreview http://blazingphoenix.in:8080 . for marshmallow';

# === Git drafts ===
function gitpushdrafts() { if [[ "$2" != "." ]]; then projectpath="$1/$2" ; else projectpath="$1"; fi;
                           projectname=$(git remote -v | grep $2 | tail -1 | cut -f 2 | sed "s/.*\/\([^.]*\).* .*/\1/");
                           command="git push $projectpath/$projectname HEAD:refs/drafts/$(getine $3 $(repogetbranch))";
                           echo ""; echo " $command"; printf "  > Proceed with review upload (y/N) ? "; read key;
                           if [[ "$key" == "y" || "$key" == "Y" ]]; then
                             if [[ "$key" == "y" || "$key" == "Y" ]]; then echo ""; $command; fi;
                           fi; echo ""; }
alias gitprd='gitpushdrafts ssh://$gituserdefault@review.cyanogenmod.org:29418 CyanogenMod';
alias gitprdh='gitpushdrafts http://review.cyanogenmod.org CyanogenMod';
alias gitpr7d='gitpushdrafts ssh://$gituserdefault@review.msm7x30.org:29418 LegacyXperia';
alias gitpr7dh='gitpushdrafts http://review.msm7x30.org LegacyXperia';
alias gitpromnid='gitpushdrafts ssh://$gituserdefault@gerrit.omnirom.org:29418 .';
alias gitpromnidh='gitpushdrafts http://gerrit.omnirom.org .';
alias gitprdtwrp='gitpushdrafts ssh://$gituserdefault@gerrit.twrp.me:29418 .';
alias gitprrrod='gitpushdrafts ssh://$gituserdefault@blazingphoenix.in:29418 . marshmallow';
alias gitprrrodh='gitpushdrafts http://blazingphoenix.in:8080 . marshmallow';

# === Git tools ===
alias gitd='git diff';
alias gitlo='git log --pretty=oneline';
alias gitlc='git show --name-only --oneline';
alias gitdfs='git diff-tree --no-commit-id --name-status -r';
function gitdf()
{
  if [ -z "$2" ]; then
    echo " Usage: gitdf sha1commit filepath";
    return;
  fi;
  git diff $1^:$2 $1:$2;
}
function gitsf() { echo ""; for i in `seq 1 $(getine $1 1)`; do
                     gitlc HEAD~$(($i-1)); echo ""; done; }
function gitsfd() { echo ""; for i in $(git log --format=format:%H -- $(getine $1)); do
                      gitlc $i; echo ""; printf " > Press Enter... "; read key; done; }
alias gitmt='git mergetool';
function gitmte()
{
  git diff --name-only | uniq;
  echo "";
  for file in $(git diff --name-only | uniq); do
    printf " - $file : ";
    gedit $file;
    printf "Done ? [Enter / Ctrl+C] ";
    read;
    git add $file;
  done;
}
alias githi='git update-index --assume-unchanged';
alias gitsh='git update-index --no-assume-unchanged';
alias gitlod='git log --pretty=oneline --';
function gitloc() { path=$(xdg-user-dir DESKTOP);
                    git log --pretty=oneline --no-merges HEAD -- . | tee $path/gitloc$1.full.log;
                    cat $path/gitloc$1.full.log | cut -c 42-| sort | tee $path/gitloc$1.comp.log; }
function gitlos()
{
  if [ ! -z "$2" ]; then cnt=$2; else cnt=30; fi;
  echo -e " \e[1;37mSearching for $1 in last $cnt commits...\e[0m";
  echo "";
  for sha1 in $(git log --max-count=$cnt --format=format:%H -- .); do
    if [ ! -z "$(git show $sha1 | grep -i "$1")" ]; then
      git show --name-only --oneline $sha1; echo "";
    fi;
  done;
}
function gite() { gedit $1; printf "Done ? [Enter] "; read; git add $1; }

# === Git mergers ===
function gitmerges()
{
  if [ ! -z "$2" ]; then cnt=$2; else cnt=30; fi;
  echo "";
  echo -e " \e[1;37mSearching mergeable commits in $1 tree...\e[0m";
  echo "";
  git rev-list $1 --reverse --pretty=oneline -- . \
    | tail -n $cnt \
    | while read line;
  do
    sha1=$(echo $line | cut -c -40);
    title=$(echo $line | cut -c 42-);
    if [ -z "$(git rev-list HEAD --pretty=oneline -- . \
       | grep -i "$title")" ]; then
      echo -e " \e[1;31m$sha1 : \e[1;37m$title\e[0m";
      git cherry-pick $sha1;
      git reset --hard HEAD;
      echo "";
    fi;
  done;
}

# === Git repos / folders comparator ===
function gitlodc()
{
  dirlog=$(getine $3 ".");
  if [ -z "$2" ]; then
    echo " Usage: gitlodc repo_one_path repo_two_path sub_folder [sort]";
    return;
  fi;

  dircur=$(pwd);
  tmpdir=$(mktemp -d);
  cd "$1";
  gitlod "$dirlog" | cut -d' ' -f2- > "$tmpdir/gitdir1.log";
  if [ -z "$4" ]; then
    sort "$tmpdir/gitdir1.log" -o "$tmpdir/gitdir1.log";
  fi;
  cd "$2";
  gitlod "$dirlog" | cut -d' ' -f2- > "$tmpdir/gitdir2.log";
  if [ -z "$4" ]; then
    sort "$tmpdir/gitdir2.log" -o "$tmpdir/gitdir2.log";
  fi;
  meld "$tmpdir/gitdir1.log" "$tmpdir/gitdir2.log";
  rm -rf "$tmpdir";
  cd "$dircur";
}

# === Git kernels meld  ===
function gitkmeld()
{
  subdir=$(getine $2 "");
  if [ -z "$1" ]; then
    echo " Usage: gitkmeld second_kernel_path sub_folder";
    return;
  fi;

  meld ./$subdir/ $1/$subdir/;
}

# === Git killers ===
function gitonebranch() { \
                          git fetch origin;
                          git branch -r | sed 's/origin\/\(.*\)/\1/' \
                                        | grep -v "HEAD" \
                                        | grep -v $(git rev-parse --abbrev-ref HEAD) \
                                        | xargs -I {} sh -c 'printf " Removing branch {} : "; git push origin :{};';
                          git tag -l | xargs -I {} sh -c 'printf " Removing tag {} : "; git push origin :{}; printf "  "; git tag -d {};';
                        }

# === Compilations ===
alias kernelcfg='make ARCH=arm CROSS_COMPILE=arm-linux-androideabi- cm_viskan_huashan_defconfig; \
                 cp -fv ./.config ./arch/arm/configs/cm_viskan_huashan_defconfig; rm -f ./.config';
alias kernelcln='rm ';

# === Linux Commands ===
function gohibernate() { \
                         sudo swapon -a; \
                         sudo swapon -s; \
                         sudo pm-hibernate; \
                       }

# === Linux Functions ===
function mtpmountdisable()
{
  gsettings set org.cinnamon.desktop.media-handling automount-open false;
  gsettings set org.cinnamon.desktop.media-handling automount false;
}

# === Debug builds ===
function kernelmassbuilder()
{
  CurHead=3bb6504b937f9cd4828a78c45c0194752f67d37e;
  Counter=760;

  while [ $Counter -ge 0 ]; do
    echo $Counter
    git reset --hard $CurHead~$Counter;
    kerzip $Counter;
    Counter=$((Counter - 10));
  done;
}

# === BACKUP : Git patchs ===
function gitacp()
{
  clear; url=$1; echo $url;
  #url="http://kernel.opensuse.org/cgit/kernel/patch/?id=620e5050827008ab207a8dfcc44cb79f07f1942c";
  if [[ ! $url =~ '.patch' ]]; then url='$url.patch'; fi;
  curl -s $url 2>nul > /tmp/bash_android_tmp.patch;
  git apply --stat "/tmp/bash_android_tmp.patch";
  git apply --check "/tmp/bash_android_tmp.patch";
  git apply "/tmp/bash_android_tmp.patch";
}

# === BACKUP : gerrit-cherry-pick ===
alias gerrit-cherry-pick='if ! hash gerrit-cherry-pick 2>/dev/null; then \
                            curl -Lo ~/bin/gerrit-cherry-pick http://review.cyanogenmod.org/tools/bin/gerrit-cherry-pick; \
                            chmod +x ~/bin/gerrit-cherry-pick; \
                          fi; \
                          gerrit-cherry-pick';

# find . -type f | cut -c 2- | xargs adb shell ls -l

